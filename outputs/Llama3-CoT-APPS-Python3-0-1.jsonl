{"name": "3554", "description": "Zonk is addictive dice game. In each round player rolls 6 dice. Then (s)he composes combinations from them. Each combination gives certain points. \n\nThen player can take one or more dice combinations to his hand and re-roll remaining dice or save his score. Dice in player's hand won't be taken into account in subsequent rolls.\n\nIf no combinations can be composed - situation is called \"zonk\". Player thrown zonk loses all points in this round and next player moves. So it's player decision when to reroll and when to stop and save his score.\n\nYour task is simple - just evaluate current roll and return maximum number of points can be scored from it. If no combinations can be made - function must return string ``\"Zonk\"`` (without quotes).\n\nThere are different variations of Zonk. In this kata, we will use most common table of combinations:\n\nCombinationExample rollPoints\nStraight (1,2,3,4,5 and 6)6 3 1 2 5 41000 points\nThree pairs of any dice2 2 4 4 1 1750 points\nThree of 11 4 1 11000 points\nThree of 22 3 4 2 2200 points\nThree of 33 4 3 6 3 2300 points\nThree of 44 4 4400 points\nThree of 52 5 5 5 4500 points\nThree of 66 6 2 6600 points\nFour of a kind1 1 1 1 4 62 \u00d7 Three-of-a-kind score (in example, 2000 pts)\nFive of a kind5 5 5 4 5 53 \u00d7 Three-of-a-kind score (in example, 1500 pts)\nSix of a kind4 4 4 4 4 44 \u00d7 Three-of-a-kind score (in example, 1600 pts)\nEvery 14 3 1 2 2100 points\nEvery 55 2 650 points\n\n\nEach die cannot be used in multiple combinations the same time, so three pairs of 2, 3 and 5 will worth you only ``750`` points (for three pairs), not 850 (for three pairs and two fives). But you can select multiple combinations, ``2 2 2 1 6`` will worth you ``300`` points (200 for three-of-kind '2' plus 100 for single '1' die)\n\nExamples:\n```python\n  get_score([1,2,3]) # returns 100 = points from one 1\n  get_score([3,4,1,1,5]) # returns 250 = points from two 1 and one 5\n  get_score([2,3,2,3,3,2]) # returns 500 = three of 2 + three of 3\n  get_score([1,1,1,1,1,5]) # returns 3050 = five 1 + one 5\n  get_score([2,3,4,3,6,6]) # returns \"Zonk\" = no combinations here\n  get_score([2,2,6,6,2,2]) # returns 400 = four 2, this cannot be scored as three pairs\n  get_score([1,3,4,3,4,1]) # returns 750 = three pairs\n  get_score([3,3,3,3]) # returns 600 = four of 3\n  get_score([1,2,3,4,5]) # returns 150 = it's not straight\n```\nOf course, in real Zonk game it's sometimes not worth to collect all combination from roll. Taking less dice and rerolling more remaining may be better, but task is just to calculate maximum possible score from current single roll.\n\nP.S. Inspired by this kata: http://www.codewars.com/kata/5270d0d18625160ada0000e4", "difficulty": "introductory", "id": 3554, "sample_io": [{"input": "[1, 2, 3]", "output": [100]}, {"input": "[3,4,1,1,5]", "output": [250]}, {"input": "[2,3,2,3,3,2]", "output": [500]}, {"input": "[1,1,1,1,1,5]", "output": [3050]}, {"input": "[2,3,4,3,6,6]", "output": ["Zonk"]}, {"input": "[2,2,6,6,2,2]", "output": [400]}, {"input": "[1,3,4,3,4,1]", "output": [750]}, {"input": "[3,3,3,3]", "output": [600]}, {"input": "[1,2,3,4,5]", "output": [150]}], "test_list": [{"input": "[1]", "output": [100]}, {"input": "[5]", "output": [50]}, {"input": "[1, 1]", "output": [200]}, {"input": "[5, 5]", "output": [100]}, {"input": "[5, 1]", "output": [150]}, {"input": "[5, 6]", "output": [50]}, {"input": "[1, 1, 1]", "output": [1000]}, {"input": "[2, 2, 2]", "output": [200]}, {"input": "[3, 3, 3]", "output": [300]}, {"input": "[4, 4, 4]", "output": [400]}, {"input": "[5, 5, 5]", "output": [500]}, {"input": "[6, 6, 6]", "output": [600]}, {"input": "[1, 2, 1]", "output": [200]}, {"input": "[1, 1, 5]", "output": [250]}, {"input": "[5, 5, 6]", "output": [100]}, {"input": "[1, 5, 5]", "output": [200]}, {"input": "[1, 1, 1, 1]", "output": [2000]}, {"input": "[2, 2, 2, 2]", "output": [400]}, {"input": "[3, 3, 3, 3]", "output": [600]}, {"input": "[4, 4, 4, 4]", "output": [800]}, {"input": "[5, 5, 5, 5]", "output": [1000]}, {"input": "[6, 6, 6, 6]", "output": [1200]}, {"input": "[1, 5, 5, 1]", "output": [300]}, {"input": "[2, 3, 4, 5]", "output": [50]}, {"input": "[3, 3, 5, 3]", "output": [350]}, {"input": "[1, 1, 1, 1, 1]", "output": [3000]}, {"input": "[2, 2, 2, 2, 2]", "output": [600]}, {"input": "[3, 3, 3, 3, 3]", "output": [900]}, {"input": "[4, 4, 4, 4, 4]", "output": [1200]}, {"input": "[5, 5, 5, 5, 5]", "output": [1500]}, {"input": "[6, 6, 6, 6, 6]", "output": [1800]}, {"input": "[1, 5, 1, 5, 1]", "output": [1100]}, {"input": "[1, 2, 3, 4, 5]", "output": [150]}, {"input": "[2, 3, 4, 5, 6]", "output": [50]}, {"input": "[1, 3, 4, 5, 2]", "output": [150]}, {"input": "[1, 1, 1, 1, 1, 1]", "output": [4000]}, {"input": "[2, 2, 2, 2, 2, 2]", "output": [800]}, {"input": "[3, 3, 3, 3, 3, 3]", "output": [1200]}, {"input": "[4, 4, 4, 4, 4, 4]", "output": [1600]}, {"input": "[5, 5, 5, 5, 5, 5]", "output": [2000]}, {"input": "[6, 6, 6, 6, 6, 6]", "output": [2400]}, {"input": "[2, 1, 3, 4, 6, 5]", "output": [1000]}, {"input": "[4, 4, 2, 2, 6, 6]", "output": [750]}, {"input": "[1, 2, 3, 4, 5, 5]", "output": [200]}, {"input": "[2, 2, 4, 2, 2, 4]", "output": [400]}, {"input": "[1, 3, 4, 5, 2, 2]", "output": [150]}, {"input": "[1, 5, 2, 1, 2, 5]", "output": [750]}, {"input": "[4, 1, 1, 1, 1, 5]", "output": [2050]}, {"input": "[3, 5, 2, 4, 2, 6]", "output": [50]}, {"input": "[1, 6, 6, 1, 1, 6]", "output": [1600]}], "starter_code": "\ndef get_score(dice):\n\t", "source_codes": ["\ndef get_score(rolls):\n    counts = {}\n    \n    for roll in rolls:\n        if roll not in counts:\n            counts[roll] = 1\n        else:\n            counts[roll] += 1\n    \n    straight = sorted(counts.keys()) == list(range(min(counts.keys()), max(counts.keys()) + 1))\n    \n    result = (\n        4000 * (6 in counts and 5 in counts and 4 in counts and 3 in counts and 2 in counts and 1 in counts) +\n        2000 * (straight and 6 in counts) +\n        1000 * (straight and 6 not in counts) +\n        400 * (5 in counts)**2 + \n        300 * ((4 in counts) * (3 in counts)) +\n        150 * (4 in counts or 5 in counts) + \n        75 * ((3 in counts) * (3 in counts)) +\n        35 * (3 in counts) +\n        15 * (2 in counts)**2 + \n        6 * (2 in counts)\n    )\n    \n    if result == 0 and all(count <= 1 for count in counts.values()):\n        return \"Zonk\"\n    \n    return int(result)\n\n# Test cases\nprint(get_score([1,2,3])) # returns 100 = points from one 1\nprint(get_score([3,4,1,1,5])) # returns 250 = points from two 1 and one 5\nprint(get_score([2,3,2,3,3,2])) # returns 500 = three of 2 + three of 3\nprint(get_score([1,1,1,1,1,5])) # returns 3050 = five 1 + one 5\nprint(get_score([2,3,4,3,6,6])) # returns \"Zonk\" = no combinations here\nprint(get_score([2,2,6,6,2,2])) # returns 400 = four 2, this cannot be scored as three pairs\nprint(get_score([1,3,4,3,4,1])) # returns 750 = three pairs\nprint(get_score([3,3,3,3])) # returns 600 = four of 3\nprint(get_score([1,2,3,4,5])) # returns 150 = it's not straight\n\n\n"], "responses": ["```python\ndef get_score(rolls):\n    counts = {}\n    \n    for roll in rolls:\n        if roll not in counts:\n            counts[roll] = 1\n        else:\n            counts[roll] += 1\n    \n    straight = sorted(counts.keys()) == list(range(min(counts.keys()), max(counts.keys()) + 1))\n    \n    result = (\n        4000 * (6 in counts and 5 in counts and 4 in counts and 3 in counts and 2 in counts and 1 in counts) +\n        2000 * (straight and 6 in counts) +\n        1000 * (straight and 6 not in counts) +\n        400 * (5 in counts)**2 + \n        300 * ((4 in counts) * (3 in counts)) +\n        150 * (4 in counts or 5 in counts) + \n        75 * ((3 in counts) * (3 in counts)) +\n        35 * (3 in counts) +\n        15 * (2 in counts)**2 + \n        6 * (2 in counts)\n    )\n    \n    if result == 0 and all(count <= 1 for count in counts.values()):\n        return \"Zonk\"\n    \n    return int(result)\n\n# Test cases\nprint(get_score([1,2,3])) # returns 100 = points from one 1\nprint(get_score([3,4,1,1,5])) # returns 250 = points from two 1 and one 5\nprint(get_score([2,3,2,3,3,2])) # returns 500 = three of 2 + three of 3\nprint(get_score([1,1,1,1,1,5])) # returns 3050 = five 1 + one 5\nprint(get_score([2,3,4,3,6,6])) # returns \"Zonk\" = no combinations here\nprint(get_score([2,2,6,6,2,2])) # returns 400 = four 2, this cannot be scored as three pairs\nprint(get_score([1,3,4,3,4,1])) # returns 750 = three pairs\nprint(get_score([3,3,3,3])) # returns 600 = four of 3\nprint(get_score([1,2,3,4,5])) # returns 150 = it's not straight\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3554}
{"name": "4724", "description": "DropCaps means that the first letter of the starting word of the paragraph should be in caps and the remaining lowercase, just like you see in the newspaper. \n\nBut for a change, let's do that for each and every word of the given String. Your task is to capitalize every word that has length greater than 2, leaving smaller words as they are.\n\n*should work also on Leading and Trailing Spaces and caps.\n\n```python\ndrop_cap('apple') => \"Apple\"\ndrop_cap('apple of banana'); => \"Apple of Banana\"\ndrop_cap('one   space'); => \"One   Space\" \ndrop_cap('   space WALK   '); => \"   Space Walk   \" \n```\n\n**Note:** you will be provided atleast one word and should take string as input and return string as output.", "difficulty": "introductory", "id": 4724, "sample_io": [{"input": "apple of banana", "output": ["Apple of Banana"]}, {"input": "apple", "output": ["Apple"]}, {"input": "one   space", "output": ["One   Space"]}, {"input": "   space WALK   ", "output": ["   Space Walk   "]}], "test_list": [{"input": "Apple Banana", "output": ["Apple Banana"]}, {"input": "Apple", "output": ["Apple"]}, {"input": "", "output": [""]}, {"input": "of", "output": ["of"]}, {"input": "Revelation of the contents outraged American public opinion, and helped generate", "output": ["Revelation of The Contents Outraged American Public Opinion, And Helped Generate"]}, {"input": "more  than    one space between words", "output": ["More  Than    One Space Between Words"]}, {"input": "  leading spaces", "output": ["  Leading Spaces"]}, {"input": "trailing spaces   ", "output": ["Trailing Spaces   "]}, {"input": "ALL CAPS CRAZINESS", "output": ["All Caps Craziness"]}, {"input": "rAnDoM CaPs CrAzInEsS", "output": ["Random Caps Craziness"]}], "starter_code": "\ndef drop_cap(str_):\n\t", "source_codes": ["\ndef drop_cap(s):\n    words = s.split()\n    new_words = []\n    \n    for word in words:\n        if len(word) > 2:\n            new_word = word.capitalize()\n        else:\n            new_word = word.lower()\n        \n        new_words.append(new_word)\n    \n    return ' '.join(new_words)\n\ns = input().strip()\nprint(drop_cap(s))\n\n\n"], "responses": ["```python\ndef drop_cap(s):\n    words = s.split()\n    new_words = []\n    \n    for word in words:\n        if len(word) > 2:\n            new_word = word.capitalize()\n        else:\n            new_word = word.lower()\n        \n        new_words.append(new_word)\n    \n    return ' '.join(new_words)\n\ns = input().strip()\nprint(drop_cap(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4724}
{"name": "4561", "description": "Consider the string `\"adfa\"` and the following rules: \n```Pearl\na) each character MUST be changed either to the one before or the one after in alphabet. \nb) \"a\" can only be changed to \"b\" and \"z\" to \"y\". \n```\nFrom our string, we get:\n```Pearl\n\"adfa\" -> [\"begb\",\"beeb\",\"bcgb\",\"bceb\"]\nAnother example: \"bd\" -> [\"ae\",\"ac\",\"ce\",\"cc\"]\n--We see that in each example, one of the possibilities is a palindrome.\n```\nI was working on the code for this but I couldn't quite figure it out. So far I have:\n\n```python\ndef solve(st):\n    return [all(ord(x) - ord(y) in [\"FIX\"] for x, y in zip(st, st[::-1]))][0]\n```\nI'm not sure what three numbers go into the array labelled `[\"FIX\"]`. This is the only thing missing. \n\nYou will be given a lowercase string and your task is to return `True` if at least one of the possiblities is a palindrome or `False` otherwise. You can use your own code or fix mine. \n\nMore examples in test cases. Good luck!", "difficulty": "introductory", "id": 4561, "sample_io": [{"input": "adfa", "output": [true]}, {"input": "bd", "output": [true]}], "test_list": [{"input": "abba", "output": [true]}, {"input": "abaazaba", "output": [false]}, {"input": "abccba", "output": [true]}, {"input": "adfa", "output": [true]}, {"input": "ae", "output": [false]}, {"input": "abzy", "output": [false]}, {"input": "ababbaba", "output": [true]}, {"input": "sq", "output": [true]}, {"input": "kxbkwgyydkcbtjcosgikfdyhuuprubpwthgflucpyylbofvqxkkvqthmdnywpaunfihvupbwpruwfybdmgeuocltdaidyyewmbzm", "output": [true]}], "starter_code": "\ndef solve(st):\n\t", "source_codes": ["\ndef is_palindrome(s):\n    # Define valid character transformations\n    transformations = {97: [98], 122: [121]}  # 'a' to 'b', 'z' to 'y'\n\n    def can_be_transformed(i, j):\n        if i == 0 and s[i] == ord('a'):\n            return True\n        if j == len(s) - 1 and s[j] == ord('z'):\n            return True\n        return abs(ord(s[i]) - ord(s[j])) <= 1 or (ord(s[i]) in transformations.get(ord(s[j]), []) and abs(i - j)) % 2 == 0\n\n    # Check if any transformation can result in a palindrome\n    for i, c in enumerate(s):\n        for j, d in enumerate(s[::-1]):\n            if i < j:\n                continue\n            if s[i] != s[j]:\n                if can_be_transformed(i, j):\n                    return True\n\n    return False\n\n\ndef solve(st):\n    return is_palindrome(st)\n\n\nst = input()\nprint(bool(solve(st)))\n\n\n"], "responses": ["```python\ndef is_palindrome(s):\n    # Define valid character transformations\n    transformations = {97: [98], 122: [121]}  # 'a' to 'b', 'z' to 'y'\n\n    def can_be_transformed(i, j):\n        if i == 0 and s[i] == ord('a'):\n            return True\n        if j == len(s) - 1 and s[j] == ord('z'):\n            return True\n        return abs(ord(s[i]) - ord(s[j])) <= 1 or (ord(s[i]) in transformations.get(ord(s[j]), []) and abs(i - j)) % 2 == 0\n\n    # Check if any transformation can result in a palindrome\n    for i, c in enumerate(s):\n        for j, d in enumerate(s[::-1]):\n            if i < j:\n                continue\n            if s[i] != s[j]:\n                if can_be_transformed(i, j):\n                    return True\n\n    return False\n\n\ndef solve(st):\n    return is_palindrome(st)\n\n\nst = input()\nprint(bool(solve(st)))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4561}
{"name": "4468", "description": "## Task\n\nGiven a positive integer as input, return the output as a string in the following format: \n\nEach element, corresponding to a digit of the number, multiplied by a power of 10 in such a way that with the sum of these elements you can obtain the original number.\n\n## Examples\n\nInput | Output\n---   | ---\n0     | \"\"\n56    | \"5\\*10+6\"\n60    | \"6\\*10\"\n999   | \"9\\*100+9\\*10+9\"\n10004 | \"1\\*10000+4\"\n\nNote: `input >= 0`", "difficulty": "introductory", "id": 4468, "sample_io": [{"input": "0", "output": [""]}, {"input": "56", "output": ["5*10+6"]}, {"input": "60", "output": ["6*10"]}, {"input": "999", "output": ["9*100+9*10+9"]}, {"input": "10004", "output": ["1*10000+4"]}], "test_list": [{"input": "8964631", "output": ["8*1000000+9*100000+6*10000+4*1000+6*100+3*10+1"]}, {"input": "56", "output": ["5*10+6"]}, {"input": "999", "output": ["9*100+9*10+9"]}, {"input": "11", "output": ["1*10+1"]}, {"input": "991", "output": ["9*100+9*10+1"]}, {"input": "47", "output": ["4*10+7"]}, {"input": "234", "output": ["2*100+3*10+4"]}, {"input": "196587", "output": ["1*100000+9*10000+6*1000+5*100+8*10+7"]}, {"input": "660", "output": ["6*100+6*10"]}, {"input": "600", "output": ["6*100"]}, {"input": "9090", "output": ["9*1000+9*10"]}, {"input": "10104", "output": ["1*10000+1*100+4"]}, {"input": "80008", "output": ["8*10000+8"]}, {"input": "90000", "output": ["9*10000"]}, {"input": "0", "output": [""]}], "starter_code": "\ndef simplify(n):\n\t", "source_codes": ["\ndef main():\n    # Take user input as a string representing the given positive integer\n    s = input()\n\n    # Convert the input string to an integer for further calculations\n    num = int(s)\n\n    # If the number is 0, return an empty string\n    if num == 0:\n        print(\"\")\n        return\n\n    # Step 1: Iterate over each digit of the number from right to left\n    ans = \"\"\n    t = num % 10\n    while num != 0:\n        # Extract the last digit and multiply it by a power of 10\n        ans += str(t) + \"*10^\" + str(len(ans)) if ans else str(t)\n        \n        # Update 'num' by dividing it by 10 (remove the last digit) and update 't'\n        num //= 10\n        t = num % 10\n\n    # Print the calculated output as a string\n    print(ans)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the given positive integer\n    s = input()\n\n    # Convert the input string to an integer for further calculations\n    num = int(s)\n\n    # If the number is 0, return an empty string\n    if num == 0:\n        print(\"\")\n        return\n\n    # Step 1: Iterate over each digit of the number from right to left\n    ans = \"\"\n    t = num % 10\n    while num != 0:\n        # Extract the last digit and multiply it by a power of 10\n        ans += str(t) + \"*10^\" + str(len(ans)) if ans else str(t)\n        \n        # Update 'num' by dividing it by 10 (remove the last digit) and update 't'\n        num //= 10\n        t = num % 10\n\n    # Print the calculated output as a string\n    print(ans)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4468}
{"name": "3613", "description": "# Task\n A ciphertext alphabet is obtained from the plaintext alphabet by means of rearranging some characters. For example \"bacdef...xyz\" will be a simple ciphertext alphabet where a and b are rearranged.\n\n A substitution cipher is a method of encoding where each letter of the plaintext alphabet is replaced with the corresponding (i.e. having the same index) letter of some ciphertext alphabet.\n\n Given two strings, check whether it is possible to obtain them from each other using some (possibly, different) substitution ciphers.\n\n# Example\n\n For `string1 = \"aacb\" and string2 = \"aabc\"`, the output should be `true`\n\n Any ciphertext alphabet that starts with acb... would make this transformation possible.\n\n For `string1 = \"aa\" and string2 = \"bc\"`, the output should be `false`\n\n# Input/Output\n\n\n - `[input]` string `string1`\n\n    A string consisting of lowercase characters.\n\n    Constraints: `1 \u2264 string1.length \u2264 10`.\n\n\n - `[input]` string `string2`\n\n    A string consisting of lowercase characters of the same length as string1.\n\n    Constraints: `string2.length = string1.length`.\n\n\n - `[output]` a boolean value", "difficulty": "introductory", "id": 3613, "sample_io": [{"input": "aacb\naabc", "output": [true]}, {"input": "aa\nbc", "output": [false]}], "test_list": [{"input": "aacb\naabc", "output": [true]}, {"input": "aa\nbc", "output": [false]}, {"input": "aaxxaaz\naazzaay", "output": [true]}, {"input": "aaxyaa\naazzaa", "output": [false]}, {"input": "aazzaa\naaxyaa", "output": [false]}, {"input": "jpeuizmi\nmxxcwriq", "output": [false]}], "starter_code": "\ndef is_substitution_cipher(s1, s2):\n\t", "source_codes": ["\ndef main():\n    # Take user input as strings representing the two given strings in Berland\n    string1 = input()\n    string2 = input()\n\n    # Check whether it is possible to obtain one string from another using some substitution cipher\n    for i in range(len(string1)):\n        flag = True\n        for j in range(i, len(string1)):\n            c = string1[j]\n            if c not in string2:\n                flag = False\n                break\n            string2 = string2.replace(c, '', 1)\n        if flag and not string2:\n            print(True)\n            return\n\n    # If no matching substitution cipher is found, print False\n    print(False)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as strings representing the two given strings in Berland\n    string1 = input()\n    string2 = input()\n\n    # Check whether it is possible to obtain one string from another using some substitution cipher\n    for i in range(len(string1)):\n        flag = True\n        for j in range(i, len(string1)):\n            c = string1[j]\n            if c not in string2:\n                flag = False\n                break\n            string2 = string2.replace(c, '', 1)\n        if flag and not string2:\n            print(True)\n            return\n\n    # If no matching substitution cipher is found, print False\n    print(False)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3613}
{"name": "4465", "description": "Write a function that rearranges an integer into its largest possible value. \n\n```python\nsuper_size(123456) # 654321\nsuper_size(105)    # 510\nsuper_size(12)     # 21\n```\n``` haskell\nsuperSize 123456 `shouldBe` 654321\nsuperSize    105 `shouldBe`    510\nsuperSize     12 `shouldBe`     21\n```\n\nIf the argument passed through is single digit or is already the maximum possible integer, your function should simply return it.", "difficulty": "introductory", "id": 4465, "sample_io": [{"input": "123456", "output": [654321]}, {"input": "105", "output": [510]}, {"input": "12", "output": [21]}], "test_list": [{"input": "69", "output": [96]}, {"input": "513", "output": [531]}, {"input": "2017", "output": [7210]}, {"input": "414", "output": [441]}, {"input": "608719", "output": [987610]}, {"input": "123456789", "output": [987654321]}, {"input": "700000000001", "output": [710000000000]}, {"input": "666666", "output": [666666]}, {"input": "2", "output": [2]}, {"input": "0", "output": [0]}], "starter_code": "\ndef super_size(n):\n\t", "source_codes": ["\ndef super_size(n):\n    n = str(n)\n    s = sorted([int(i) for i in n], reverse=True)\n    return ''.join(map(str, s))\n\n\n"], "responses": ["```python\ndef super_size(n):\n    n = str(n)\n    s = sorted([int(i) for i in n], reverse=True)\n    return ''.join(map(str, s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4465}
{"name": "3045", "description": "Given 2 elevators (named \"left\" and \"right\") in a building with 3 floors (numbered `0` to `2`), write a function `elevator` accepting 3 arguments (in order):\n\n- `left` - The current floor of the left elevator\n- `right` - The current floor of the right elevator\n- `call` -  The floor that called an elevator\n\nIt should return the name of the elevator closest to the called floor (`\"left\"`/`\"right\"`).\n\nIn the case where both elevators are equally distant from the called floor, choose the elevator to the right.\n\nYou can assume that the inputs will always be valid integers between 0-2.\n\nExamples:\n\n```python\nelevator(0, 1, 0) # => \"left\"\nelevator(0, 1, 1) # => \"right\"\nelevator(0, 1, 2) # => \"right\"\nelevator(0, 0, 0) # => \"right\"\nelevator(0, 2, 1) # => \"right\"\n```", "difficulty": "introductory", "id": 3045, "sample_io": [{"input": "0\n1\n0", "output": ["left"]}, {"input": "0\n1\n1", "output": ["right"]}, {"input": "0\n1\n2", "output": ["right"]}, {"input": "0\n0\n0", "output": ["right"]}, {"input": "0\n2\n1", "output": ["right"]}], "test_list": [{"input": "0\n1\n0", "output": ["left"]}, {"input": "0\n1\n1", "output": ["right"]}, {"input": "0\n1\n2", "output": ["right"]}, {"input": "0\n0\n0", "output": ["right"]}, {"input": "0\n2\n1", "output": ["right"]}, {"input": "0\n0\n1", "output": ["right"]}, {"input": "0\n0\n2", "output": ["right"]}, {"input": "0\n2\n0", "output": ["left"]}, {"input": "0\n2\n2", "output": ["right"]}, {"input": "1\n0\n0", "output": ["right"]}, {"input": "1\n0\n1", "output": ["left"]}, {"input": "1\n0\n2", "output": ["left"]}, {"input": "1\n1\n0", "output": ["right"]}, {"input": "1\n1\n1", "output": ["right"]}, {"input": "1\n1\n2", "output": ["right"]}, {"input": "1\n2\n0", "output": ["left"]}, {"input": "1\n2\n1", "output": ["left"]}, {"input": "1\n2\n2", "output": ["right"]}, {"input": "2\n0\n0", "output": ["right"]}, {"input": "2\n0\n1", "output": ["right"]}, {"input": "2\n0\n2", "output": ["left"]}, {"input": "2\n1\n0", "output": ["right"]}, {"input": "2\n1\n1", "output": ["right"]}, {"input": "2\n1\n2", "output": ["left"]}, {"input": "2\n2\n0", "output": ["right"]}, {"input": "2\n2\n1", "output": ["right"]}, {"input": "2\n2\n2", "output": ["right"]}], "starter_code": "\ndef elevator(left, right, call):\n\t", "source_codes": ["\ndef elevator(left, right, call):\n    return \"left\" if abs(left - call) <= abs(right - call) else \"right\"\n\n# Call the function with input values (0, 1, 0)\nprint(elevator(0, 1, 0)) # Output: left\n\n\n"], "responses": ["```python\ndef elevator(left, right, call):\n    return \"left\" if abs(left - call) <= abs(right - call) else \"right\"\n\n# Call the function with input values (0, 1, 0)\nprint(elevator(0, 1, 0)) # Output: left\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3045}
{"name": "4276", "description": "Round any given number to the closest 0.5 step\n\nI.E.\n```\nsolution(4.2) = 4\nsolution(4.3) = 4.5\nsolution(4.6) = 4.5\nsolution(4.8) = 5\n```\n\nRound **up** if number is as close to previous and next 0.5 steps.\n\n```\nsolution(4.75) == 5\n```", "difficulty": "introductory", "id": 4276, "sample_io": [{"input": "4.2", "output": [4]}, {"input": "4.3", "output": [4.5]}, {"input": "4.6", "output": [4.5]}, {"input": "4.8", "output": [5]}, {"input": "4.75", "output": [5]}], "test_list": [{"input": "4.2", "output": [4]}, {"input": "4.25", "output": [4.5]}, {"input": "4.4", "output": [4.5]}, {"input": "4.6", "output": [4.5]}, {"input": "4.75", "output": [5]}, {"input": "4.8", "output": [5]}, {"input": "4.5", "output": [4.5]}, {"input": "4.55", "output": [4.5]}, {"input": "4.74", "output": [4.5]}, {"input": "4.74999999999", "output": [4.5]}, {"input": "4.74999999991", "output": [4.5]}], "starter_code": "\ndef solution(n):\n\t", "source_codes": ["\ndef solution(num):\n    num += 0.000001  # To avoid rounding of equal numbers to different values\n    return round(num * 2) / 2 if (num % 1 <= 0.5) else ((int(num * 2) + 1) / 2)\n\n# Take user input as a string representing the current year in Berland\nnum = float(input())\n\nprint(solution(num))\n\n\n"], "responses": ["```python\ndef solution(num):\n    num += 0.000001  # To avoid rounding of equal numbers to different values\n    return round(num * 2) / 2 if (num % 1 <= 0.5) else ((int(num * 2) + 1) / 2)\n\n# Take user input as a string representing the current year in Berland\nnum = float(input())\n\nprint(solution(num))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4276}
{"name": "2882", "description": "Imagine a triangle of numbers which follows this pattern:\n\n * Starting with the number \"1\", \"1\" is positioned at the top of the triangle. As this is the 1st row, it can only support a single number.\n * The 2nd row can support the next 2 numbers: \"2\" and \"3\"\n * Likewise, the 3rd row, can only support the next 3 numbers: \"4\", \"5\", \"6\"\n * And so on; this pattern continues.\n\n```\n    1\n   2 3\n  4 5 6\n 7 8 9 10\n...\n```\n\nGiven N, return the sum of all numbers on the Nth Row:\n\n1 <= N <= 10,000", "difficulty": "introductory", "id": 2882, "sample_io": [{"input": "4", "output": [34]}], "test_list": [{"input": "1", "output": [1]}, {"input": "2", "output": [5]}, {"input": "3", "output": [15]}, {"input": "4", "output": [34]}, {"input": "15", "output": [1695]}, {"input": "150", "output": [1687575]}, {"input": "100", "output": [500050]}, {"input": "500", "output": [62500250]}, {"input": "1000", "output": [500000500]}, {"input": "10000", "output": [500000005000]}], "starter_code": "\ndef cumulative_triangle(n):\n\t", "source_codes": ["\ndef main():\n    # Take user input as a string representing the number of rows 'n'\n    n = int(input())\n\n    # Initialize the first term and common difference for the formula to calculate the sum of each row's numbers\n    a, d = 1, 2\n\n    # Calculate the sum of numbers in the Nth row using the formula for an arithmetic series: S = (n * (a + l)) / 2\n    result = n * ((2 * n - 1) * a + ((n - 1) * n) // 2 * d)\n\n    # Print the calculated sum of numbers in the Nth row\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the number of rows 'n'\n    n = int(input())\n\n    # Initialize the first term and common difference for the formula to calculate the sum of each row's numbers\n    a, d = 1, 2\n\n    # Calculate the sum of numbers in the Nth row using the formula for an arithmetic series: S = (n * (a + l)) / 2\n    result = n * ((2 * n - 1) * a + ((n - 1) * n) // 2 * d)\n\n    # Print the calculated sum of numbers in the Nth row\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2882}
{"name": "4440", "description": "ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but **exactly** 4 digits or exactly 6 digits. \n\nIf the function is passed a valid PIN string, return `true`, else return `false`.\n\n## Examples \n```\n\"1234\"   -->  true\n\"12345\"  -->  false\n\"a234\"   -->  false\n```", "difficulty": "introductory", "id": 4440, "sample_io": [{"input": "1234", "output": [true]}, {"input": "12345", "output": [false]}, {"input": "a234", "output": [false]}], "test_list": [{"input": "1", "output": [false]}, {"input": "12", "output": [false]}, {"input": "123", "output": [false]}, {"input": "12345", "output": [false]}, {"input": "1234567", "output": [false]}, {"input": "-1234", "output": [false]}, {"input": "-12345", "output": [false]}, {"input": "1.234", "output": [false]}, {"input": "00000000", "output": [false]}, {"input": "a234", "output": [false]}, {"input": ".234", "output": [false]}, {"input": "1234", "output": [true]}, {"input": "0000", "output": [true]}, {"input": "1111", "output": [true]}, {"input": "123456", "output": [true]}, {"input": "098765", "output": [true]}, {"input": "000000", "output": [true]}, {"input": "090909", "output": [true]}], "starter_code": "\ndef validate_pin(pin):\n\t", "source_codes": ["\ndef is_valid_PIN(s):\n    # Check if length of string is 4 or 6\n    if len(s) != 4 and len(s) != 6:\n        return False\n    \n    # Check each character in the string is a digit\n    for c in s:\n        if not c.isdigit():\n            return False\n            \n    return True\n\ns = input()\nprint(is_valid_PIN(s))\n\n\n"], "responses": ["```python\ndef is_valid_PIN(s):\n    # Check if length of string is 4 or 6\n    if len(s) != 4 and len(s) != 6:\n        return False\n    \n    # Check each character in the string is a digit\n    for c in s:\n        if not c.isdigit():\n            return False\n            \n    return True\n\ns = input()\nprint(is_valid_PIN(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4440}
{"name": "2771", "description": "Hofstadter sequences are a family of related integer sequences, among which the first ones were described by an American professor Douglas Hofstadter in his book G\u00f6del, Escher, Bach. \n\n### Task\nToday we will be implementing the rather chaotic recursive sequence of integers called Hofstadter Q.\nThe Hofstadter Q is defined as:\n\nAs the author states in the aforementioned book:It is reminiscent of the Fibonacci definition in that each new value is a sum of two\nprevious values-but not of the immediately previous two values. Instead, the two\nimmediately previous values tell how far to count back to obtain the numbers to be added\nto make the new value.\nThe function produces the starting sequence:  \n`1, 1, 2, 3, 3, 4, 5, 5, 6 . . .`  \nTest info: 100 random tests, n is always positive\nGood luck!", "difficulty": "introductory", "id": 2771, "sample_io": [{"input": "1", "output": [1]}, {"input": "3", "output": [2]}, {"input": "7", "output": [5]}, {"input": "10", "output": [6]}], "test_list": [{"input": "1", "output": [1]}, {"input": "3", "output": [2]}, {"input": "7", "output": [5]}, {"input": "10", "output": [6]}, {"input": "100", "output": [56]}, {"input": "1000", "output": [502]}], "starter_code": "\ndef hofstadter_Q(n):\n\t", "source_codes": ["\ndef hofstadter_Q(n, i=1):\n    if n == 0:\n        return 1\n    elif i < n:\n        return hofstadter_Q(n - 1, i + 1) + (i > 1 and hofstadter_Q(i - 2, 1) or 1)\n\n# Take user input as an integer representing the term number in the Hofstadter Q sequence\nn = int(input())\n\n# Calculate and print the nth term of the Hofstadter Q sequence\nprint(hofstadter_Q(n))\n\n\n"], "responses": ["```python\ndef hofstadter_Q(n, i=1):\n    if n == 0:\n        return 1\n    elif i < n:\n        return hofstadter_Q(n - 1, i + 1) + (i > 1 and hofstadter_Q(i - 2, 1) or 1)\n\n# Take user input as an integer representing the term number in the Hofstadter Q sequence\nn = int(input())\n\n# Calculate and print the nth term of the Hofstadter Q sequence\nprint(hofstadter_Q(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2771}
{"name": "4335", "description": "What is an anagram? Well, two words are anagrams of each other if they both contain the same letters. For example:\n\n```\n'abba' & 'baab' == true\n\n'abba' & 'bbaa' == true\n\n'abba' & 'abbba' == false\n\n'abba' & 'abca' == false\n```\n\nWrite a function that will find all the anagrams of a word from a list. You will be given two inputs a word and an array with words. You should return an array of all the anagrams or an empty array if there are none. For example:\n\nanagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']) => ['aabb', 'bbaa']\n\nanagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']) => ['carer', 'racer']\n\nanagrams('laser', ['lazing', 'lazy',  'lacer']) => []", "difficulty": "introductory", "id": 4335, "sample_io": [{"input": "abba\n['aabb', 'abcd', 'bbaa', 'dada']", "output": [["aabb", "bbaa"]]}, {"input": "racer\n['crazer', 'carer', 'racar', 'caers', 'racer']", "output": [["carer", "racer"]]}, {"input": "laser\n['lazing', 'lazy', 'lacer']", "output": [[]]}], "test_list": [{"input": "abba\n['aabb', 'abcd', 'bbaa', 'dada']", "output": [["aabb", "bbaa"]]}, {"input": "racer\n['crazer', 'carer', 'racar', 'caers', 'racer']", "output": [["carer", "racer"]]}, {"input": "a\n['a', 'b', 'c', 'd']", "output": [["a"]]}, {"input": "ab\n['cc', 'ac', 'bc', 'cd', 'ab', 'ba', 'racar', 'caers', 'racer']", "output": [["ab", "ba"]]}, {"input": "abba\n['a', 'b', 'c', 'd', 'aabb', 'bbaa', 'abab', 'baba', 'baab', 'abcd', 'abbba', 'baaab', 'abbab', 'abbaa', 'babaa']", "output": [["aabb", "bbaa", "abab", "baba", "baab"]]}, {"input": "big\n['gig', 'dib', 'bid', 'biig']", "output": [[]]}], "starter_code": "\ndef anagrams(word, words):\n\t", "source_codes": ["\ndef anagrams(s, words):\n    # Step 1: Sort the letters of word 's' and convert it into a string for comparison with other strings\n    ss = ''.join(sorted(s))\n\n    # Initialize a list to store all the anagrams found in 'words'\n    ans = []\n\n    # Step 2: Iterate over each word 'w' in the input list 'words'\n    for w in words:\n        # Sort the letters of 'w', convert it into a string, and compare with 'ss'\n        if ''.join(sorted(w)) == ss:\n            # If they match, add 'w' to the 'ans' list\n            ans.append(w)\n\n    # Return the list of anagrams found in 'words'\n    return ans\n\n# Test the function with example inputs\ns = input()\nwords = input().split(' ')\nprint(anagrams(s, words))\n\n\n"], "responses": ["```python\ndef anagrams(s, words):\n    # Step 1: Sort the letters of word 's' and convert it into a string for comparison with other strings\n    ss = ''.join(sorted(s))\n\n    # Initialize a list to store all the anagrams found in 'words'\n    ans = []\n\n    # Step 2: Iterate over each word 'w' in the input list 'words'\n    for w in words:\n        # Sort the letters of 'w', convert it into a string, and compare with 'ss'\n        if ''.join(sorted(w)) == ss:\n            # If they match, add 'w' to the 'ans' list\n            ans.append(w)\n\n    # Return the list of anagrams found in 'words'\n    return ans\n\n# Test the function with example inputs\ns = input()\nwords = input().split(' ')\nprint(anagrams(s, words))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4335}
{"name": "3512", "description": "Just like in the [\"father\" kata](http://www.codewars.com/kata/find-fibonacci-last-digit/), you will have to return the last digit of the nth element in the Fibonacci sequence (starting with 1,1, to be extra clear, not with 0,1 or other numbers).\n\nYou will just get much bigger numbers, so good luck bruteforcing your way through it ;)\n```python\nlast_fib_digit(1) == 1\nlast_fib_digit(2) == 1\nlast_fib_digit(3) == 2\nlast_fib_digit(1000) == 5\nlast_fib_digit(1000000) == 5\n```\n``` haskell\nlastFibDigit       1 == 1\nlastFibDigit       2 == 1\nlastFibDigit       3 == 2\nlastFibDigit    1000 == 5\nlastFibDigit 1000000 == 5\n```", "difficulty": "introductory", "id": 3512, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [1]}, {"input": "3", "output": [2]}, {"input": "1000", "output": [5]}, {"input": "1000000", "output": [5]}], "test_list": [{"input": "1", "output": [1]}, {"input": "21", "output": [6]}, {"input": "302", "output": [1]}, {"input": "4003", "output": [7]}, {"input": "50004", "output": [8]}, {"input": "600005", "output": [5]}, {"input": "7000006", "output": [3]}, {"input": "80000007", "output": [8]}, {"input": "900000008", "output": [1]}, {"input": "1000000009", "output": [9]}], "starter_code": "\ndef last_fib_digit(n):\n\t", "source_codes": ["\ndef last_fib_digit(n):\n    if n <= 1:\n        return n\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[-1] % 10\n\nn = int(input())\nprint(last_fib_digit(n))\n\n\n"], "responses": ["```python\ndef last_fib_digit(n):\n    if n <= 1:\n        return n\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[-1] % 10\n\nn = int(input())\nprint(last_fib_digit(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3512}
{"name": "3435", "description": "# Introduction\n\nThere is a war and nobody knows - the alphabet war!  \nThere are two groups of hostile letters. The tension between left side letters and right side letters was too high and the war began. The letters called airstrike to help them in war - dashes and dots are spreaded everywhere on the battlefield.\n\n# Task\n\nWrite a function that accepts `fight` string consists of only small letters and `*` which means a bomb drop place. Return who wins the fight after bombs are exploded. When the left side wins return `Left side wins!`, when the right side wins return `Right side wins!`, in other case return `Let's fight again!`.\n\nThe left side letters and their power:\n```\n w - 4\n p - 3 \n b - 2\n s - 1\n```\nThe right side letters and their power:\n```\n m - 4\n q - 3 \n d - 2\n z - 1\n```\nThe other letters don't have power and are only victims.  \nThe `*` bombs kills the adjacent letters ( i.e. `aa*aa` => `a___a`, `**aa**` => `______` );\n\n# Example\n\n# Alphabet war Collection\n\n\n\nAlphavet war \n\n\nAlphabet war - airstrike - letters massacre\n\n\nAlphabet wars - reinforces massacre\n\n\nAlphabet wars - nuclear strike\n\n\nAlphabet war - Wo lo loooooo priests join the war", "difficulty": "introductory", "id": 3435, "sample_io": [], "test_list": [{"input": "z", "output": ["Right side wins!"]}, {"input": "z*dq*mw*pb*s", "output": ["Let's fight again!"]}, {"input": "zdqmwpbs", "output": ["Let's fight again!"]}, {"input": "zz*zzs", "output": ["Right side wins!"]}, {"input": "sz**z**zs", "output": ["Left side wins!"]}, {"input": "z*z*z*zs", "output": ["Left side wins!"]}, {"input": "*wwwwww*z*", "output": ["Left side wins!"]}], "starter_code": "\ndef alphabet_war(fight):\n\t", "source_codes": ["\ndef alphabet_war(s):\n    left_side = 0\n    right_side = 0\n    \n    for i in range(len(s)):\n        if s[i] == 'w':\n            left_side += 4\n        elif s[i] == 'p':\n            left_side += 3\n        elif s[i] == 'b':\n            left_side += 2\n        elif s[i] == 's':\n            left_side += 1\n        elif s[i] == 'm':\n            right_side += 4\n        elif s[i] == 'q':\n            right_side += 3\n        elif s[i] == 'd':\n            right_side += 2\n        elif s[i] == 'z':\n            right_side += 1\n\n    for i in range(len(s)):\n        if s[i] == '*':\n            try:\n                left_side -= int(s[i-1])\n                left_side -= int(s[i+1])\n            except ValueError:\n                pass\n            try:\n                right_side -= int(s[i-1])\n                right_side -= int(s[i+1])\n            except ValueError:\n                pass\n\n    if left_side > right_side:\n        return 'Left side wins!'\n    elif right_side > left_side:\n        return 'Right side wins!'\n    else:\n        return 'Let\\'s fight again!'\n\n# Input should be taken from standard input\ns = input()\n\n# Call the function with specified parameters and print the output of the function\nprint(alphabet_war(s))\n\n\n"], "responses": ["```python\ndef alphabet_war(s):\n    left_side = 0\n    right_side = 0\n    \n    for i in range(len(s)):\n        if s[i] == 'w':\n            left_side += 4\n        elif s[i] == 'p':\n            left_side += 3\n        elif s[i] == 'b':\n            left_side += 2\n        elif s[i] == 's':\n            left_side += 1\n        elif s[i] == 'm':\n            right_side += 4\n        elif s[i] == 'q':\n            right_side += 3\n        elif s[i] == 'd':\n            right_side += 2\n        elif s[i] == 'z':\n            right_side += 1\n\n    for i in range(len(s)):\n        if s[i] == '*':\n            try:\n                left_side -= int(s[i-1])\n                left_side -= int(s[i+1])\n            except ValueError:\n                pass\n            try:\n                right_side -= int(s[i-1])\n                right_side -= int(s[i+1])\n            except ValueError:\n                pass\n\n    if left_side > right_side:\n        return 'Left side wins!'\n    elif right_side > left_side:\n        return 'Right side wins!'\n    else:\n        return 'Let\\'s fight again!'\n\n# Input should be taken from standard input\ns = input()\n\n# Call the function with specified parameters and print the output of the function\nprint(alphabet_war(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3435}
{"name": "3387", "description": "What's in a name?\n..Or rather, what's a name in? For us, a particular string is where we are looking for a name.\n\nTask\n\nTest whether or not the string contains all of the letters which spell a given name, in order.\n\nThe format\nA function passing two strings, searching for one (the name) within the other.\n``function nameInStr(str, name){ return true || false }``\n\nExamples\n\n    nameInStr(\"Across the rivers\", \"chris\") --> true\n                ^      ^  ^^   ^\n                c      h  ri   s\n                \n    Contains all of the letters in \"chris\", in order.\n----------------------------------------------------------\n    nameInStr(\"Next to a lake\", \"chris\") --> false\n    \n    Contains none of the letters in \"chris\".\n--------------------------------------------------------------------\n    nameInStr(\"Under a sea\", \"chris\") --> false\n                   ^   ^\n                   r   s\n                   \n    Contains only some of the letters in \"chris\".\n--------------------------------------------------------------------\n    nameInStr(\"A crew that boards the ship\", \"chris\") --> false\n                 cr    h              s i\n                 cr                h  s i  \n                 c     h      r       s i\n                 ...\n                 \n    Contains all of the letters in \"chris\", but not in order.\n--------------------------------------------------------------------\n    nameInStr(\"A live son\", \"Allison\") --> false\n               ^ ^^   ^^^\n               A li   son\n                 \n    Contains all of the correct letters in \"Allison\", in order, \n    but not enough of all of them (missing an 'l').\n    \n\nNote: testing will _not_ be case-sensitive.", "difficulty": "introductory", "id": 3387, "sample_io": [{"input": "Across the rivers\nchris", "output": [true]}, {"input": "Next to a lake\nchris", "output": [false]}, {"input": "Under a sea\nchris", "output": [false]}, {"input": "A crew that boards the ship\nchris", "output": [false]}, {"input": "A live son\nAllison", "output": [false]}], "test_list": [{"input": "Across the rivers\nchris", "output": [true]}, {"input": "Next to a lake\nchris", "output": [false]}, {"input": "Under a sea\nchris", "output": [false]}, {"input": "A crew that boards the ship\nchris", "output": [false]}, {"input": "A live son\nAllison", "output": [false]}, {"input": "Just enough nice friends\nJennifer", "output": [false]}, {"input": "thomas\nThomas", "output": [true]}, {"input": "pippippi\nPippi", "output": [true]}, {"input": "pipipp\nPippi", "output": [false]}, {"input": "ppipip\nPippi", "output": [false]}], "starter_code": "\ndef name_in_str(str, name):\n\t", "source_codes": ["\ndef nameInStr(str, name):\n    s = ''.join(sorted(name))\n    for i in range(len(s)):\n        if str.count(s[i]) == 0:\n            return False\n    return True\n\nstr = input()\nname = input()\nprint(nameInStr(str.lower(), name.lower()))\n\n\n"], "responses": ["```python\ndef nameInStr(str, name):\n    s = ''.join(sorted(name))\n    for i in range(len(s)):\n        if str.count(s[i]) == 0:\n            return False\n    return True\n\nstr = input()\nname = input()\nprint(nameInStr(str.lower(), name.lower()))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3387}
{"name": "4024", "description": "# Definition \n\nA number is a **_Special Number_** *if it\u2019s digits only consist 0, 1, 2, 3, 4 or 5*\n\n**_Given_** a number *determine if it special number or not* .  \n\n\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_The number_** passed will be **_positive_** (N > 0) .\n\n* All **single-digit numbers** with in the interval **_[0:5]_** are considered as **_special number_**. \n___\n\n# Input >> Output Examples\n\n```\nspecialNumber(2) ==> return \"Special!!\"\n```\n## Explanation: \n\nIt's **_a single-digit number_** within the interval **_[0:5]_** . \n\n```\nspecialNumber(9) ==> return \"NOT!!\"\n```\n## Explanation:\n\nAlthough, it's a single-digit number but **_Outside the interval [0:5]_** .\n\n```\nspecialNumber(23) ==> return \"Special!!\"\n```\n## Explanation: \n\nAll **_the number's digits_** formed from the interval **_[0:5]_** digits .\n\n```\nspecialNumber(39) ==> return \"NOT!!\"\n```\n## Explanation: \n\nAlthough, *there is a digit (3) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(59) ==> return \"NOT!!\"\n```\n## Explanation:  \n\nAlthough, *there is a digit (5) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(513) ==> return \"Special!!\"\n```\n___\n```\nspecialNumber(709) ==> return \"NOT!!\"\n```\n___\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)          \n\n### ALL translation are welcomed\n\n## Enjoy Learning !!\n# Zizou", "difficulty": "introductory", "id": 4024, "sample_io": [{"input": "2", "output": ["Special!!"]}, {"input": "9", "output": ["NOT!!"]}, {"input": "23", "output": ["Special!!"]}, {"input": "39", "output": ["NOT!!"]}, {"input": "59", "output": ["NOT!!"]}, {"input": "513", "output": ["Special!!"]}, {"input": "709", "output": ["NOT!!"]}], "test_list": [{"input": "2", "output": ["Special!!"]}, {"input": "3", "output": ["Special!!"]}, {"input": "5", "output": ["Special!!"]}, {"input": "9", "output": ["NOT!!"]}, {"input": "7", "output": ["NOT!!"]}, {"input": "23", "output": ["Special!!"]}, {"input": "79", "output": ["NOT!!"]}, {"input": "32", "output": ["Special!!"]}, {"input": "39", "output": ["NOT!!"]}, {"input": "55", "output": ["Special!!"]}, {"input": "11350224", "output": ["Special!!"]}], "starter_code": "\ndef special_number(number):\n\t", "source_codes": ["\ndef specialNumber(num):\n    str_num = str(num)\n    for digit in str_num:\n        if int(digit) > 5:\n            return \"NOT!!\"\n    return \"Special!!\"\n\n# Take input from user and call the function with that number\nn = int(input())\nprint(specialNumber(n))\n\n\n"], "responses": ["```python\ndef specialNumber(num):\n    str_num = str(num)\n    for digit in str_num:\n        if int(digit) > 5:\n            return \"NOT!!\"\n    return \"Special!!\"\n\n# Take input from user and call the function with that number\nn = int(input())\nprint(specialNumber(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": true, "language": "Python3", "task_id": 4024}
{"name": "3478", "description": "Magic The Gathering is a collectible card game that features wizards battling against each other with spells and creature summons. The game itself can be quite complicated to learn. In this series of katas, we'll be solving some of the situations that arise during gameplay. You won't need any prior knowledge of the game to solve these contrived problems, as I will provide you with enough information.\n\n## Creatures\n\nEach creature has a power and toughness. We will represent this in an array. [2, 3] means this creature has a power of 2 and a toughness of 3.\n\nWhen two creatures square off, they each deal damage equal to their power to each other at the same time. If a creature takes on damage greater than or equal to their toughness, they die.\n\nExamples:\n\n- Creature 1 - [2, 3]\n- Creature 2 - [3, 3]\n- Creature 3 - [1, 4]\n- Creature 4 - [4, 1]\n\nIf creature 1 battles creature 2, creature 1 dies, while 2 survives. If creature 3 battles creature 4, they both die, as 3 deals 1 damage to 4, but creature 4 only has a toughness of 1.\n\nWrite a function `battle(player1, player2)` that takes in 2 arrays of creatures. Each players' creatures battle each other in order (player1[0] battles the creature in player2[0]) and so on. If one list of creatures is longer than the other, those creatures are considered unblocked, and do not battle.\n\nYour function should return an object (a hash in Ruby) with the keys player1 and player2 that contain the power and toughness of the surviving creatures.\n\nExample:\n```\nGood luck with your battles!\n\n\nCheck out my other Magic The Gathering katas:\n\n\nMagic The Gathering #1: Creatures\nMagic The Gathering #2: Mana", "difficulty": "introductory", "id": 3478, "sample_io": [], "test_list": [{"input": "[[2, 3], [1, 4]]\n[[3, 3], [4, 1]]", "output": [{"player1": [], "player2": [[3, 3]]}]}, {"input": "[]\n[]", "output": [{"player1": [], "player2": []}]}, {"input": "[[1, 1]]\n[[1, 1]]", "output": [{"player1": [], "player2": []}]}, {"input": "[[2, 1]]\n[[2, 1]]", "output": [{"player1": [], "player2": []}]}, {"input": "[[1, 2]]\n[[1, 2]]", "output": [{"player1": [[1, 2]], "player2": [[1, 2]]}]}, {"input": "[[2, 3]]\n[[3, 2]]", "output": [{"player1": [], "player2": []}]}, {"input": "[[2, 7]]\n[[3, 5]]", "output": [{"player1": [[2, 7]], "player2": [[3, 5]]}]}, {"input": "[[2, 5]]\n[[6, 6]]", "output": [{"player1": [], "player2": [[6, 6]]}]}, {"input": "[[6, 6]]\n[[2, 5]]", "output": [{"player1": [[6, 6]], "player2": []}]}, {"input": "[]\n[[1, 1], [2, 2]]", "output": [{"player1": [], "player2": [[1, 1], [2, 2]]}]}, {"input": "[[1, 1], [2, 2]]\n[]", "output": [{"player1": [[1, 1], [2, 2]], "player2": []}]}, {"input": "[[1, 3], [3, 5], [4, 6], [5, 2]]\n[[2, 4], [6, 1], [4, 4], [3, 7], [3, 1]]", "output": [{"player1": [[1, 3], [4, 6]], "player2": [[2, 4], [3, 7], [3, 1]]}]}], "starter_code": "\ndef battle(player1, player2):\n\t", "source_codes": ["\ndef battle(player1, player2):\n    # Initialize variables for surviving creatures in both lists\n    surviving_player1 = []\n    surviving_player2 = []\n\n    # Compare lengths of both lists and adjust indices accordingly\n    len_diff = abs(len(player1) - len(player2))\n    max_len = max(len(player1), len(player2))\n\n    # Iterate over each pair of creatures (or unblocked creature if one list is longer)\n    for i in range(max_len):\n        power1, toughness1 = player1[i]\n        try:\n            power2, toughness2 = player2[i]\n            # Calculate damage dealt to each creature\n            damage1 = max(power2 - toughness1, 0)\n            damage2 = max(power1 - toughness2, 0)\n\n            # Check if either creature survives the battle\n            if damage1 >= toughness1 or damage2 >= toughness2:\n                surviving_player1.append([max(toughness1 - damage1, 0), max(toughness1 - damage1, 0)])\n                surviving_player2.append([max(toughness2 - damage2, 0), max(toughness2 - damage2, 0)])\n            else:\n                # If both creatures survive, subtract their toughness\n                surviving_player1.append([power1 - damage2, toughness1])\n                surviving_player2.append([power2 - damage1, toughness2])\n\n        except IndexError:\n            # Handle the case when one list is longer and append unblocked creature\n            if len(player1) > len(player2):\n                power1, toughness1 = player1[i]\n                surviving_player1.append([max(power1, 0), max(toughness1 - (len_diff + i), 0)])\n                continue\n\n            else:\n                power2, toughness2 = player2[i]\n                surviving_player2.append([max(power2, 0), max(toughness2 - (len_diff + i), 0)])\n                continue\n\n    return {\n        'player1': surviving_player1,\n        'player2': surviving_player2\n    }\n\n# Test the function with example inputs\nplayer1 = [[2, 3], [5, 7]]\nplayer2 = [[3, 4], [6, 8]]\n\nresult = battle(player1, player2)\nprint(result)\n\n\n"], "responses": ["```python\ndef battle(player1, player2):\n    # Initialize variables for surviving creatures in both lists\n    surviving_player1 = []\n    surviving_player2 = []\n\n    # Compare lengths of both lists and adjust indices accordingly\n    len_diff = abs(len(player1) - len(player2))\n    max_len = max(len(player1), len(player2))\n\n    # Iterate over each pair of creatures (or unblocked creature if one list is longer)\n    for i in range(max_len):\n        power1, toughness1 = player1[i]\n        try:\n            power2, toughness2 = player2[i]\n            # Calculate damage dealt to each creature\n            damage1 = max(power2 - toughness1, 0)\n            damage2 = max(power1 - toughness2, 0)\n\n            # Check if either creature survives the battle\n            if damage1 >= toughness1 or damage2 >= toughness2:\n                surviving_player1.append([max(toughness1 - damage1, 0), max(toughness1 - damage1, 0)])\n                surviving_player2.append([max(toughness2 - damage2, 0), max(toughness2 - damage2, 0)])\n            else:\n                # If both creatures survive, subtract their toughness\n                surviving_player1.append([power1 - damage2, toughness1])\n                surviving_player2.append([power2 - damage1, toughness2])\n\n        except IndexError:\n            # Handle the case when one list is longer and append unblocked creature\n            if len(player1) > len(player2):\n                power1, toughness1 = player1[i]\n                surviving_player1.append([max(power1, 0), max(toughness1 - (len_diff + i), 0)])\n                continue\n\n            else:\n                power2, toughness2 = player2[i]\n                surviving_player2.append([max(power2, 0), max(toughness2 - (len_diff + i), 0)])\n                continue\n\n    return {\n        'player1': surviving_player1,\n        'player2': surviving_player2\n    }\n\n# Test the function with example inputs\nplayer1 = [[2, 3], [5, 7]]\nplayer2 = [[3, 4], [6, 8]]\n\nresult = battle(player1, player2)\nprint(result)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3478}
{"name": "3766", "description": "~~~if-not:java\nYou have to code a function **getAllPrimeFactors** wich take an integer as parameter and return an array containing its prime decomposition by ascending factors, if a factors appears multiple time in the decomposition it should appear as many time in the array. \n\nexemple: `getAllPrimeFactors(100)` returns `[2,2,5,5]` in this order. \n\nThis decomposition may not be the most practical. \n\nYou should also write **getUniquePrimeFactorsWithCount**, a function which will return an array containing two arrays: one with prime numbers appearing in the decomposition and the other containing their respective power. \n\nexemple: `getUniquePrimeFactorsWithCount(100)` returns `[[2,5],[2,2]]`\n\nYou should also write **getUniquePrimeFactorsWithProducts** an array containing the prime factors to their respective powers. \n\nexemple: `getUniquePrimeFactorsWithProducts(100)` returns `[4,25]`\n~~~\n~~~if:java\nYou have to code a function **getAllPrimeFactors** wich take an integer as parameter and return an array containing its prime decomposition by ascending factors, if a factors appears multiple time in the decomposition it should appear as many time in the array. \n\nexemple: `getAllPrimeFactors(100)` returns `[2,2,5,5]` in this order. \n\nThis decomposition may not be the most practical. \n\nYou should also write **getUniquePrimeFactorsWithCount**, a function which will return an array containing two arrays: one with prime numbers appearing in the decomposition and the other containing their respective power. \n\nexemple: `getUniquePrimeFactorsWithCount(100)` returns `[[2,5],[2,2]]`\n\nYou should also write **getPrimeFactorPotencies** an array containing the prime factors to their respective powers. \n\nexemple: `getPrimeFactorPotencies(100)` returns `[4,25]`\n~~~\n\nErrors, if:\n\n* `n` is not a number\n* `n` not an integer \n* `n` is negative or 0 \n\nThe three functions should respectively return `[]`,  `[[],[]]` and `[]`. \n\nEdge cases: \n\n* if `n=0`, the function should respectively return `[]`, `[[],[]]` and  `[]`.\n* if `n=1`, the function should respectively return `[1]`, `[[1],[1]]`, `[1]`.\n* if `n=2`, the function should respectively return `[2]`, `[[2],[1]]`, `[2]`.\n\nThe result for `n=2` is normal. The result for `n=1` is arbitrary and has been chosen to return a usefull result. The result for `n=0` is also arbitrary \nbut can not be chosen to be both usefull and intuitive. (`[[0],[0]]` would be meaningfull but wont work for general use of decomposition, `[[0],[1]]` would work but is not intuitive.)", "difficulty": "introductory", "id": 3766, "sample_io": [{"input": "100", "output": [[2, 2, 5, 5]]}], "test_list": [{"input": "10", "output": [[2, 5]]}, {"input": "100", "output": [[2, 2, 5, 5]]}, {"input": "1000", "output": [[2, 2, 2, 5, 5, 5]]}, {"input": "1000001", "output": [[101, 9901]]}, {"input": "0", "output": [[]]}, {"input": "1", "output": [[1]]}, {"input": "2", "output": [[2]]}, {"input": "a", "output": [[]]}, {"input": "1.1", "output": [[]]}, {"input": "-1", "output": [[]]}], "starter_code": "\ndef getAllPrimeFactors(n):\n\t", "source_codes": ["\ndef getAllPrimeFactors(n):\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n\ndef getUniquePrimeFactorsWithCount(n):\n    factors_with_count = [[], []]\n    for factor in getAllPrimeFactors(n):\n        if factor not in factors_with_count[0]:\n            factors_with_count[0].append(factor)\n            factors_with_count[1].append(1)\n        else:\n            index = factors_with_count[0].index(factor)\n            factors_with_count[1][index] += 1\n    return factors_with_count\n\ndef getUniquePrimeFactorsWithProducts(n):\n    products = []\n    for factor, count in zip(getUniquePrimeFactorsWithCount(n)[0], getUniquePrimeFactorsWithCount(n)[1]):\n        products.append(factor ** count)\n    return products\n\nn = int(input())\n\ntry:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError\nexcept ValueError:\n    print([])\nelse:\n    print(getAllPrimeFactors(n))\n    print(getUniquePrimeFactorsWithCount(n))\n    print(getUniquePrimeFactorsWithProducts(n))\n\n\n"], "responses": ["```python\ndef getAllPrimeFactors(n):\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n\ndef getUniquePrimeFactorsWithCount(n):\n    factors_with_count = [[], []]\n    for factor in getAllPrimeFactors(n):\n        if factor not in factors_with_count[0]:\n            factors_with_count[0].append(factor)\n            factors_with_count[1].append(1)\n        else:\n            index = factors_with_count[0].index(factor)\n            factors_with_count[1][index] += 1\n    return factors_with_count\n\ndef getUniquePrimeFactorsWithProducts(n):\n    products = []\n    for factor, count in zip(getUniquePrimeFactorsWithCount(n)[0], getUniquePrimeFactorsWithCount(n)[1]):\n        products.append(factor ** count)\n    return products\n\nn = int(input())\n\ntry:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError\nexcept ValueError:\n    print([])\nelse:\n    print(getAllPrimeFactors(n))\n    print(getUniquePrimeFactorsWithCount(n))\n    print(getUniquePrimeFactorsWithProducts(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3766}
{"name": "3292", "description": "Given a string, turn each letter into its ASCII character code and join them together to create a number - let's call this number `total1`:\n\n```\n'ABC' --> 'A' = 65, 'B' = 66, 'C' = 67 --> 656667\n```\n\nThen replace any incidence of the number `7` with the number `1`, and call this number 'total2':\n```\ntotal1 = 656667\n              ^\ntotal2 = 656661\n              ^\n```\n\nThen return the difference between the sum of the digits in `total1` and `total2`:\n\n```\n  (6 + 5 + 6 + 6 + 6 + 7)\n- (6 + 5 + 6 + 6 + 6 + 1)\n-------------------------\n                       6\n```", "difficulty": "introductory", "id": 3292, "sample_io": [{"input": "ABC", "output": [6]}], "test_list": [{"input": "abcdef", "output": [6]}, {"input": "ifkhchlhfd", "output": [6]}, {"input": "aaaaaddddr", "output": [30]}, {"input": "jfmgklf8hglbe", "output": [6]}, {"input": "jaam", "output": [12]}, {"input": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", "output": [96]}], "starter_code": "\ndef calc(x):\n\t", "source_codes": ["\ntotal1 = 0\nfor c in input():\n    total1 += ord(c)\n\ntotal2 = total1\nwhile total2 // 10 != 0:\n    total2 //= 10\nif total2 % 10 == 7:\n    total2 -= 6\n\nprint(abs(total1 - total2))\n\n\n"], "responses": ["```python\ntotal1 = 0\nfor c in input():\n    total1 += ord(c)\n\ntotal2 = total1\nwhile total2 // 10 != 0:\n    total2 //= 10\nif total2 % 10 == 7:\n    total2 -= 6\n\nprint(abs(total1 - total2))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3292}
{"name": "2886", "description": "# Description:\n\n Find the longest successive exclamation marks and question marks combination in the string. A successive exclamation marks and question marks combination must contains two part: a substring of \"!\" and a substring \"?\", they are adjacent. \n \n If more than one result are found, return the one which at left side; If no such a combination found, return `\"\"`.\n\n# Examples\n\n```\nfind(\"!!\") === \"\"\nfind(\"!??\") === \"!??\"\nfind(\"!?!!\") === \"?!!\"\nfind(\"!!???!????\") === \"!!???\"\nfind(\"!!???!?????\") === \"!?????\"\nfind(\"!????!!!?\") === \"????!!!\" \nfind(\"!?!!??!!!?\") === \"??!!!\"\n```\n\n# Note\nPlease don't post issue about difficulty or duplicate. Because:\n>[That's unfair on the kata creator. This is a valid kata and introduces new people to javascript some regex or loops, depending on how they tackle this problem.  --matt c](https://www.codewars.com/kata/remove-exclamation-marks/discuss#57fabb625c9910c73000024e)", "difficulty": "introductory", "id": 2886, "sample_io": [{"input": "!!", "output": [""]}, {"input": "!??", "output": ["!??"]}, {"input": "!?!!", "output": ["?!!"]}, {"input": "!!???!????", "output": ["!!???"]}, {"input": "!!???!?????", "output": ["!?????"]}, {"input": "!????!!!?", "output": ["????!!!"]}, {"input": "!?!!??!!!?", "output": ["??!!!"]}], "test_list": [{"input": "!!", "output": [""]}, {"input": "!??", "output": ["!??"]}, {"input": "!?!!", "output": ["?!!"]}, {"input": "!!???!????", "output": ["!!???"]}, {"input": "!!???!?????", "output": ["!?????"]}, {"input": "!????!!!?", "output": ["????!!!"]}, {"input": "!?!!??!!!?", "output": ["??!!!"]}], "starter_code": "\ndef find(s):\n\t", "source_codes": ["\ndef find(s):\n    max_len = 0\n    res = \"\"\n    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s) and (s[j] == '?' or s[j] == '!'):\n            if s[i] != '?' and s[j] != '?':\n                max_len = max(max_len, j - i)\n                res = s[i:j+1]\n            elif s[i] != '!' and s[j] != '!':\n                max_len = max(max_len, j - i)\n                res = s[i:j+1]\n            j += 1\n        i = j\n    return res if max_len > 0 else \"\"\n\n\n"], "responses": ["```python\ndef find(s):\n    max_len = 0\n    res = \"\"\n    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s) and (s[j] == '?' or s[j] == '!'):\n            if s[i] != '?' and s[j] != '?':\n                max_len = max(max_len, j - i)\n                res = s[i:j+1]\n            elif s[i] != '!' and s[j] != '!':\n                max_len = max(max_len, j - i)\n                res = s[i:j+1]\n            j += 1\n        i = j\n    return res if max_len > 0 else \"\"\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2886}
{"name": "4515", "description": "Your task is to find the number couple with the greatest difference from a given array of number-couples. \n\nAll number couples will be given as strings and all numbers in them will be positive integers.  \n\nFor instance: ['56-23','1-100']; in this case, you should identify '1-100' as the number couple with the greatest difference and return it.\n\nIn case there are more than one option, for instance ['1-3','5-7','2-3'], you should identify whichever is first, so in this case '1-3'. \n\nIf there is no difference, like so ['11-11', '344-344'], return false.", "difficulty": "introductory", "id": 4515, "sample_io": [{"input": "['56-23','1-100']", "output": ["1-100"]}, {"input": "['1-3', '5-7', '2-3']", "output": ["1-3"]}, {"input": "['11-11', '344-344']", "output": [false]}], "test_list": [{"input": "['43-45', '1021-55', '000-18888', '92-34', '76-32', '99-1', '1020-54']", "output": ["000-18888"]}, {"input": "['1-2', '2-4', '5-7', '8-9', '44-45']", "output": ["2-4"]}, {"input": "['1-1000', '2-1000', '100-67', '98-45', '8-9']", "output": ["1-1000"]}, {"input": "['33-33', '77-77']", "output": [false]}, {"input": "['23-67', '67-23', '88-88', '45-46']", "output": ["23-67"]}, {"input": "['45896-2354', '4654-556767', '2455-423522', '3455-355', '34-34', '2524522-0']", "output": ["2524522-0"]}, {"input": "['1-1', '2-2', '1-0', '77-77']", "output": ["1-0"]}, {"input": "['0-0']", "output": [false]}, {"input": "[]", "output": [false]}], "starter_code": "\ndef diff(arr):\n\t", "source_codes": ["\ndef find_couple(s):\n    couples = [i.split('-') for i in s]\n    \n    max_diff = 0\n    \n    for couple in couples:\n        a, b = int(couple[0]), int(couple[1])\n        \n        if (a - b) > max_diff or (b - a) > max_diff:\n            max_diff = abs(a - b)\n            \n    diff_couples = [i for i in couples if abs(int(i[0]) - int(i[1])) == max_diff]\n    \n    return sorted(diff_couples)[0]\n\ns = input()\nprint(find_couple(s))\n\n\n"], "responses": ["```python\ndef find_couple(s):\n    couples = [i.split('-') for i in s]\n    \n    max_diff = 0\n    \n    for couple in couples:\n        a, b = int(couple[0]), int(couple[1])\n        \n        if (a - b) > max_diff or (b - a) > max_diff:\n            max_diff = abs(a - b)\n            \n    diff_couples = [i for i in couples if abs(int(i[0]) - int(i[1])) == max_diff]\n    \n    return sorted(diff_couples)[0]\n\ns = input()\nprint(find_couple(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4515}
{"name": "3068", "description": "You need to play around with the provided string (s).\n\nMove consonants forward 9 places through the alphabet.\nIf they pass 'z', start again at 'a'.\n\nMove vowels back 5 places through the alphabet.\nIf they pass 'a', start again at 'z'.\nFor our Polish friends this kata does not count 'y' as a vowel.\n\nExceptions:\n\nIf the character is 'c' or 'o', move it back 1 place.\nFor 'd' move it back 3, and for 'e', move it back 4.\n\nIf a moved letter becomes 'c', 'o', 'd' or 'e', revert it back to it's original value.\n\nProvided string will always be lower case, won't be empty and will have no special characters.", "difficulty": "introductory", "id": 3068, "sample_io": [], "test_list": [{"input": "testcase", "output": ["tabtbvba"]}, {"input": "codewars", "output": ["bnaafvab"]}, {"input": "exampletesthere", "output": ["agvvyuatabtqaaa"]}, {"input": "returnofthespacecamel", "output": ["aatpawnftqabyvbabvvau"]}, {"input": "bringonthebootcamp", "output": ["kaiwpnwtqaknntbvvy"]}, {"input": "weneedanofficedog", "output": ["fawaaavwnffibaanp"]}], "starter_code": "\ndef vowel_back(st):\n\t", "source_codes": ["\ndef scramble(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\n    new_s = ''\n    for c in s:\n        if c in vowels:\n            if ord(c) - 97 >= 21: # check if it's more than 5 places back\n                new_s += chr((ord(c) - 97 - 5 + 26) % 26 + 97)\n            else:\n                new_s += 'zyxwvutsrqponmlkjihgfedcba'[21 - ord(c) + 97]\n        elif c == 'c':\n            if ord(c) - 99 >= 1: # check if it's more than 1 place back\n                new_s += chr((ord(c) - 99 + 26) % 26 + 99)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[1 - ord(c) + 99]\n        elif c == 'o':\n            if ord(c) - 101 >= 1: # check if it's more than 1 place back\n                new_s += chr((ord(c) - 101 + 26) % 26 + 101)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[1 - ord(c) + 101]\n        elif c == 'd':\n            if ord(c) - 103 >= 3: # check if it's more than 3 places back\n                new_s += chr((ord(c) - 103 + 26) % 26 + 103)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[3 - ord(c) + 103]\n        elif c == 'e':\n            if ord(c) - 105 >= 4: # check if it's more than 4 places back\n                new_s += chr((ord(c) - 105 + 26) % 26 + 105)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[4 - ord(c) + 105]\n        elif c in consonants:\n            if ord(c) - 99 >= 9: # check if it's more than 9 places back\n                new_s += chr((ord(c) - 99 + 26) % 26 + 99)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[9 - ord(c) + 99]\n        else:\n            new_s += c\n\n    return ''.join(new_s)\n\n# Test the function\nprint(scramble('rkqdlphsuo')) # should print 'okbdtlpcsu'\n\n\n"], "responses": ["```python\ndef scramble(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\n    new_s = ''\n    for c in s:\n        if c in vowels:\n            if ord(c) - 97 >= 21: # check if it's more than 5 places back\n                new_s += chr((ord(c) - 97 - 5 + 26) % 26 + 97)\n            else:\n                new_s += 'zyxwvutsrqponmlkjihgfedcba'[21 - ord(c) + 97]\n        elif c == 'c':\n            if ord(c) - 99 >= 1: # check if it's more than 1 place back\n                new_s += chr((ord(c) - 99 + 26) % 26 + 99)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[1 - ord(c) + 99]\n        elif c == 'o':\n            if ord(c) - 101 >= 1: # check if it's more than 1 place back\n                new_s += chr((ord(c) - 101 + 26) % 26 + 101)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[1 - ord(c) + 101]\n        elif c == 'd':\n            if ord(c) - 103 >= 3: # check if it's more than 3 places back\n                new_s += chr((ord(c) - 103 + 26) % 26 + 103)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[3 - ord(c) + 103]\n        elif c == 'e':\n            if ord(c) - 105 >= 4: # check if it's more than 4 places back\n                new_s += chr((ord(c) - 105 + 26) % 26 + 105)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[4 - ord(c) + 105]\n        elif c in consonants:\n            if ord(c) - 99 >= 9: # check if it's more than 9 places back\n                new_s += chr((ord(c) - 99 + 26) % 26 + 99)\n            else:\n                new_s += 'bcdfghjklmnpqrstvwxyz'[9 - ord(c) + 99]\n        else:\n            new_s += c\n\n    return ''.join(new_s)\n\n# Test the function\nprint(scramble('rkqdlphsuo')) # should print 'okbdtlpcsu'\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3068}
{"name": "4214", "description": "In this kata you will have to modify a sentence so it meets the following rules:\n\nconvert every word backwards that is:\n\n    longer than 6 characters\n\n  OR\n\n    has 2 or more 'T' or 't' in it\n\nconvert every word uppercase that is:\n\n    exactly 2 characters long\n\n  OR\n\n    before a comma\n\nconvert every word to a \"0\" that is:\n\n    exactly one character long\n \n\n NOTES: \n\n      Punctuation must not be touched. if a word is 6 characters long, and a \".\" is behind it,\n      it counts as 6 characters so it must not be flipped, but if a word is 7 characters long,\n      it must be flipped but the \".\" must stay at the end of the word.\n      -----------------------------------------------------------------------------------------\n      Only the first transformation applies to a given word, for example 'companions,'\n      will be 'snoinapmoc,' and not 'SNOINAPMOC,'.\n      -----------------------------------------------------------------------------------------\n      As for special characters like apostrophes or dashes, they count as normal characters, \n      so e.g 'sand-colored' must be transformed to 'deroloc-dnas'.", "difficulty": "introductory", "id": 4214, "sample_io": [{"input": "companions,", "output": ["snoinapmoc,"]}, {"input": "sand-colored", "output": ["deroloc-dnas"]}], "test_list": [{"input": "Welcome.", "output": ["emocleW."]}, {"input": "If a man does not keep pace with his companions, perhaps it is because he hears a different drummer.", "output": ["IF 0 man does not keep pace with his snoinapmoc, spahrep IT IS esuaceb HE hears 0 tnereffid remmurd."]}, {"input": "As Grainier drove along in the wagon behind a wide, slow, sand-colored mare, clusters of orange butterflies exploded off the purple blackish piles of bear sign and winked and winked and fluttered magically like leaves without trees.", "output": ["AS reiniarG drove along IN the wagon behind 0 WIDE, SLOW, deroloc-dnas MARE, sretsulc OF orange seilfrettub dedolpxe off the purple hsikcalb piles OF bear sign and winked and winked and derettulf yllacigam like leaves tuohtiw trees."]}, {"input": "You should check the mileage on your car since you've been driving it so much, and because it's starting to make weird noises.", "output": ["You should check the egaelim ON your car since you've been gnivird IT SO MUCH, and esuaceb it's gnitrats TO make weird noises."]}, {"input": "Wherever you go, you can always find beauty.", "output": ["reverehW you GO, you can always find beauty."]}, {"input": "Action is indeed, commmmmmmming.", "output": ["Action IS INDEED, gnimmmmmmmmoc."]}, {"input": "Mother, please, help, me.", "output": ["MOTHER, PLEASE, HELP, ME."]}, {"input": "Jojojo, jojo, tata man kata.", "output": ["JOJOJO, JOJO, atat man kata."]}], "starter_code": "\ndef spin_solve(sentence):\n\t", "source_codes": ["\nimport re\n\ndef transform(sentence):\n    words = sentence.split()\n    transformed_words = []\n\n    for word in words:\n        if len(word) > 6 and 'T' in word or 't' in word:\n            transformed_word = word[::-1]\n        elif len(word) == 2 or ',' in word:\n            transformed_word = word.upper()\n        else:\n            transformed_word = word\n\n        transformed_words.append(transformed_word)\n\n    return ' '.join(transformed_words)\n\nsentence = input()\n\n# Add punctuation back to the original position\nresult = re.sub(r' ([,;.!?])', r'\\1 ', transform(sentence))\nprint(result)\n\n\n"], "responses": ["```python\nimport re\n\ndef transform(sentence):\n    words = sentence.split()\n    transformed_words = []\n\n    for word in words:\n        if len(word) > 6 and 'T' in word or 't' in word:\n            transformed_word = word[::-1]\n        elif len(word) == 2 or ',' in word:\n            transformed_word = word.upper()\n        else:\n            transformed_word = word\n\n        transformed_words.append(transformed_word)\n\n    return ' '.join(transformed_words)\n\nsentence = input()\n\n# Add punctuation back to the original position\nresult = re.sub(r' ([,;.!?])', r'\\1 ', transform(sentence))\nprint(result)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4214}
{"name": "3884", "description": "# RegExp Fun #1 - When I miss few days of gym\n\n## Disclaimer\n\nThe background story of this Kata is 100% fiction.  Any resemblance to real people or real events is **nothing more than a coincidence** and should be regarded as such.\n\n## Background Story\n\nYou are a person who loves to go to the gym everyday with the squad of people that you've known since early childhood.  However, you recently contracted a sickness that forced you to stay at home for over a week.  As you see your body getting weaker and weaker every day and as you see your biceps and triceps disappearing, you can't help but lay in bed and cry.  You're usually an optimistic person but this time negative thoughts come to your head ... \n\n![When I miss few days of gym](https://pics.onsizzle.com/Instagram-faf8c9.png)\n\n\n## Task\n\nAs can be seen from the funny image above (or am I the only person to find the picture above hilarious?) there is lots of slang.  Your task is to define a function ```gymSlang``` which accepts a string argument and does the following:\n\n1. Replace *all* instances of ```\"probably\"``` to ```\"prolly\"```\n2. Replace *all* instances of ```\"i am\"``` to ```\"i'm\"```\n3. Replace *all* instances of ```\"instagram\"``` to ```\"insta\"```\n4. Replace *all* instances of ```\"do not\"``` to ```\"don't\"```\n5. Replace *all* instances of ```\"going to\"``` to ```\"gonna\"```\n6. Replace *all* instances of ```\"combination\"``` to ```\"combo\"```\n\nYour replacement regexes **should be case-sensitive**, only replacing the words above with slang if the detected pattern is in **lowercase**.  However, please note that apart from 100% lowercase matches, you will **also have to replace matches that are correctly capitalized** (e.g. ```\"Probably\" => \"Prolly\"``` or ```\"Instagram\" => \"Insta\"```).\n\nFinally, your code will be tested to make sure that you have used **RegExp** replace in your code.\n\nEnjoy :D", "difficulty": "introductory", "id": 3884, "sample_io": [{"input": "Probably", "output": ["Prolly"]}, {"input": "Instagram", "output": ["Insta"]}], "test_list": [{"input": "When I miss few days of gym", "output": ["When I miss few days of gym"]}, {"input": "Squad probably think I am fake", "output": ["Squad prolly think I'm fake"]}, {"input": "Whole squad probably bigger than me now", "output": ["Whole squad prolly bigger than me now"]}, {"input": "No selfie to post on Instagram either", "output": ["No selfie to post on Insta either"]}, {"input": "Gym crush probably found someone else", "output": ["Gym crush prolly found someone else"]}, {"input": "What if I die fat", "output": ["What if I die fat"]}, {"input": "What if I do not fit in my clothes now", "output": ["What if I don't fit in my clothes now"]}, {"input": "Going to feel like a new gym member", "output": ["Gonna feel like a new gym member"]}, {"input": "wait what was my lock combination", "output": ["wait what was my lock combo"]}, {"input": "that skinny girl can probably outlift me now", "output": ["that skinny girl can prolly outlift me now"]}, {"input": "probably Probably", "output": ["prolly Prolly"]}, {"input": "i am I am", "output": ["i'm I'm"]}, {"input": "instagram Instagram", "output": ["insta Insta"]}, {"input": "do not Do not", "output": ["don't Don't"]}, {"input": "going to Going to", "output": ["gonna Gonna"]}, {"input": "combination Combination", "output": ["combo Combo"]}, {"input": "probably Probably probably Probably probably Probably probably Probably probably Probably", "output": ["prolly Prolly prolly Prolly prolly Prolly prolly Prolly prolly Prolly"]}, {"input": "i am I am i am I am i am I am i am I am i am I am i am I am", "output": ["i'm I'm i'm I'm i'm I'm i'm I'm i'm I'm i'm I'm"]}, {"input": "instagram Instagram instagram Instagram instagram Instagram instagram Instagram instagram Instagram", "output": ["insta Insta insta Insta insta Insta insta Insta insta Insta"]}, {"input": "do not Do not do not Do not do not Do not do not Do not", "output": ["don't Don't don't Don't don't Don't don't Don't"]}, {"input": "Going to going to Going to Going to going to Going to Going to going to Going to", "output": ["Gonna gonna Gonna Gonna gonna Gonna Gonna gonna Gonna"]}, {"input": "combination combination Combination combination Combination", "output": ["combo combo Combo combo Combo"]}], "starter_code": "\ndef gym_slang(phrase):\n\t", "source_codes": ["import re\n\ndef gymSlang(s):\n    s = re.sub(r'\\bprobably\\b', 'prolly', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bi am\\b', 'i\\'m', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bingramstagram\\b|\\binstagram\\b', 'insta', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bdo not\\b', 'don\\'t', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bgonna\\b', 'gonna', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bcombination\\b', 'combo', s, flags=re.IGNORECASE)\n    \n    return s\n\ns = input()\nprint(gymSlang(s))"], "responses": ["import re\n\ndef gymSlang(s):\n    s = re.sub(r'\\bprobably\\b', 'prolly', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bi am\\b', 'i\\'m', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bingramstagram\\b|\\binstagram\\b', 'insta', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bdo not\\b', 'don\\'t', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bgonna\\b', 'gonna', s, flags=re.IGNORECASE)\n    s = re.sub(r'\\bcombination\\b', 'combo', s, flags=re.IGNORECASE)\n    \n    return s\n\ns = input()\nprint(gymSlang(s))"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3884}
{"name": "3732", "description": "A Madhav array has the following property:\n\n```a[0] = a[1] + a[2] = a[3] + a[4] + a[5] = a[6] + a[7] + a[8] + a[9] = ...```\n\nComplete the function/method that returns `true` if the given array is a Madhav array, otherwise it returns `false`.\n\n*Edge cases: An array of length* `0` *or* `1` *should not be considered a Madhav array as there is nothing to compare.*", "difficulty": "introductory", "id": 3732, "sample_io": [], "test_list": [{"input": "[6, 2, 4, 2, 2, 2, 1, 5, 0, 0]", "output": [true]}, {"input": "[6, 2, 4, 2, 2, 2, 1, 5, 0, -100]", "output": [false]}, {"input": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -2, -1]", "output": [true]}, {"input": "[-6, -3, -3, 8, -5, -4]", "output": [false]}, {"input": "[-6, -3, -3, 8, -10, -4]", "output": [true]}, {"input": "[3, 1, 2, 3, 0]", "output": [false]}, {"input": "[3, 3]", "output": [false]}, {"input": "[]", "output": [false]}, {"input": "[1]", "output": [false]}, {"input": "[5, 2, 4, 1, 0, 3]", "output": [false]}, {"input": "[6, 2, 4, 2, 2, 2, 1, 5, 0, 0, -12, 13, -5, 4, 6]", "output": [true]}, {"input": "[6, 2, 4, 2, 2, 2, 1, 5, 0, 0, -12, 13, -5, 4, 1]", "output": [false]}, {"input": "[2, 1, 1]", "output": [true]}, {"input": "[2, 1, 1, 4, -1, -1]", "output": [true]}], "starter_code": "\ndef is_madhav_array(arr):\n\t", "source_codes": ["\ndef is_madhav_array(a):\n    # Base case for arrays of length 0 or 1\n    if len(a) <= 1:\n        return False\n    \n    # Initialize sum variable with a[0]\n    total = a[0]\n    \n    # Iterate over the array starting from index 1\n    for i in range(1, len(a)):\n        # If the current element doesn't match the expected value, return False\n        if a[i] != total:\n            return False\n        \n        # Update sum by adding next two elements and decreasing previous one\n        total = total + a[i+1] + a[i+2] - a[i-1]\n    \n    # If we have checked all elements without returning False, return True\n    return True\n\n# Test the function with an example array\na = [10, 9, 7, 4, 3, 0]\nprint(is_madhav_array(a))  # Output: True\n\n\n"], "responses": ["```python\ndef is_madhav_array(a):\n    # Base case for arrays of length 0 or 1\n    if len(a) <= 1:\n        return False\n    \n    # Initialize sum variable with a[0]\n    total = a[0]\n    \n    # Iterate over the array starting from index 1\n    for i in range(1, len(a)):\n        # If the current element doesn't match the expected value, return False\n        if a[i] != total:\n            return False\n        \n        # Update sum by adding next two elements and decreasing previous one\n        total = total + a[i+1] + a[i+2] - a[i-1]\n    \n    # If we have checked all elements without returning False, return True\n    return True\n\n# Test the function with an example array\na = [10, 9, 7, 4, 3, 0]\nprint(is_madhav_array(a))  # Output: True\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3732}
{"name": "3569", "description": "In Russia regular bus tickets usually consist of 6 digits. The ticket is called lucky when the sum of the first three digits equals to the sum of the last three digits. Write a function to find out whether the ticket is lucky or not. Return true if so, otherwise return false. Consider that input is always a string. Watch examples below.", "difficulty": "introductory", "id": 3569, "sample_io": [], "test_list": [{"input": "123321", "output": [true]}, {"input": "12341234", "output": [false]}, {"input": "100001", "output": [true]}, {"input": "100200", "output": [false]}, {"input": "912435", "output": [true]}, {"input": "12a12a", "output": [false]}, {"input": "999999", "output": [true]}, {"input": "1111", "output": [false]}, {"input": "000000", "output": [true]}, {"input": "", "output": [false]}], "starter_code": "\ndef is_lucky(ticket):\n\t", "source_codes": ["\ndef is_lucky(ticket):\n    # Calculate the sum of the first three digits\n    a = sum(map(int, ticket[:3]))\n    \n    # Calculate the sum of the last three digits\n    b = sum(map(int, ticket[3:]))\n    \n    # Return true if the sums are equal, false otherwise\n    return a == b\n\n# Take input from standard input\nticket = input()\n\n# Print whether the ticket is lucky or not\nprint(is_lucky(ticket))\n\n\n"], "responses": ["```python\ndef is_lucky(ticket):\n    # Calculate the sum of the first three digits\n    a = sum(map(int, ticket[:3]))\n    \n    # Calculate the sum of the last three digits\n    b = sum(map(int, ticket[3:]))\n    \n    # Return true if the sums are equal, false otherwise\n    return a == b\n\n# Take input from standard input\nticket = input()\n\n# Print whether the ticket is lucky or not\nprint(is_lucky(ticket))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3569}
{"name": "2755", "description": "Return a new array consisting of elements which are multiple of their own index in input array (length > 1).\n\nSome cases: \n\n```\n[22, -6, 32, 82, 9, 25] =>  [-6, 32, 25]\n\n[68, -1, 1, -7, 10, 10] => [-1, 10]\n\n[-56,-85,72,-26,-14,76,-27,72,35,-21,-67,87,0,21,59,27,-92,68] => [-85, 72, 0, 68]\n```", "difficulty": "introductory", "id": 2755, "sample_io": [{"input": "[22, -6, 32, 82, 9, 25]", "output": [[-6, 32, 25]]}, {"input": "[68, -1, 1, -7, 10, 10]", "output": [[-1, 10]]}, {"input": "[-56,-85,72,-26,-14,76,-27,72,35,-21,-67,87,0,21,59,27,-92,68]", "output": [[-85, 72, 0, 68]]}], "test_list": [{"input": "[22, -6, 32, 82, 9, 25]", "output": [[-6, 32, 25]]}, {"input": "[68, -1, 1, -7, 10, 10]", "output": [[-1, 10]]}, {"input": "[11, -11]", "output": [[-11]]}, {"input": "[-56, -85, 72, -26, -14, 76, -27, 72, 35, -21, -67, 87, 0, 21, 59, 27, -92, 68]", "output": [[-85, 72, 0, 68]]}, {"input": "[28, 38, -44, -99, -13, -54, 77, -51]", "output": [[38, -44, -99]]}, {"input": "[-1, -49, -1, 67, 8, -60, 39, 35]", "output": [[-49, 8, -60, 35]]}], "starter_code": "\ndef multiple_of_index(arr):\n\t", "source_codes": ["\ndef solve(arr):\n    return [x for i, x in enumerate(arr) if x % (i + 1) == 0]\n\narr = list(map(int, input().split()))\nprint(solve(arr))\n\n\n"], "responses": ["```python\ndef solve(arr):\n    return [x for i, x in enumerate(arr) if x % (i + 1) == 0]\n\narr = list(map(int, input().split()))\nprint(solve(arr))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2755}
{"name": "4168", "description": "Implement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\n**Note**: OR, AND, NOT, XOR are bitwise operations.\n\n___\n\n### Examples\n\n```\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n```\n\n___\n\nGive an example why this hashing algorithm is bad?", "difficulty": "introductory", "id": 4168, "sample_io": [{"input": "a", "output": [64]}, {"input": "ca", "output": [-820]}], "test_list": [{"input": "int main(int argc, char *argv[]) { return 0; }", "output": [188]}, {"input": " Yo - What's Good?! ", "output": [460]}, {"input": " df af asd ", "output": [744]}, {"input": "global hash", "output": [1120]}, {"input": "section .text", "output": [328]}, {"input": "hash:", "output": [-1884]}, {"input": "    xor eax, eax", "output": [1080]}, {"input": "    ret", "output": [112]}, {"input": "; -----> end of hash <-----", "output": [-7136]}, {"input": "int hash(const char *str);", "output": [-9232]}, {"input": "", "output": [32]}, {"input": " ", "output": [96]}, {"input": "  ", "output": [32]}, {"input": "   ", "output": [224]}, {"input": "    ", "output": [32]}], "starter_code": "\ndef string_hash(s):\n\t", "source_codes": ["\ndef hash(s):\n    a = sum(ord(c) for c in s)\n    b = 0\n    for i in range(1, len(s)):\n        b += ord(s[i]) - ord(s[i-1])\n    c = (a | b) & ((~a) << 2)\n    d = c ^ (32 * (s.count(' ') + 1))\n    return d\n\ns = input()\nprint(hash(s))\n\n\n"], "responses": ["```python\ndef hash(s):\n    a = sum(ord(c) for c in s)\n    b = 0\n    for i in range(1, len(s)):\n        b += ord(s[i]) - ord(s[i-1])\n    c = (a | b) & ((~a) << 2)\n    d = c ^ (32 * (s.count(' ') + 1))\n    return d\n\ns = input()\nprint(hash(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4168}
{"name": "4391", "description": "## The Story\nGreen Lantern's long hours of study and practice with his ring have really paid off -- his skills, focus, and control have improved so much that now he can even use his ring to update and redesign his web site. Earlier today he was focusing his will and a beam from his ring upon the Justice League web server, while intensely brainstorming and visualizing in minute detail different looks and ideas for his web site, and when he finished and reloaded his home page, he was absolutely thrilled to see that among other things it now displayed\n\n~~~~\nIn brightest day, in blackest night,\nThere's nothing cooler than my site!\n~~~~\n\nin his favorite font in very large blinking green letters.\n\nThe problem is, Green Lantern's ring has no power over anything yellow, so if he's experimenting with his web site and accidentally changes some text or background color to yellow, he will no longer be able to make any changes to those parts of the content or presentation (because he doesn't actually know any HTML, CSS, programming languages, frameworks, etc.) until he gets a more knowledgable friend to edit the code for him.\n\n## Your Mission\nYou can help Green Lantern by writing a function that will replace any color property values that are too yellow with shades of green or blue-green. Presumably at a later time the two of you will be doing some testing to find out at exactly which RGB values yellow stops being yellow and starts being off-white, orange, brown, etc. as far as his ring is concerned, but here's the plan to get version 1.0 up and running as soon as possible:\n\nYour function will receive either an HTML color name or a six-digit hex color code. (You're not going to bother with other types of color codes just now because you don't think they will come up.) If the color is too yellow, your function needs to return a green or blue-green shade instead, but if it is not too yellow, it needs to return the original color name or hex color code unchanged.\n\n### HTML Color Names\n(If don't know what HTML color names are, take a look at this HTML colors names reference.)\n\nFor HMTL color names, you are going to start out trying a pretty strict definition of yellow, replacing any of the following colors as specified:\n\n~~~~\nGold => ForestGreen\nKhaki => LimeGreen\nLemonChiffon => PaleGreen\nLightGoldenRodYellow => SpringGreen\nLightYellow => MintCream\nPaleGoldenRod => LightGreen\nYellow => Lime\n~~~~\n\nHTML color names are case-insensitive, so your function will need to be able to identify the above yellow shades regardless of the cases used, but should output the green shades as capitalized above.\n\nSome examples:\n```\n\"lemonchiffon\"    \"PaleGreen\"\n\"GOLD\"            \"ForestGreen\"\n\"pAlEgOlDeNrOd\"   \"LightGreen\"\n\"BlueViolet\"      \"BlueViolet\"\n```\n\n### Hex Color Codes\n(If you don't know what six-digit hex color codes are, take a look at this Wikipedia description. Basically the six digits are made up of three two-digit numbers in base 16, known as hexidecimal or hex, from 00 to FF (equivalent to 255 in base 10, also known as decimal), with the first two-digit number specifying the color's red value, the second the green value, and the third blue.)\n\nWith six-digit color hex codes, you are going to start out going really overboard, interpreting as \"yellow\" any hex code where the red (R) value and the green (G) value are each greater than the blue (B) value. When you find one of these \"yellow\" hex codes, your function will take the three hex values and rearrange them that the largest goes to G, the middle goes to B, and the smallest to R. \n\nFor example, with the six-digit hex color code `#FFD700`, which has an R value of hex FF (decimal 255), a G value of hex D7 (decimal 215), and a B value of hex 00 (decimal 0), as the R and G values are each larger than the B value, you would return it as `#00FFD7` -- the FF reassigned to G, the D7 to B, and the 00 to R. \n\nHex color codes are also case-insensitive, but your function should output them in the same case they were received in, just for consistency with whatever style is being used.\n\nSome examples:\n```\n\"#000000\"   \"#000000\"\n\"#b8860b\"   \"#0bb886\"\n\"#8FBC8F\"   \"#8FBC8F\"\n\"#C71585\"   \"#C71585\"\n```", "difficulty": "introductory", "id": 4391, "sample_io": [{"input": "lemonchiffon", "output": ["PaleGreen"]}, {"input": "GOLD", "output": ["ForestGreen"]}, {"input": "pAlEgOlDeNrOd", "output": ["LightGreen"]}, {"input": "BlueViolet", "output": ["BlueViolet"]}, {"input": "#000000", "output": ["#000000"]}, {"input": "#b8860b", "output": ["#0bb886"]}, {"input": "#8FBC8F", "output": ["#8FBC8F"]}, {"input": "#C71585", "output": ["#C71585"]}], "test_list": [{"input": "lemonchiffon", "output": ["PaleGreen"]}, {"input": "GOLD", "output": ["ForestGreen"]}, {"input": "pAlEgOlDeNrOd", "output": ["LightGreen"]}, {"input": "BlueViolet", "output": ["BlueViolet"]}, {"input": "#000000", "output": ["#000000"]}, {"input": "#b8860b", "output": ["#0bb886"]}, {"input": "#8FBC8F", "output": ["#8FBC8F"]}, {"input": "#C71585", "output": ["#C71585"]}], "starter_code": "\ndef yellow_be_gone(s):\n\t", "source_codes": ["\ndef replace_yellow_color(color):\n    if color.startswith('#'):\n        hex_code = color.lstrip('#')\n        r, g, b = int(hex_code[:2], 16), int(hex_code[2:4], 16), int(hex_code[4:], 16)\n        if r > g and r > b:\n            return '#' + '{:02x}'.format(max(r, g)) + '{:02x}'.format(min(r, g)) + '{:02x}'.format(b)\n    else:\n        color = color.lower()\n        color_map = {\n            'gold': 'ForestGreen',\n            'khaki': 'LimeGreen',\n            'lemonchiffon': 'PaleGreen',\n            'lightgoldenrodyellow': 'SpringGreen',\n            'lightyellow': 'MintCream',\n            'palegoldenrod': 'LightGreen',\n            'yellow': 'Lime'\n        }\n        return color_map.get(color, color.capitalize())\n\n# Taking input from standard input\ncolor = input()\n\n# Calling the function with specified parameters and printing the output of the function\nprint(replace_yellow_color(color))\n\n\n"], "responses": ["```python\ndef replace_yellow_color(color):\n    if color.startswith('#'):\n        hex_code = color.lstrip('#')\n        r, g, b = int(hex_code[:2], 16), int(hex_code[2:4], 16), int(hex_code[4:], 16)\n        if r > g and r > b:\n            return '#' + '{:02x}'.format(max(r, g)) + '{:02x}'.format(min(r, g)) + '{:02x}'.format(b)\n    else:\n        color = color.lower()\n        color_map = {\n            'gold': 'ForestGreen',\n            'khaki': 'LimeGreen',\n            'lemonchiffon': 'PaleGreen',\n            'lightgoldenrodyellow': 'SpringGreen',\n            'lightyellow': 'MintCream',\n            'palegoldenrod': 'LightGreen',\n            'yellow': 'Lime'\n        }\n        return color_map.get(color, color.capitalize())\n\n# Taking input from standard input\ncolor = input()\n\n# Calling the function with specified parameters and printing the output of the function\nprint(replace_yellow_color(color))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4391}
{"name": "4344", "description": "# Task\nImagine `n` horizontal lines and `m` vertical lines.\n\nSome of these lines intersect, creating rectangles.\n\nHow many rectangles are there?\n\n# Examples\n\nFor `n=2, m=2,` the result should be `1`.\n\nthere is only one 1x1 rectangle.\n\nFor `n=2, m=3`, the result should be `3`.\n\nthere are two 1x1 rectangles and one 1x2 rectangle. So `2 + 1 = 3`.\n\nFor n=3, m=3, the result should be `9`.\n\nthere are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So `4 + 2 + 2 + 1 = 9`.\n\n\n\n# Input & Output\n\n\n- `[input]` integer `n`\n\nNumber of horizontal lines.\n\nConstraints: `0 <= n <= 100`\n\n\n- `[input]` integer `m`\n\nNumber of vertical lines.\n\nConstraints: `0 <= m <= 100`\n\n\n- `[output]` an integer\n\nNumber of rectangles.", "difficulty": "introductory", "id": 4344, "sample_io": [{"input": "2\n3", "output": [3]}, {"input": "2\n2", "output": [1]}, {"input": "3\n3", "output": [9]}], "test_list": [{"input": "2\n3", "output": [3]}, {"input": "2\n2", "output": [1]}, {"input": "1\n1", "output": [0]}, {"input": "0\n1", "output": [0]}, {"input": "3\n3", "output": [9]}, {"input": "100\n100", "output": [24502500]}], "starter_code": "\ndef rectangles(n, m):\n\t", "source_codes": ["\ndef main():\n    # Take user input as integers representing the number of horizontal and vertical lines\n    n, m = map(int, input().split())\n\n    # Initialize a variable 'result' to store the total number of rectangles\n    result = 0\n\n    # Step 1: Iterate over the range from 1 to min(n, m)\n    for i in range(1, min(n, m) + 1):\n        # Calculate the number of rectangles with side length i and add it to the result\n        result += n * m // i\n\n    # Print the calculated total number of rectangles\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as integers representing the number of horizontal and vertical lines\n    n, m = map(int, input().split())\n\n    # Initialize a variable 'result' to store the total number of rectangles\n    result = 0\n\n    # Step 1: Iterate over the range from 1 to min(n, m)\n    for i in range(1, min(n, m) + 1):\n        # Calculate the number of rectangles with side length i and add it to the result\n        result += n * m // i\n\n    # Print the calculated total number of rectangles\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4344}
{"name": "2886", "description": "# Description:\n\n Find the longest successive exclamation marks and question marks combination in the string. A successive exclamation marks and question marks combination must contains two part: a substring of \"!\" and a substring \"?\", they are adjacent. \n \n If more than one result are found, return the one which at left side; If no such a combination found, return `\"\"`.\n\n# Examples\n\n```\nfind(\"!!\") === \"\"\nfind(\"!??\") === \"!??\"\nfind(\"!?!!\") === \"?!!\"\nfind(\"!!???!????\") === \"!!???\"\nfind(\"!!???!?????\") === \"!?????\"\nfind(\"!????!!!?\") === \"????!!!\" \nfind(\"!?!!??!!!?\") === \"??!!!\"\n```\n\n# Note\nPlease don't post issue about difficulty or duplicate. Because:\n>[That's unfair on the kata creator. This is a valid kata and introduces new people to javascript some regex or loops, depending on how they tackle this problem.  --matt c](https://www.codewars.com/kata/remove-exclamation-marks/discuss#57fabb625c9910c73000024e)", "difficulty": "introductory", "id": 2886, "sample_io": [{"input": "!!", "output": [""]}, {"input": "!??", "output": ["!??"]}, {"input": "!?!!", "output": ["?!!"]}, {"input": "!!???!????", "output": ["!!???"]}, {"input": "!!???!?????", "output": ["!?????"]}, {"input": "!????!!!?", "output": ["????!!!"]}, {"input": "!?!!??!!!?", "output": ["??!!!"]}], "test_list": [{"input": "!!", "output": [""]}, {"input": "!??", "output": ["!??"]}, {"input": "!?!!", "output": ["?!!"]}, {"input": "!!???!????", "output": ["!!???"]}, {"input": "!!???!?????", "output": ["!?????"]}, {"input": "!????!!!?", "output": ["????!!!"]}, {"input": "!?!!??!!!?", "output": ["??!!!"]}], "starter_code": "\ndef find(s):\n\t", "source_codes": ["\ndef find(s):\n    max_len = 0\n    max_str = \"\"\n    start = 0\n    while start < len(s) - 1:\n        temp_str = s[start] + s[start+1]\n        if (s[start] == '!' and s[start+1] == '?') or (s[start] == '?' and s[start+1] == '!'):\n            max_len = max(max_len, len(temp_str))\n            max_str = max_str[:start] + temp_str + max_str[start+2:]\n        start += 1\n    return max_str if max_len > 0 else \"\"\n\n\n"], "responses": ["```python\ndef find(s):\n    max_len = 0\n    max_str = \"\"\n    start = 0\n    while start < len(s) - 1:\n        temp_str = s[start] + s[start+1]\n        if (s[start] == '!' and s[start+1] == '?') or (s[start] == '?' and s[start+1] == '!'):\n            max_len = max(max_len, len(temp_str))\n            max_str = max_str[:start] + temp_str + max_str[start+2:]\n        start += 1\n    return max_str if max_len > 0 else \"\"\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2886}
{"name": "3856", "description": "The prime number sequence starts with: `2,3,5,7,11,13,17,19...`. Notice that `2` is in position `one`. \n\n`3` occupies position `two`, which is a prime-numbered position. Similarly, `5`, `11` and `17` also occupy prime-numbered positions. We shall call primes such as `3,5,11,17` dominant primes because they occupy prime-numbered positions in the prime number sequence. Let's call this `listA`. \n\nAs you can see from listA, for the prime range `range(0,10)`, there are `only two` dominant primes (`3` and `5`) and the sum of these primes is: `3 + 5 = 8`. \n\nSimilarly, as shown in listA, in the `range (6,20)`, the dominant primes in this range are `11` and `17`, with a sum of `28`.\n\nGiven a `range (a,b)`, what is the sum of dominant primes within that range? Note that  `a <= range <= b` and `b` will not exceed `500000`.\n\nGood luck!\n\nIf you like this Kata, you will enjoy:\n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)", "difficulty": "introductory", "id": 3856, "sample_io": [{"input": "0\n10", "output": [8]}, {"input": "6\n20", "output": [28]}], "test_list": [{"input": "0\n10", "output": [8]}, {"input": "2\n200", "output": [1080]}, {"input": "200\n2000", "output": [48132]}, {"input": "500\n10000", "output": [847039]}, {"input": "1000\n100000", "output": [52114889]}, {"input": "2000\n200000", "output": [183035206]}, {"input": "3000\n400000", "output": [650120994]}, {"input": "4000\n500000", "output": [972664400]}], "starter_code": "\ndef solve(a,b):\n\t", "source_codes": ["\ndef sum_of_dominant_primes(a, b):\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    prime_positions = set()\n    for i in range(a, b + 1):\n        if is_prime(i):\n            prime_positions.add(i)\n\n    dominant_primes = []\n    for position, prime in enumerate(prime_positions, start=a):\n        if position == prime:\n            dominant_primes.append(prime)\n\n    return sum(dominant_primes)\n# ------------------\n\n\n"], "responses": ["```python\ndef sum_of_dominant_primes(a, b):\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    prime_positions = set()\n    for i in range(a, b + 1):\n        if is_prime(i):\n            prime_positions.add(i)\n\n    dominant_primes = []\n    for position, prime in enumerate(prime_positions, start=a):\n        if position == prime:\n            dominant_primes.append(prime)\n\n    return sum(dominant_primes)\n# ------------------\n```\n\nIn the above code, `sum_of_dominant_primes(a,b)` takes two parameters a and b, a and b are numbers from which we will find out whether a number is in the list of prime numbers or not. Also `is_prime(x)` function checks if x is a prime number or not."], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3856}
{"name": "3698", "description": "In this exercise, you will have to create a function named tiyFizzBuzz. This function will take on a string parameter and will return that string with some characters replaced, depending on the value:\n\n- If a letter is a upper case consonants, replace that character with \"Iron\".\n- If a letter is a lower case consonants or a non-alpha character, do nothing to that character\n- If a letter is a upper case vowel, replace that character with \"Iron Yard\".\n- If a letter is a lower case vowel, replace that character with \"Yard\".\n\nReady?", "difficulty": "introductory", "id": 3698, "sample_io": [], "test_list": [{"input": " ", "output": [" "]}, {"input": "H", "output": ["Iron"]}, {"input": "b", "output": ["b"]}, {"input": "A", "output": ["Iron Yard"]}, {"input": "a", "output": ["Yard"]}, {"input": "Hello WORLD!", "output": ["IronYardllYard IronIron YardIronIronIron!"]}, {"input": "H6H4Na ./?U", "output": ["Iron6Iron4IronYard ./?Iron Yard"]}], "starter_code": "\ndef tiy_fizz_buzz(string):\n\t", "source_codes": ["\ndef tyFizzBuzz(s):\n    vowels = 'AEIOUaeiou'\n    result = \"\"\n    for c in s:\n        if c in vowels and ord(c) >= 97:\n            result += \"Yard\"\n        elif c in vowels and ord(c) < 97:\n            result += \"Iron Yard\"\n        elif c not in vowels and c.isalpha():\n            result += \"Iron\"\n        else:\n            result += c\n    return result\n\ns = input()\nprint(tyFizzBuzz(s))\n\n\n"], "responses": ["```python\ndef tyFizzBuzz(s):\n    vowels = 'AEIOUaeiou'\n    result = \"\"\n    for c in s:\n        if c in vowels and ord(c) >= 97:\n            result += \"Yard\"\n        elif c in vowels and ord(c) < 97:\n            result += \"Iron Yard\"\n        elif c not in vowels and c.isalpha():\n            result += \"Iron\"\n        else:\n            result += c\n    return result\n\ns = input()\nprint(tyFizzBuzz(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3698}
{"name": "4268", "description": "Given a non-negative number, return the next bigger polydivisible number, or an empty value like `null` or `Nothing`.\n\nA number is polydivisible if its first digit is cleanly divisible by `1`, its first two digits by `2`, its first three by `3`, and so on. There are finitely many polydivisible numbers.", "difficulty": "introductory", "id": 4268, "sample_io": [], "test_list": [{"input": "0", "output": [1]}, {"input": "10", "output": [12]}, {"input": "11", "output": [12]}, {"input": "1234", "output": [1236]}, {"input": "123220", "output": [123252]}, {"input": "998", "output": [1020]}, {"input": "999", "output": [1020]}, {"input": "1234567890", "output": [1236004020]}, {"input": "3608528850368400786036724", "output": [3608528850368400786036725]}, {"input": "3608528850368400786036725", "output": [null]}], "starter_code": "\ndef next_num(n):\n\t", "source_codes": ["\ndef get_next_polydivisible(num):\n    num_str = str(num)\n    n = len(num_str)\n\n    # Step 1: Create a target polydivisible number 't' by incrementing the first digit by 1 and padding with zeros\n    t = int(str(int(num_str[0]) + 1) + '0' * (n - 1))\n\n    # Step 2: Calculate the number of years from the current year to the next lucky one\n    while True:\n        if all(int(num_str[i]) == 0 or int(num_str[:i+1]) % i == 0 for i in range(1, n)):\n            return t\n        t += 1\n\n# Take user input as a string representing the current year\nnum = int(input())\n\nprint(get_next_polydivisible(num))\n\n\n"], "responses": ["```python\ndef get_next_polydivisible(num):\n    num_str = str(num)\n    n = len(num_str)\n\n    # Step 1: Create a target polydivisible number 't' by incrementing the first digit by 1 and padding with zeros\n    t = int(str(int(num_str[0]) + 1) + '0' * (n - 1))\n\n    # Step 2: Calculate the number of years from the current year to the next lucky one\n    while True:\n        if all(int(num_str[i]) == 0 or int(num_str[:i+1]) % i == 0 for i in range(1, n)):\n            return t\n        t += 1\n\n# Take user input as a string representing the current year\nnum = int(input())\n\nprint(get_next_polydivisible(num))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4268}
{"name": "2704", "description": "# Task\n Given a `sequence` of integers, check whether it is possible to obtain a strictly increasing sequence by erasing no more than one element from it.\n\n# Example\n\n For `sequence = [1, 3, 2, 1]`, the output should be `false`;\n \n For `sequence = [1, 3, 2]`, the output should be `true`.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n    Constraints: `2 \u2264 sequence.length \u2264 1000, -10000 \u2264 sequence[i] \u2264 10000.`\n\n\n - `[output]` a boolean value\n\n    `true` if it is possible, `false` otherwise.", "difficulty": "introductory", "id": 2704, "sample_io": [{"input": "[1, 3, 2, 1]", "output": [false]}, {"input": "[1, 3, 2]", "output": [true]}], "test_list": [{"input": "[1, 3, 2, 1]", "output": [false]}, {"input": "[1, 3, 2]", "output": [true]}, {"input": "[1, 2, 3]", "output": [true]}, {"input": "[1, 2, 3, 1]", "output": [true]}, {"input": "[1, 4, 10, 4, 2]", "output": [false]}, {"input": "[10, 1, 2, 3, 4, 5]", "output": [true]}, {"input": "[1, 1, 1, 2, 3]", "output": [false]}, {"input": "[0, -2, 5, 6]", "output": [true]}, {"input": "[1, 1]", "output": [true]}, {"input": "[4, 5, 6, 1, 2, 3]", "output": [false]}, {"input": "[149, 15, 23, 32, 41, 48, 58, 66, 69, 75, 81, 91, 178, 100, 109, 118, 128, 134, 143]", "output": [false]}], "starter_code": "\ndef almost_increasing_sequence(sequence):\n\t", "source_codes": ["\ndef canMakeIncreasingSequence(sequence):\n    # Initialize counters for increasing subsequence\n    i, j = 1, 0\n    \n    # Iterate through sequence to count number of increasing subsequences\n    while j < len(sequence) - 1:\n        k = j + 1\n        \n        # Compare each element in the current window with its neighbor\n        while k < len(sequence):\n            if sequence[k] > sequence[k-1]:\n                k += 1\n            else:\n                break\n        \n        # If all elements are in ascending order, increment i\n        if k == len(sequence) and j + 1 == k:\n            i += 1\n            break\n        \n        # Increment j for next window\n        j = max(j + 1, k)\n    \n    # It's possible to make increasing sequence of length at least 'i' or '-1'\n    return i >= 2\n\n# Call the function with input from user\nsequence = list(map(int, input().split()))\nprint(canMakeIncreasingSequence(sequence))\n\n\n"], "responses": ["```python\ndef canMakeIncreasingSequence(sequence):\n    # Initialize counters for increasing subsequence\n    i, j = 1, 0\n    \n    # Iterate through sequence to count number of increasing subsequences\n    while j < len(sequence) - 1:\n        k = j + 1\n        \n        # Compare each element in the current window with its neighbor\n        while k < len(sequence):\n            if sequence[k] > sequence[k-1]:\n                k += 1\n            else:\n                break\n        \n        # If all elements are in ascending order, increment i\n        if k == len(sequence) and j + 1 == k:\n            i += 1\n            break\n        \n        # Increment j for next window\n        j = max(j + 1, k)\n    \n    # It's possible to make increasing sequence of length at least 'i' or '-1'\n    return i >= 2\n\n# Call the function with input from user\nsequence = list(map(int, input().split()))\nprint(canMakeIncreasingSequence(sequence))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2704}
{"name": "3978", "description": "This function should test if the `factor` is a factor of `base`.\n\nReturn `true` if it is a factor or `false` if it is not.\n\n## About factors\nFactors are numbers you can multiply together to get another number.\n\n2 and 3 are factors of 6 because: `2 * 3 = 6`\n\n- You can find a factor by dividing numbers. If the remainder is 0 then the number is a factor.\n- You can use the mod operator (`%`) in most languages to check for a remainder\n\nFor example 2 is not a factor of 7 because: `7 % 2 = 1`\n\nNote: `base` is a non-negative number, `factor` is a positive number.", "difficulty": "introductory", "id": 3978, "sample_io": [{"input": "7\n2", "output": [false]}, {"input": "6\n2", "output": [true]}, {"input": "6\n3", "output": [true]}], "test_list": [{"input": "10\n2", "output": [true]}, {"input": "63\n7", "output": [true]}, {"input": "2450\n5", "output": [true]}, {"input": "24612\n3", "output": [true]}, {"input": "9\n2", "output": [false]}, {"input": "653\n7", "output": [false]}, {"input": "2453\n5", "output": [false]}, {"input": "24617\n3", "output": [false]}], "starter_code": "\ndef check_for_factor(base, factor):\n\t", "source_codes": ["\ndef is_factor(base, factor):\n    return base % factor == 0\n\nbase = int(input())\nfactor = int(input())\n\nprint(is_factor(base, factor))\n\n\n"], "responses": ["```python\ndef is_factor(base, factor):\n    return base % factor == 0\n\nbase = int(input())\nfactor = int(input())\n\nprint(is_factor(base, factor))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3978}
{"name": "4262", "description": "Dee is lazy but she's kind and she likes to eat out at all the nice restaurants and gastropubs in town. To make paying quick and easy she uses a simple mental algorithm she's called The Fair %20 Rule. She's gotten so good she can do this in a few seconds and it always impresses her dates but she's perplexingly still single. Like you probably. \n\nThis is how she does it:\n\n - She rounds the price `P` at the tens place e.g:\n   - 25 becomes 30\n   - 24 becomes 20\n   - 5 becomes 10\n   - 4 becomes 0\n - She figures out the base tip `T` by dropping the singles place digit e.g:\n   - when `P = 24` she rounds to 20 drops 0 `T = 2`\n   - `P = 115` rounds to 120 drops 0 `T = 12`\n   - `P = 25` rounds to 30 drops 0 `T = 3`\n   - `P = 5` rounds to 10 drops 0 `T = 1`\n   - `P = 4` rounds to 0 `T = 0`\n - She then applies a 3 point satisfaction rating `R` to `T` i.e:\n   - When she's satisfied: `R = 1` and she'll add 1 to `T`\n   - Unsatisfied: `R = 0` and she'll subtract 1 from `T`\n   - Appalled: `R = -1` she'll divide `T` by 2, **rounds down** and subtracts 1\n \n## Your Task\n\nImplement a method `calc_tip` that takes two integer arguments for price `p` \n\nwhere `1 <= p <= 1000` and a rating `r` which is one of `-1, 0, 1`.\n\nThe return value `T` should be a non negative integer.\n\n*Note: each step should be done in the order listed.*\n\nDee always politely smiles and says \"Thank you\" on her way out. Dee is nice. Be like Dee.", "difficulty": "introductory", "id": 4262, "sample_io": [], "test_list": [{"input": "4\n1", "output": [1]}, {"input": "4\n0", "output": [0]}, {"input": "4\n-1", "output": [0]}, {"input": "5\n1", "output": [2]}, {"input": "5\n0", "output": [0]}, {"input": "5\n-1", "output": [0]}, {"input": "14\n1", "output": [2]}, {"input": "14\n0", "output": [0]}, {"input": "14\n-1", "output": [0]}, {"input": "15\n1", "output": [3]}, {"input": "15\n0", "output": [1]}, {"input": "15\n-1", "output": [0]}, {"input": "24\n1", "output": [3]}, {"input": "24\n0", "output": [1]}, {"input": "24\n-1", "output": [0]}, {"input": "25\n1", "output": [4]}, {"input": "25\n0", "output": [2]}, {"input": "25\n-1", "output": [0]}, {"input": "125\n1", "output": [14]}, {"input": "125\n0", "output": [12]}, {"input": "125\n-1", "output": [5]}, {"input": "144\n1", "output": [15]}, {"input": "144\n0", "output": [13]}, {"input": "144\n-1", "output": [6]}], "starter_code": "\ndef calc_tip(p, r):\n\t", "source_codes": ["\ndef calc_tip(p, r):\n    # Round the price at the tens place\n    p = round(p / 10) * 10\n    \n    # Drop the singles place digit and figure out the base tip T\n    T = int(str(p).rstrip('0').lstrip('0') or '0')\n    \n    # Apply a 3 point satisfaction rating R to T\n    if r == -1:\n        T //= 2\n        T -= 1\n    elif r == 1:\n        T += 1\n    \n    return max(T, 0)\n\n# Take input from standard input\np = int(input())\nr = int(input())\n\n# Call the function with specified parameters and print the output of the function\nprint(calc_tip(p, r))\n\n\n"], "responses": ["```python\ndef calc_tip(p, r):\n    # Round the price at the tens place\n    p = round(p / 10) * 10\n    \n    # Drop the singles place digit and figure out the base tip T\n    T = int(str(p).rstrip('0').lstrip('0') or '0')\n    \n    # Apply a 3 point satisfaction rating R to T\n    if r == -1:\n        T //= 2\n        T -= 1\n    elif r == 1:\n        T += 1\n    \n    return max(T, 0)\n\n# Take input from standard input\np = int(input())\nr = int(input())\n\n# Call the function with specified parameters and print the output of the function\nprint(calc_tip(p, r))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4262}
{"name": "2798", "description": "# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n\nDefine `String.prototype.toAlternatingCase` (or a similar function/method *such as* `to_alternating_case`/`toAlternatingCase`/`ToAlternatingCase` in your selected language; **see the initial solution for details**) such that each lowercase letter becomes uppercase and each uppercase letter becomes lowercase. For example:\n``` haskell\ntoAlternatingCase \"hello world\" `shouldBe` \"HELLO WORLD\"\ntoAlternatingCase \"HELLO WORLD\" `shouldBe` \"hello world\"\ntoAlternatingCase \"hello WORLD\" `shouldBe` \"HELLO world\"\ntoAlternatingCase \"HeLLo WoRLD\" `shouldBe` \"hEllO wOrld\"\ntoAlternatingCase \"12345\"       `shouldBe` \"12345\"\ntoAlternatingCase \"1a2b3c4d5e\"  `shouldBe` \"1A2B3C4D5E\"\n```\n```C++\nstring source = \"HeLLo WoRLD\";\nstring upperCase = to_alternating_case(source);\ncout << upperCase << endl; // outputs: hEllO wOrld\n```\nAs usual, your function/method should be pure, i.e. it should **not** mutate the original string.", "difficulty": "introductory", "id": 2798, "sample_io": [{"input": "hello world", "output": ["HELLO WORLD"]}, {"input": "HELLO WORLD", "output": ["hello world"]}, {"input": "hello WORLD", "output": ["HELLO world"]}, {"input": "HeLLo WoRLD", "output": ["hEllO wOrld"]}, {"input": "12345", "output": ["12345"]}, {"input": "1a2b3c4d5e", "output": ["1A2B3C4D5E"]}], "test_list": [{"input": "hello world", "output": ["HELLO WORLD"]}, {"input": "HELLO WORLD", "output": ["hello world"]}, {"input": "hello WORLD", "output": ["HELLO world"]}, {"input": "HeLLo WoRLD", "output": ["hEllO wOrld"]}, {"input": "12345", "output": ["12345"]}, {"input": "1a2b3c4d5e", "output": ["1A2B3C4D5E"]}, {"input": "String.prototype.toAlternatingCase", "output": ["sTRING.PROTOTYPE.TOaLTERNATINGcASE"]}], "starter_code": "\ndef to_alternating_case(string):\n\t", "source_codes": ["\ndef toAlternatingCase(s):\n    res = \"\"\n    for c in s:\n        if 'A' <= c <= 'Z':\n            res += chr(ord(c) + 32)\n        elif 'a' <= c <= 'z':\n            res += chr(ord(c) - 32)\n        else:\n            res += c\n    return res\n\ns = input()\nprint(toAlternatingCase(s))\n\n\n"], "responses": ["```python\ndef toAlternatingCase(s):\n    res = \"\"\n    for c in s:\n        if 'A' <= c <= 'Z':\n            res += chr(ord(c) + 32)\n        elif 'a' <= c <= 'z':\n            res += chr(ord(c) - 32)\n        else:\n            res += c\n    return res\n\ns = input()\nprint(toAlternatingCase(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": true, "language": "Python3", "task_id": 2798}
{"name": "4411", "description": "# Background:\n\nYou're working in a number zoo, and it seems that one of the numbers has gone missing!\n\nZoo workers have no idea what number is missing, and are too incompetent to figure it out, so they're hiring you to do it for them.\n\nIn case the zoo loses another number, they want your program to work regardless of how many numbers there are in total.\n\n___\n\n## Task:\n\nWrite a function that takes a shuffled list of unique numbers from `1` to `n` with one element missing (which can be any number including `n`). Return this missing number.\n\n**Note**: huge lists will be tested.\n\n## Examples:\n\n```\n[1, 3, 4]  =>  2\n[1, 2, 3]  =>  4\n[4, 2, 3]  =>  1\n```", "difficulty": "introductory", "id": 4411, "sample_io": [{"input": "[1, 2, 3]", "output": [4]}, {"input": "[1, 3, 4]", "output": [2]}, {"input": "[4, 2, 3]", "output": [1]}], "test_list": [{"input": "[2, 3, 4]", "output": [1]}, {"input": "[1, 3, 4]", "output": [2]}, {"input": "[1, 2, 4]", "output": [3]}, {"input": "[1, 2, 3]", "output": [4]}, {"input": "[]", "output": [1]}, {"input": "[1]", "output": [2]}, {"input": "[2]", "output": [1]}], "starter_code": "\ndef find_missing_number(numbers):\n\t", "source_codes": ["\ndef findMissingNumber(nums):\n    n = len(nums) + 1\n    return (n * (n+1)) // 2 - sum(nums)\n\nnums = list(map(int, input().split()))\nprint(findMissingNumber(nums))\n\n\n"], "responses": ["```python\ndef findMissingNumber(nums):\n    n = len(nums) + 1\n    return (n * (n+1)) // 2 - sum(nums)\n\nnums = list(map(int, input().split()))\nprint(findMissingNumber(nums))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4411}
{"name": "3741", "description": "Calculate the number of items in a vector that appear at the same index in each vector, with the same value. \n\n```python\n   vector_affinity([1, 2, 3, 4, 5], [1, 2, 2, 4, 3]) # => 0.6\n   vector_affinity([1, 2, 3], [1, 2, 3]) # => 1.0\n```\n\nAffinity value should be realized on a scale of 0.0 to 1.0, with 1.0 being absolutely identical. Two identical sets should always be evaulated as having an affinity or 1.0.\n\nHint: The last example test case holds a significant clue to calculating the affinity correctly.", "difficulty": "introductory", "id": 3741, "sample_io": [{"input": "[1, 2, 3, 4, 5]\n[1, 2, 2, 4, 3]", "output": [0.6]}, {"input": "[1, 2, 3]\n[1, 2, 3]", "output": [1.0]}], "test_list": [{"input": "[1, 2, 3]\n[1, 2, 3, 4, 5]", "output": [0.6]}, {"input": "[1, 2, 3, 4]\n[1, 2, 3, 5]", "output": [0.75]}, {"input": "[1, 2, 3, 4, 5]\n[]", "output": [0.0]}, {"input": "[1, 2, 3]\n[1, 2, 3]", "output": [1.0]}, {"input": "[6, 6, 6, 6, 6, 6]\n[6, None, None, 6, 6, None]", "output": [0.5]}, {"input": "[6]\n[6, 6, 6, 6, 6, 6]", "output": [0.16666666666666666]}, {"input": "[]\n[]", "output": [1.0]}, {"input": "[None]\n[None]", "output": [1.0]}], "starter_code": "\ndef vector_affinity(a, b):\n\t", "source_codes": ["\ndef vector_affinity(vector1, vector2):\n    length = min(len(vector1), len(vector2))\n    identical_items = sum(1 for i in range(length) if vector1[i] == vector2[i])\n    affinity = identical_items / length if length > 0 else 1.0\n    return round(affinity, 1)\n\nvector1 = list(map(int, input().split()))\nvector2 = list(map(int, input().split()))\n\nprint(vector_affinity(vector1, vector2))\n\n\n"], "responses": ["```python\ndef vector_affinity(vector1, vector2):\n    length = min(len(vector1), len(vector2))\n    identical_items = sum(1 for i in range(length) if vector1[i] == vector2[i])\n    affinity = identical_items / length if length > 0 else 1.0\n    return round(affinity, 1)\n\nvector1 = list(map(int, input().split()))\nvector2 = list(map(int, input().split()))\n\nprint(vector_affinity(vector1, vector2))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3741}
{"name": "3242", "description": "# Task\nGiven an integer array `arr`. Your task is to remove one element, maximize the product of elements. \n\nThe result is the element which should be removed. If more than one valid results exist, return the smallest one.\n\n\n# Input/Output\n\n\n`[input]` integer array `arr`\n\nnon-empty unsorted integer array. It contains positive integer, negative integer or zero.\n\n`3 \u2264 arr.length \u2264 15`\n\n`-10 \u2264 arr[i] \u2264 10`\n\n`[output]` an integer\n\nThe element that should be removed.\n\n# Example\n\nFor `arr = [1, 2, 3]`, the output should be `1`.\n\nFor `arr = [-1, 2, -3]`, the output should be `2`.\n\nFor `arr = [-1, -2, -3]`, the output should be `-1`.\n\nFor `arr = [-1, -2, -3, -4]`, the output should be `-4`.", "difficulty": "introductory", "id": 3242, "sample_io": [{"input": "[1, 2, 3]", "output": [1]}, {"input": "[-1, 2, -3]", "output": [2]}, {"input": "[-1, -2, -3]", "output": [-1]}, {"input": "[-1, -2, -3, -4]", "output": [-4]}], "test_list": [{"input": "[1, 2, 3]", "output": [1]}, {"input": "[-1, 2, -3]", "output": [2]}, {"input": "[-1, -2, -3]", "output": [-1]}, {"input": "[-1, -2, -3, -4]", "output": [-4]}, {"input": "[0, 1, 2, 3]", "output": [0]}, {"input": "[0, -1, -2, -3]", "output": [-3]}, {"input": "[0, -1, -2, -3, -4]", "output": [0]}, {"input": "[0, -1, 2, -3, 4]", "output": [0]}, {"input": "[0, -1, 2, 3]", "output": [-1]}, {"input": "[0, -1, -2, -3, 4]", "output": [-3]}, {"input": "[0, 0, 1]", "output": [0]}, {"input": "[0, 0, -1]", "output": [-1]}, {"input": "[0, -1, 1]", "output": [-1]}, {"input": "[0, 0, -1, 1]", "output": [-1]}, {"input": "[0, 0, 0]", "output": [0]}, {"input": "[0, 0, 1, 2, 3]", "output": [0]}, {"input": "[-1, -2, -3, 0, 1, 2, 3]", "output": [-3]}, {"input": "[-1, -2, 0, 1, 2]", "output": [0]}, {"input": "[-1, -2, 1, 2]", "output": [1]}, {"input": "[-1, -2, -3, 1, 2, 3]", "output": [-1]}], "starter_code": "\ndef maximum_product(arr):\n\t", "source_codes": ["\ndef maximumProduct(arr):\n    # Calculate product without an element at each position\n    prod = 1\n    for i in range(len(arr)):\n        p = 1\n        for j in range(len(arr)):\n            if j != i:\n                p *= arr[j]\n        prod = max(prod, p)\n\n    # Find the smallest number among all products excluding one element\n    result = min(abs(x) for x in arr)\n    return result\n\narr = list(map(int, input().split()))\nprint(maximumProduct(arr))\n\n\n"], "responses": ["```python\ndef maximumProduct(arr):\n    # Calculate product without an element at each position\n    prod = 1\n    for i in range(len(arr)):\n        p = 1\n        for j in range(len(arr)):\n            if j != i:\n                p *= arr[j]\n        prod = max(prod, p)\n\n    # Find the smallest number among all products excluding one element\n    result = min(abs(x) for x in arr)\n    return result\n\narr = list(map(int, input().split()))\nprint(maximumProduct(arr))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3242}
{"name": "4453", "description": "# Summary:\nGiven a number, `num`, return the shortest amount of `steps` it would take from 1, to land exactly on that number.\n\n# Description:\nA `step` is defined as either:\n- Adding 1 to the number: `num += 1`\n- Doubling the number: `num *= 2`\n\nYou will always start from the number `1` and you will have to return the shortest count of steps it would take to land exactly on that number.\n\n`1 <= num <= 10000`\n\nExamples:\n\n`num == 3` would return `2` steps:\n\n```\n1 -- +1 --> 2:        1 step\n2 -- +1 --> 3:        2 steps\n\n2 steps\n```\n\n`num == 12` would return `4` steps:\n\n```\n1 -- +1 --> 2:        1 step\n2 -- +1 --> 3:        2 steps\n3 -- x2 --> 6:        3 steps\n6 -- x2 --> 12:       4 steps\n\n4 steps\n```\n\n`num == 16` would return `4` steps:\n\n```\n1 -- +1 --> 2:        1 step\n2 -- x2 --> 4:        2 steps\n4 -- x2 --> 8:        3 steps\n8 -- x2 --> 16:       4 steps\n\n4 steps\n```", "difficulty": "introductory", "id": 4453, "sample_io": [{"input": "12", "output": [4]}, {"input": "3", "output": [2]}, {"input": "16", "output": [4]}], "test_list": [{"input": "2", "output": [1]}, {"input": "3", "output": [2]}, {"input": "4", "output": [2]}, {"input": "5", "output": [3]}, {"input": "6", "output": [3]}, {"input": "7", "output": [4]}, {"input": "8", "output": [3]}, {"input": "9", "output": [4]}, {"input": "10", "output": [4]}, {"input": "20", "output": [5]}, {"input": "30", "output": [7]}, {"input": "40", "output": [6]}, {"input": "50", "output": [7]}, {"input": "11", "output": [5]}, {"input": "24", "output": [5]}, {"input": "37", "output": [7]}, {"input": "19", "output": [6]}, {"input": "48", "output": [6]}, {"input": "59", "output": [9]}, {"input": "65", "output": [7]}, {"input": "73", "output": [8]}, {"input": "83", "output": [9]}, {"input": "64", "output": [6]}, {"input": "99", "output": [9]}, {"input": "100", "output": [8]}, {"input": "10000", "output": [17]}, {"input": "1500", "output": [16]}, {"input": "1534", "output": [18]}, {"input": "1978", "output": [17]}, {"input": "2763", "output": [17]}, {"input": "9999", "output": [20]}, {"input": "2673", "output": [16]}, {"input": "4578", "output": [17]}, {"input": "9876", "output": [18]}, {"input": "2659", "output": [16]}, {"input": "7777", "output": [18]}, {"input": "9364", "output": [17]}, {"input": "7280", "output": [17]}, {"input": "4998", "output": [17]}, {"input": "9283", "output": [17]}, {"input": "8234", "output": [16]}, {"input": "7622", "output": [19]}, {"input": "800", "output": [11]}, {"input": "782", "output": [13]}, {"input": "674", "output": [12]}, {"input": "4467", "output": [18]}, {"input": "1233", "output": [14]}, {"input": "3678", "output": [18]}, {"input": "7892", "output": [19]}, {"input": "5672", "output": [16]}], "starter_code": "\ndef shortest_steps_to_num(num):\n\t", "source_codes": ["\ndef shortest_steps(num):\n    steps = 0\n    while num != 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num -= 1\n        steps += 1\n    return steps\n\nnum = int(input())\nprint(shortest_steps(num))\n\n\n"], "responses": ["```python\ndef shortest_steps(num):\n    steps = 0\n    while num != 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num -= 1\n        steps += 1\n    return steps\n\nnum = int(input())\nprint(shortest_steps(num))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4453}
{"name": "3616", "description": "Define a \"prime prime\" number to be a rational number written as one prime number over another prime number: `primeA / primeB` (e.g. `7/31`)\n\nGiven a whole number `N`, generate the number of \"prime prime\" rational numbers less than 1, using only prime numbers between `0` and `N` (non inclusive).\n\nReturn the count of these \"prime primes\", and the integer part  of their sum.\n\n## Example\n\n```python\nN = 6\n\n# The \"prime primes\" less than 1 are:\n2/3, 2/5, 3/5               # count: 3\n\n2/3 + 2/5 + 3/5 = 1.6667    # integer part: 1\n\nThus, the function should return 3 and 1.\n```", "difficulty": "introductory", "id": 3616, "sample_io": [{"input": "6", "output": [[3, 1]]}], "test_list": [{"input": "6", "output": [[3, 1]]}, {"input": "4", "output": [[1, 0]]}, {"input": "10", "output": [[6, 3]]}, {"input": "65", "output": [[153, 63]]}, {"input": "0", "output": [[0, 0]]}, {"input": "1000", "output": [[14028, 6266]]}, {"input": "666", "output": [[7260, 3213]]}], "starter_code": "\ndef prime_primes(N):\n\t", "source_codes": ["\nfrom math import sqrt\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nN = int(input())\ntotal_sum = 0\ncount = 0\nfor A in range(2, N + 1):\n    if not is_prime(A):\n        continue\n    for B in range(2, N + 1):\n        if not is_prime(B):\n            continue\n        if A / B < 1:\n            count += 1\n            total_sum += A / B\n\nprint([count, int(total_sum)])\n\n\n"], "responses": ["```python\nfrom math import sqrt\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nN = int(input())\ntotal_sum = 0\ncount = 0\nfor A in range(2, N + 1):\n    if not is_prime(A):\n        continue\n    for B in range(2, N + 1):\n        if not is_prime(B):\n            continue\n        if A / B < 1:\n            count += 1\n            total_sum += A / B\n\nprint([count, int(total_sum)])\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3616}
{"name": "3439", "description": "Given an integer `n`, find two integers `a` and `b` such that:\n```Pearl\nA) a >= 0 and b >= 0\nB) a + b = n\nC) DigitSum(a) + Digitsum(b) is maximum of all possibilities.  \n```\nYou will return the digitSum(a) + digitsum(b). \n\n```\nFor example:\nsolve(29) = 11. If we take 15 + 14 = 29 and digitSum = 1 + 5 + 1 + 4 = 11. There is no larger outcome.\n```\n`n` will not exceed `10e10`.\n\nMore examples in test cases. \n\nGood luck!", "difficulty": "introductory", "id": 3439, "sample_io": [{"input": "29", "output": [11]}], "test_list": [{"input": "18", "output": [18]}, {"input": "29", "output": [11]}, {"input": "45", "output": [18]}, {"input": "1140", "output": [33]}, {"input": "7019", "output": [35]}, {"input": "50000000", "output": [68]}, {"input": "15569047737", "output": [144]}, {"input": "2452148459", "output": [116]}, {"input": "1", "output": [1]}, {"input": "0", "output": [0]}], "starter_code": "\ndef solve(n):\n\t", "source_codes": ["\ndef digitSum(num):\n    return sum(int(digit) for digit in str(num))\n\ndef solve(n):\n    max_sum = 0\n    ans = -1\n    \n    for i in range(10 ** 9 + 5):\n        j = n - i\n        \n        if i >= 0 and j >= 0:\n            curr_sum = digitSum(i) + digitSum(j)\n            \n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                ans = curr_sum\n                \n    return ans\n\n# Call the solve function with input 'n'\nprint(solve(int(input())))\n\n\n"], "responses": ["```python\ndef digitSum(num):\n    return sum(int(digit) for digit in str(num))\n\ndef solve(n):\n    max_sum = 0\n    ans = -1\n    \n    for i in range(10 ** 9 + 5):\n        j = n - i\n        \n        if i >= 0 and j >= 0:\n            curr_sum = digitSum(i) + digitSum(j)\n            \n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                ans = curr_sum\n                \n    return ans\n\n# Call the solve function with input 'n'\nprint(solve(int(input())))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3439}
{"name": "3155", "description": "Mr. Square is going on a holiday. He wants to bring 2 of his favorite squares with him, so he put them in his rectangle suitcase.\n\nWrite a function that, given the size of the squares and the suitcase, return whether the squares can fit inside the suitcase.\n```Python\nfit_in(a,b,m,n)\na,b are the sizes of the 2 squares\nm,n are the sizes of the suitcase\n```\n\n# Example\n```Python\nfit_in(1,2,3,2) should return True\nfit_in(1,2,2,1) should return False\nfit_in(3,2,3,2) should return False\nfit_in(1,2,1,2) should return False\n```", "difficulty": "introductory", "id": 3155, "sample_io": [{"input": "1\n2\n3\n2", "output": [true]}, {"input": "1\n2\n2\n1", "output": [false]}, {"input": "3\n2\n3\n2", "output": [false]}, {"input": "1\n2\n1\n2", "output": [false]}], "test_list": [{"input": "1\n2\n3\n2", "output": [true]}, {"input": "1\n2\n2\n1", "output": [false]}, {"input": "3\n2\n3\n2", "output": [false]}, {"input": "1\n2\n1\n2", "output": [false]}, {"input": "6\n5\n8\n7", "output": [false]}, {"input": "6\n6\n12\n6", "output": [true]}, {"input": "7\n1\n7\n8", "output": [true]}, {"input": "10\n10\n11\n11", "output": [false]}, {"input": "7\n2\n9\n7", "output": [true]}, {"input": "7\n2\n8\n7", "output": [false]}, {"input": "4\n1\n5\n3", "output": [false]}, {"input": "1\n2\n3\n4", "output": [true]}, {"input": "1\n2\n4\n3", "output": [true]}, {"input": "1\n3\n2\n4", "output": [false]}, {"input": "1\n3\n4\n2", "output": [false]}, {"input": "1\n4\n2\n3", "output": [false]}, {"input": "1\n4\n3\n2", "output": [false]}, {"input": "2\n1\n3\n4", "output": [true]}, {"input": "2\n1\n4\n3", "output": [true]}, {"input": "2\n3\n1\n4", "output": [false]}, {"input": "2\n3\n4\n1", "output": [false]}, {"input": "2\n4\n1\n3", "output": [false]}, {"input": "2\n4\n3\n1", "output": [false]}, {"input": "3\n2\n1\n4", "output": [false]}, {"input": "3\n2\n4\n1", "output": [false]}, {"input": "3\n1\n2\n4", "output": [false]}, {"input": "3\n1\n4\n2", "output": [false]}, {"input": "3\n4\n2\n1", "output": [false]}, {"input": "3\n4\n1\n2", "output": [false]}, {"input": "4\n2\n3\n1", "output": [false]}, {"input": "4\n2\n1\n3", "output": [false]}, {"input": "4\n3\n2\n1", "output": [false]}, {"input": "4\n3\n1\n2", "output": [false]}, {"input": "4\n1\n2\n3", "output": [false]}, {"input": "4\n1\n3\n2", "output": [false]}], "starter_code": "\ndef fit_in(a,b,m,n):\n\t", "source_codes": ["\ndef fit_in(a, b, m, n):\n    return a <= m and b <= n or (a <= n and b <= m)\n\n# Take input from standard input using `input()` function\na = int(input())\nb = int(input())\nm = int(input())\nn = int(input())\n\n# Call the function with specified parameters and print output of the function to standard output\nprint(fit_in(a, b, m, n))\n\n\n"], "responses": ["```python\ndef fit_in(a, b, m, n):\n    return a <= m and b <= n or (a <= n and b <= m)\n\n# Take input from standard input using `input()` function\na = int(input())\nb = int(input())\nm = int(input())\nn = int(input())\n\n# Call the function with specified parameters and print output of the function to standard output\nprint(fit_in(a, b, m, n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3155}
{"name": "3562", "description": "In computer science and discrete mathematics, an [inversion](https://en.wikipedia.org/wiki/Inversion_%28discrete_mathematics%29) is a pair of places in a sequence where the elements in these places are out of their natural order. So, if we use ascending order for a group of numbers, then an inversion is when larger numbers appear before lower number in a sequence.\n\nCheck out this example sequence: ```(1, 2, 5, 3, 4, 7, 6)``` and we can see here three inversions\n```5``` and ```3```; ```5``` and ```4```; ```7``` and ```6```.\n\nYou are given a sequence of numbers and you should count the number of inversions in this sequence.\n\n```Input```: A sequence as a tuple of integers.\n\n```Output```: The inversion number as an integer.\n\nExample:\n```python\n  count_inversion((1, 2, 5, 3, 4, 7, 6)) == 3\n  count_inversion((0, 1, 2, 3)) == 0\n```", "difficulty": "introductory", "id": 3562, "sample_io": [{"input": "[1, 2, 5, 3, 4, 7, 6]", "output": [3]}, {"input": "[0, 1, 2, 3]", "output": [0]}], "test_list": [{"input": "[1, 2, 3]", "output": [0]}, {"input": "[-3, -2, -1]", "output": [0]}, {"input": "[-20, 0, 20]", "output": [0]}, {"input": "[-13, 4, 8]", "output": [0]}, {"input": "[1, 3, 2]", "output": [1]}, {"input": "[-2, -3, -1]", "output": [1]}, {"input": "[-20, 20, 0]", "output": [1]}, {"input": "[-13, 9, 8]", "output": [1]}, {"input": "[3, 6, 2]", "output": [2]}, {"input": "[3, 6, 2, 7, 3]", "output": [4]}, {"input": "[26, 32, -21, 45, 21]", "output": [5]}, {"input": "[14, 12, 17, 124, 1, -12, 21, -24]", "output": [18]}, {"input": "[]", "output": [0]}, {"input": "[25, 12, 7, 4, 2, -7, -12, -22]", "output": [28]}, {"input": "[324, 123, 36, 4, -1, -72, -123]", "output": [21]}, {"input": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]", "output": [55]}, {"input": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "output": [0]}, {"input": "[3, 3, 3]", "output": [0]}, {"input": "[-5, -5, -5]", "output": [0]}, {"input": "[0, 0, 7]", "output": [0]}, {"input": "[2, 2, 8]", "output": [0]}, {"input": "[1, 3, 3, 7]", "output": [0]}], "starter_code": "\ndef count_inversion(sequence):\n\t", "source_codes": ["\ndef count_inversion(seq):\n    n = len(seq)\n    inversions = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if seq[i] > seq[j]:\n                inversions += 1\n                \n    return inversions\n\n# Take input from user\nseq = list(map(int, input()[1:-1].split(',')))\nprint(count_inversion(seq))\n\n\n"], "responses": ["```python\ndef count_inversion(seq):\n    n = len(seq)\n    inversions = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if seq[i] > seq[j]:\n                inversions += 1\n                \n    return inversions\n\n# Take input from user\nseq = list(map(int, input()[1:-1].split(',')))\nprint(count_inversion(seq))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3562}
{"name": "3883", "description": "If we alternate the vowels and consonants in the string `\"have\"`, we get the following list, arranged alphabetically:\n`['ahev', 'aveh', 'ehav', 'evah', 'vahe', 'veha']`. These are the only possibilities in which vowels and consonants are alternated. The first element, `ahev`, is alphabetically lowest. \n\nGiven a string:\n* alternate the vowels and consonants and return the lexicographically lowest element in the list\n* If any two or more vowels or consonants must follow each other, return `\"failed\"`\n* if the number of vowels and consonants are equal, the first letter of the result must be a vowel.\n\nExamples: \n\n```Haskell\nsolve(\"codewars\") = \"failed\". However you alternate vowels and consonants, two consonants must follow each other\nsolve(\"oruder\") = \"edorur\"\nsolve(\"orudere\") = \"ederoru\". This is the only option that allows you to alternate vowels & consonants.\n```\n\n```if c:\nIn C, return an allocated string even if the response is \"failed\".\n```\n\nVowels will be any of \"aeiou\". Input will be a lowercase string, no spaces. See test cases for more examples. \n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)", "difficulty": "introductory", "id": 3883, "sample_io": [{"input": "codewars", "output": ["failed"]}, {"input": "oruder", "output": ["edorur"]}, {"input": "orudere", "output": ["ederoru"]}], "test_list": [{"input": "java", "output": ["ajav"]}, {"input": "oruder", "output": ["edorur"]}, {"input": "zodiac", "output": ["acidoz"]}, {"input": "apple", "output": ["lapep"]}, {"input": "acidity", "output": ["caditiy"]}, {"input": "codewars", "output": ["failed"]}, {"input": "orudere", "output": ["ederoru"]}], "starter_code": "\ndef solve(s):\n\t", "source_codes": ["\ndef solve(s):\n    vowels = \"aeiou\"\n    n, failed = len(s), False\n    \n    if s[0] in vowels:\n        v_count = 1\n        c_count = 0\n    else:\n        v_count = 0\n        c_count = 1\n    \n    for i in range(1, n):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            v_count += 1\n            c_count = 0\n        else:\n            c_count += 1\n            if c_count >= 2:\n                failed = True\n                break\n    \n    if not failed and (n - v_count) > v_count:\n        result = \"\".join([vowels[i//2] + s[i].lower() for i in range(n)])\n    elif n == v_count:\n        if s[0] in vowels:\n            result = \"a\" + \"\".join([s[i].lower() for i in range(1, n)])\n        else:\n            result = s[0] + \"\".join([vowels[i//2] + s[i].lower() for i in range(n-1)])\n    elif (n - v_count) == v_count and not failed:\n        if s[n-1] in vowels:\n            result = \"a\" + \"\".join([s[i].lower() for i in range(1, n)])\n        else:\n            result = s[0] + \"\".join([vowels[(i//2)*2] + s[i].lower() for i in range(n-1)])\n    elif failed:\n        return \"failed\"\n    \n    return result\n\n\n"], "responses": ["```python\ndef solve(s):\n    vowels = \"aeiou\"\n    n, failed = len(s), False\n    \n    if s[0] in vowels:\n        v_count = 1\n        c_count = 0\n    else:\n        v_count = 0\n        c_count = 1\n    \n    for i in range(1, n):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            v_count += 1\n            c_count = 0\n        else:\n            c_count += 1\n            if c_count >= 2:\n                failed = True\n                break\n    \n    if not failed and (n - v_count) > v_count:\n        result = \"\".join([vowels[i//2] + s[i].lower() for i in range(n)])\n    elif n == v_count:\n        if s[0] in vowels:\n            result = \"a\" + \"\".join([s[i].lower() for i in range(1, n)])\n        else:\n            result = s[0] + \"\".join([vowels[i//2] + s[i].lower() for i in range(n-1)])\n    elif (n - v_count) == v_count and not failed:\n        if s[n-1] in vowels:\n            result = \"a\" + \"\".join([s[i].lower() for i in range(1, n)])\n        else:\n            result = s[0] + \"\".join([vowels[(i//2)*2] + s[i].lower() for i in range(n-1)])\n    elif failed:\n        return \"failed\"\n    \n    return result\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3883}
{"name": "4277", "description": "At the annual family gathering, the family likes to find the oldest living family member\u2019s age and the youngest family member\u2019s age and calculate the difference between them.\n\nYou will be given an array of all the family members' ages, in any order.  The ages will be given in whole numbers, so a baby of 5 months, will have an ascribed \u2018age\u2019 of 0.  Return a new array (a tuple in Python) with [youngest age, oldest age, difference between the youngest and oldest age].", "difficulty": "introductory", "id": 4277, "sample_io": [], "test_list": [{"input": "[16, 22, 31, 44, 3, 38, 27, 41, 88]", "output": [[3, 88, 85]]}, {"input": "[5, 8, 72, 98, 41, 16, 55]", "output": [[5, 98, 93]]}, {"input": "[57, 99, 14, 32]", "output": [[14, 99, 85]]}, {"input": "[62, 0, 3, 77, 88, 102, 26, 44, 55]", "output": [[0, 102, 102]]}, {"input": "[2, 44, 34, 67, 88, 76, 31, 67]", "output": [[2, 88, 86]]}, {"input": "[46, 86, 33, 29, 87, 47, 28, 12, 1, 4, 78, 92]", "output": [[1, 92, 91]]}, {"input": "[66, 73, 88, 24, 36, 65, 5]", "output": [[5, 88, 83]]}, {"input": "[12, 76, 49, 37, 29, 17, 3, 65, 84, 38]", "output": [[3, 84, 81]]}, {"input": "[0, 110]", "output": [[0, 110, 110]]}, {"input": "[33, 33, 33]", "output": [[33, 33, 0]]}], "starter_code": "\ndef difference_in_ages(ages):\n\t", "source_codes": ["\ndef find_family_ages(ages):\n    # Sort the list of ages in ascending order\n    sorted_ages = sorted(ages)\n\n    # The youngest age is the first element in the sorted list\n    youngest_age = sorted_ages[0]\n\n    # The oldest age is the last element in the sorted list\n    oldest_age = sorted_ages[-1]\n\n    # Calculate the difference between the oldest and youngest ages\n    age_difference = oldest_age - youngest_age\n\n    return [youngest_age, oldest_age, age_difference]\n\n\n# Take input from standard input\ninput_string = input()\n\n# Split the input string into a list of strings representing individual family members' ages\nages = input_string.split()\n\n# Convert each string in the list to an integer (age)\nages = list(map(int, ages))\n\n# Call the function with the list of ages as argument and print the output\nprint(find_family_ages(ages))\n\n\n"], "responses": ["```python\ndef find_family_ages(ages):\n    # Sort the list of ages in ascending order\n    sorted_ages = sorted(ages)\n\n    # The youngest age is the first element in the sorted list\n    youngest_age = sorted_ages[0]\n\n    # The oldest age is the last element in the sorted list\n    oldest_age = sorted_ages[-1]\n\n    # Calculate the difference between the oldest and youngest ages\n    age_difference = oldest_age - youngest_age\n\n    return [youngest_age, oldest_age, age_difference]\n\n\n# Take input from standard input\ninput_string = input()\n\n# Split the input string into a list of strings representing individual family members' ages\nages = input_string.split()\n\n# Convert each string in the list to an integer (age)\nages = list(map(int, ages))\n\n# Call the function with the list of ages as argument and print the output\nprint(find_family_ages(ages))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 4277}
{"name": "3836", "description": "Create a function that takes a number and finds the factors of it, listing them in **descending** order in an **array**.\n\nIf the parameter is not an integer or less than 1, return `-1`. In C# return an empty array.\n\nFor Example:\n`factors(54)` should return `[54, 27, 18, 9, 6, 3, 2, 1]`", "difficulty": "introductory", "id": 3836, "sample_io": [{"input": "54", "output": [[54, 27, 18, 9, 6, 3, 2, 1]]}], "test_list": [{"input": "-4", "output": [-1]}, {"input": "0", "output": [-1]}, {"input": "-12", "output": [-1]}, {"input": "a", "output": [-1]}, {"input": "4.5", "output": [-1]}, {"input": "hello world", "output": [-1]}, {"input": "54", "output": [[54, 27, 18, 9, 6, 3, 2, 1]]}, {"input": "49", "output": [[49, 7, 1]]}, {"input": "1", "output": [[1]]}], "starter_code": "\ndef factors(x):\n\t", "source_codes": ["\ndef factors(n):\n    if not isinstance(n, int) or n < 1:\n        return -1\n    else:\n        facs = []\n        for i in range(n, 0, -1):\n            if n % i == 0:\n                facs.append(i)\n        return facs\n\n# Take input from user and print the output of factors function\nn = int(input())\nresult = factors(n)\nif result == -1:\n    print(result)\nelse:\n    print(result)\n\n\n"], "responses": ["```python\ndef factors(n):\n    if not isinstance(n, int) or n < 1:\n        return -1\n    else:\n        facs = []\n        for i in range(n, 0, -1):\n            if n % i == 0:\n                facs.append(i)\n        return facs\n\n# Take input from user and print the output of factors function\nn = int(input())\nresult = factors(n)\nif result == -1:\n    print(result)\nelse:\n    print(result)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3836}
{"name": "3531", "description": "A [Mersenne prime](https://en.wikipedia.org/wiki/Mersenne_prime) is a prime number that can be represented as:\nMn = 2^(n) - 1. Therefore, every Mersenne prime is one less than a power of two. \n\nWrite a function that will return whether the given integer `n` will produce a Mersenne prime or not.\n\nThe tests will check random integers up to 2000.", "difficulty": "introductory", "id": 3531, "sample_io": [], "test_list": [{"input": "2", "output": [true]}, {"input": "3", "output": [true]}, {"input": "5", "output": [true]}, {"input": "7", "output": [true]}, {"input": "11", "output": [false]}, {"input": "13", "output": [true]}, {"input": "17", "output": [true]}, {"input": "19", "output": [true]}, {"input": "21", "output": [false]}, {"input": "23", "output": [false]}, {"input": "31", "output": [true]}, {"input": "49", "output": [false]}, {"input": "61", "output": [true]}, {"input": "89", "output": [true]}, {"input": "107", "output": [true]}, {"input": "127", "output": [true]}, {"input": "221", "output": [false]}, {"input": "521", "output": [true]}, {"input": "607", "output": [true]}, {"input": "1279", "output": [true]}], "starter_code": "\ndef valid_mersenne(n):\n\t", "source_codes": ["\ndef mersenne(n):\n    # Create a Mersenne number Mn = 2^(n) - 1\n    mers = (2 ** n) - 1\n    \n    # Check if the Mersenne number is prime using a helper function 'is_prime'\n    def is_prime(num):\n        if num < 2:\n            return False\n        \n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Return whether the Mersenne number is prime or not\n    return is_prime(mers)\n\n# Take input from standard input and store it in variable 'n'\nn = int(input())\n\n# Call the function with input value and print the result to standard output\nprint(int(mersenne(n)))\n\n\n"], "responses": ["```python\ndef mersenne(n):\n    # Create a Mersenne number Mn = 2^(n) - 1\n    mers = (2 ** n) - 1\n    \n    # Check if the Mersenne number is prime using a helper function 'is_prime'\n    def is_prime(num):\n        if num < 2:\n            return False\n        \n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Return whether the Mersenne number is prime or not\n    return is_prime(mers)\n\n# Take input from standard input and store it in variable 'n'\nn = int(input())\n\n# Call the function with input value and print the result to standard output\nprint(int(mersenne(n)))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 3531}
{"name": "1643", "description": "You are given 2 numbers is `n` and `k`. You need to find the number of integers between 1 and n (inclusive) that contains exactly `k` non-zero digit.\n\nExample1 \n\n`\nalmost_everywhere_zero(100, 1) return 19`\n\nby following condition we have 19 numbers that have k = 1 digits( not count zero ) \n` [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100]`\n\n\nExample2  \n\n`\nalmost_everywhere_zero(11, 2) return 1`\n\nwe have only `11` that has 2 digits(ten not count because zero is not count) \n` 11`\n\n\n\n\n\nconstrains\n\n\n`1\u2264n<pow(10,100)`\n\n\n`1\u2264k\u2264100`", "difficulty": "interview", "id": 1643, "sample_io": [{"input": "100\n1", "output": [19]}, {"input": "11\n2", "output": [1]}], "test_list": [{"input": "100\n1", "output": [19]}, {"input": "11\n2", "output": [1]}, {"input": "20\n2", "output": [9]}, {"input": "101\n2", "output": [82]}, {"input": "10001\n2", "output": [487]}, {"input": "10001000\n2", "output": [1729]}, {"input": "500309160\n2", "output": [2604]}, {"input": "10000000000000000000000\n3", "output": [1122660]}, {"input": "10000000000000000000000\n21", "output": [2407217760893271902598]}, {"input": "1203\n4", "output": [81]}], "starter_code": "\ndef almost_everywhere_zero(n, k):\n\t", "source_codes": ["\ndef almost_everywhere_zero(n, k):\n    # Create a string of n zeros\n    s = '0' * n\n    \n    # Initialize count for numbers with k non-zero digits\n    cnt = 0\n    \n    # Step 1: Iterate over all possible lengths of the prefix from 0 to n - k + 1\n    for i in range(n - k + 2):\n        # Get the length of the prefix\n        pre_len = i\n        \n        # Calculate the remaining digits after the prefix and pad them with zeros if necessary\n        remain_s = s[pre_len:] + '0' * (k - len(s[pre_len:]))\n        \n        # Step 2: Check if the number formed by the prefix and the remaining digits has exactly k non-zero digits\n        if sum(1 for c in remain_s if c != '0') == k:\n            cnt += 1\n    \n    return cnt\n\n# Take user input as two strings representing numbers n and k\nn, k = map(int, input().split())\n\n# Call the function with input values\nresult = almost_everywhere_zero(n, k)\n\n# Print the result\nprint(result)\n\n\n"], "responses": ["```python\ndef almost_everywhere_zero(n, k):\n    # Create a string of n zeros\n    s = '0' * n\n    \n    # Initialize count for numbers with k non-zero digits\n    cnt = 0\n    \n    # Step 1: Iterate over all possible lengths of the prefix from 0 to n - k + 1\n    for i in range(n - k + 2):\n        # Get the length of the prefix\n        pre_len = i\n        \n        # Calculate the remaining digits after the prefix and pad them with zeros if necessary\n        remain_s = s[pre_len:] + '0' * (k - len(s[pre_len:]))\n        \n        # Step 2: Check if the number formed by the prefix and the remaining digits has exactly k non-zero digits\n        if sum(1 for c in remain_s if c != '0') == k:\n            cnt += 1\n    \n    return cnt\n\n# Take user input as two strings representing numbers n and k\nn, k = map(int, input().split())\n\n# Call the function with input values\nresult = almost_everywhere_zero(n, k)\n\n# Print the result\nprint(result)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1643}
{"name": "1643", "description": "You are given 2 numbers is `n` and `k`. You need to find the number of integers between 1 and n (inclusive) that contains exactly `k` non-zero digit.\n\nExample1 \n\n`\nalmost_everywhere_zero(100, 1) return 19`\n\nby following condition we have 19 numbers that have k = 1 digits( not count zero ) \n` [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100]`\n\n\nExample2  \n\n`\nalmost_everywhere_zero(11, 2) return 1`\n\nwe have only `11` that has 2 digits(ten not count because zero is not count) \n` 11`\n\n\n\n\n\nconstrains\n\n\n`1\u2264n<pow(10,100)`\n\n\n`1\u2264k\u2264100`", "difficulty": "interview", "id": 1643, "sample_io": [{"input": "100\n1", "output": [19]}, {"input": "11\n2", "output": [1]}], "test_list": [{"input": "100\n1", "output": [19]}, {"input": "11\n2", "output": [1]}, {"input": "20\n2", "output": [9]}, {"input": "101\n2", "output": [82]}, {"input": "10001\n2", "output": [487]}, {"input": "10001000\n2", "output": [1729]}, {"input": "500309160\n2", "output": [2604]}, {"input": "10000000000000000000000\n3", "output": [1122660]}, {"input": "10000000000000000000000\n21", "output": [2407217760893271902598]}, {"input": "1203\n4", "output": [81]}], "starter_code": "\ndef almost_everywhere_zero(n, k):\n\t", "source_codes": ["\ndef almost_everywhere_zero(n, k):\n    ans = 0\n    for i in range(1, n+1):\n        t = len(str(i))\n        s = str(i).lstrip('0')\n        if (t - len(s)) == k:\n            ans += 1\n    print(ans)\n    \nn = int(input())\nk = int(input())\nalmost_everywhere_zero(n, k)\n\n\n"], "responses": ["```python\ndef almost_everywhere_zero(n, k):\n    ans = 0\n    for i in range(1, n+1):\n        t = len(str(i))\n        s = str(i).lstrip('0')\n        if (t - len(s)) == k:\n            ans += 1\n    print(ans)\n    \nn = int(input())\nk = int(input())\nalmost_everywhere_zero(n, k)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1643}
{"name": "1627", "description": "### Background\n\nI was reading a [book](http://www.amazon.co.uk/Things-Make-Do-Fourth-Dimension/dp/1846147646/) recently, \"Things to Make and Do in the Fourth Dimension\" by comedian and mathematician Matt Parker, and in the first chapter of the book Matt talks about problems he likes to solve in his head to take his mind off the fact that he is in his dentist's chair, we've all been there!\n\nThe problem he talks about relates to polydivisible numbers, and I thought a kata should be written on the subject as it's quite interesting. (Well it's interesting to me, so there!)\n\n### Polydivisib... huh what?\n\nSo what are they?\n\nA polydivisible number is divisible in an unusual way. The first digit is cleanly divisible by `1`, the first two digits are cleanly divisible by `2`, the first three by `3` and so on.\n\nThe interesting thing about polydivisiblity is that it relates to the underlying number, but not the base it is written in, so if aliens came to Earth and used base `23` (`11` fingers on one hand and `12` on the other), no matter what squiggles they use to write numbers, they would find the same numbers polydivisible!\n\n### Polydivisibilty Example:\n\nLet's do a worked example to clear up any questions ...\n\nStarting wih the number `1,232` in base `10` then:\n\n```\n 1232\n 1    /1 = 1    Yay!\n 12   /2 = 6    Yay!\n 123  /3 = 41   Yay!\n 1232 /4 = 308  Yay!\n```\n\nThus `1,232` is a polydivisible number in base `4` and above.\n\nHowever starting wih the number `123,220` and using base `10` then:\n\n```\n 123220\n 1      /1 = 1            Yay!\n 12     /2 = 6            Yay!\n 123    /3 = 41           Yay!\n 1232   /4 = 308          Yay!\n 12322  /5 = 2464.4       Oh no, that's not a round number!\n 123220 /6 = 220536.333r  Oh no, that's not a round number!\n```\n\nThus `123,220` is not a polydivisible base 10 number, but what about in another base?\n\nAgain starting wih the number `123,220` and using base `6` then:\n\n```\n base 6   base 10\n 1      = 1       -> 1     /1 = 1     Yay!\n 12     = 8       -> 8     /2 = 4     Yay!\n 123    = 51      -> 51    /3 = 17    Yay!\n 1232   = 308     -> 308   /4 = 77    Yay!\n 12322  = 1850    -> 1850  /5 = 370   Yay!\n 123220 = 11100   -> 11100 /6 = 1850  Yay!\n```\n\nThus `123,220` is a polydivisible base `6` number (and a polydivisible base `10` number when converted to `11100` in base `10`).\n\n### Kata\n\nIn this kata you must implement two methods: `is_polydivisible(n, b)` and `get_polydivisible(n, b)`.\n\nThe first `is_polydivisible(n, b)` will return `True` if `n` is polydivisible in base `b` or `False` if not.\n\nThe second `get_polydivisible(n, b)` will return the `n`th polydivisible number using base `b`, the first polydivisible number is of course always `0`.\n\nYou can assume that all inputs are valid.\n\n```if:haskell\nAll necessary arithmetic can be done in `Int` range.\n```\n\n### Kata Examples:\n\n```python\n    is_polydivisible(\"1232\", 10)   # => True\n    is_polydivisible(\"123220\", 10) # => False\n    is_polydivisible(\"123220\", 6)  # => True\n    get_polydivisible(22, 10)      # => \"32\"\n    get_polydivisible(22, 16)      # => \"1A\"\n    get_polydivisible(42, 16)      # => \"42\"\n```\n\n#### A Note on Bases\n\nThe maximum base used is base `62`, and uses characters in the following order `[0-9][A-Z][a-z]` to denote its digits, base `n` will use the first `n` characters of this sequence.\n```if-not:haskell\nA constant CHARS has been declared with this sequence for you.\n```", "difficulty": "interview", "id": 1627, "sample_io": [{"input": "1232\n10", "output": [true]}, {"input": "123220\n10", "output": [false]}, {"input": "123220\n6", "output": [true]}], "test_list": [{"input": "123\n10", "output": [true]}, {"input": "1234\n10", "output": [false]}, {"input": "12345\n10", "output": [false]}, {"input": "12365\n10", "output": [true]}, {"input": "123220\n10", "output": [false]}, {"input": "50041\n6", "output": [true]}, {"input": "140410\n6", "output": [true]}, {"input": "203230\n6", "output": [true]}, {"input": "30043052\n6", "output": [true]}], "starter_code": "\ndef is_polydivisible(s, b):\n\t", "source_codes": ["\ndef is_polydivisible(n, b):\n    def get_n_divisible_by_k(k, n):\n        base = 0\n        i = 0\n        while True:\n            if k > (base % (k ** i)) != 0:\n                break\n            else:\n                base += int(str(n)[i])\n                i += 1\n        return base\n\n    for i in range(1, b + 1):\n        n_divisible_by_i = get_n_divisible_by_k(i, n)\n        if n_divisible_by_i != int(str(n)[:i]):\n            return False\n    return True\n\n\ndef get_polydivisible(n, b):\n    def get_n_divisible_by_k(k, base):\n        i = 0\n        while True:\n            divisible_part = (base % (k ** i)) == 0\n            if not divisible_part:\n                break\n            else:\n                base += int(str(k)[i])\n                i += 1\n        return str(k)[:i] + str(get_n_divisible_by_k(k, base))\n\n    n = b\n    while True:\n        if is_polydivisible(n, b):\n            return get_n_divisible_by_k(n, 0)\n        else:\n            n += 1\n\n\n# Test the functions\nprint(is_polydivisible(\"1232\", 10))   # => True\nprint(is_polydivisible(\"123220\", 10)) # => False\nprint(is_polydivisible(\"123220\", 6))  # => True\nprint(get_polydivisible(22, 10))      # => \"32\"\nprint(get_polydivisible(22, 16))      # => \"1A\"\nprint(get_polydivisible(42, 16))      # => \"42\"\n\n\n"], "responses": ["```python\ndef is_polydivisible(n, b):\n    def get_n_divisible_by_k(k, n):\n        base = 0\n        i = 0\n        while True:\n            if k > (base % (k ** i)) != 0:\n                break\n            else:\n                base += int(str(n)[i])\n                i += 1\n        return base\n\n    for i in range(1, b + 1):\n        n_divisible_by_i = get_n_divisible_by_k(i, n)\n        if n_divisible_by_i != int(str(n)[:i]):\n            return False\n    return True\n\n\ndef get_polydivisible(n, b):\n    def get_n_divisible_by_k(k, base):\n        i = 0\n        while True:\n            divisible_part = (base % (k ** i)) == 0\n            if not divisible_part:\n                break\n            else:\n                base += int(str(k)[i])\n                i += 1\n        return str(k)[:i] + str(get_n_divisible_by_k(k, base))\n\n    n = b\n    while True:\n        if is_polydivisible(n, b):\n            return get_n_divisible_by_k(n, 0)\n        else:\n            n += 1\n\n\n# Test the functions\nprint(is_polydivisible(\"1232\", 10))   # => True\nprint(is_polydivisible(\"123220\", 10)) # => False\nprint(is_polydivisible(\"123220\", 6))  # => True\nprint(get_polydivisible(22, 10))      # => \"32\"\nprint(get_polydivisible(22, 16))      # => \"1A\"\nprint(get_polydivisible(42, 16))      # => \"42\"\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1627}
{"name": "1663", "description": "In this Kata we focus on finding a sum S(n) which is the total number of divisors taken for all natural numbers less or equal to n. More formally, we investigate the sum of n components denoted by d(1) + d(2) + ... + d(n) in which for any i starting from 1 up to n the value of d(i) tells us how many distinct numbers divide i without a remainder. \n\nYour solution should work for possibly large values of n without a timeout.\nAssume n to be greater than zero and not greater than 999 999 999 999 999.\nBrute force approaches will not be feasible options in such cases. It is fairly simple to conclude that for every n>1 there holds a recurrence S(n) = S(n-1) + d(n) with initial case S(1) = 1.\n\nFor example:\nS(1) = 1\nS(2) = 3\nS(3) = 5\nS(4) = 8\nS(5) = 10\n\nBut is the fact useful anyway? If you find it is rather not, maybe this will help: \n\nTry to convince yourself that for any natural k, the number S(k) is the same as the number of pairs (m,n) that solve the inequality mn <= k in natural numbers.\nOnce it becomes clear, we can think of a partition of all the solutions into classes just by saying that a pair (m,n) belongs to the class indexed by n.\nThe question now arises if it is possible to count solutions of n-th class. If f(n) stands for the number of solutions that belong to n-th class, it means that S(k) = f(1) + f(2) + f(3) + ...\n\nThe reasoning presented above leads us to some kind of a formula for S(k), however not necessarily the most efficient one. Can you imagine that all the solutions to inequality mn <= k can be split using sqrt(k) as pivotal item?", "difficulty": "interview", "id": 1663, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [3]}, {"input": "3", "output": [5]}, {"input": "4", "output": [8]}, {"input": "5", "output": [10]}], "test_list": [{"input": "5", "output": [10]}, {"input": "10", "output": [27]}, {"input": "20", "output": [66]}, {"input": "59", "output": [249]}, {"input": "105", "output": [510]}, {"input": "785", "output": [5364]}, {"input": "1001", "output": [7077]}, {"input": "8009", "output": [73241]}, {"input": "9999999999999", "output": [300880375389561]}, {"input": "9999999999998", "output": [300880375389537]}, {"input": "9999999999995", "output": [300880375389493]}, {"input": "9999999949950", "output": [300880373832097]}], "starter_code": "\ndef count_divisors(n):\n\t", "source_codes": ["\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n = int(input())\n\n    def count_divisors(k):\n        divisors = 1\n        for i in range(2, int(k ** 0.5) + 1):\n            if k % i == 0:\n                j = k // i\n                divisors += (j - i + 1) * 2\n        return divisors\n\n    # Calculate the sum S(n)\n    s_n = 0\n    for i in range(1, n + 1):\n        s_n += count_divisors(i)\n\n    # Print the result\n    print(s_n)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n = int(input())\n\n    def count_divisors(k):\n        divisors = 1\n        for i in range(2, int(k ** 0.5) + 1):\n            if k % i == 0:\n                j = k // i\n                divisors += (j - i + 1) * 2\n        return divisors\n\n    # Calculate the sum S(n)\n    s_n = 0\n    for i in range(1, n + 1):\n        s_n += count_divisors(i)\n\n    # Print the result\n    print(s_n)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1663}
{"name": "1640", "description": "Given two strings s1 and s2, we want to visualize how different the two strings are.\nWe will only take into account the *lowercase* letters (a to z).\nFirst let us count the frequency of each *lowercase* letters in s1 and s2.\n\n`s1 = \"A aaaa bb c\"`\n\n`s2 = \"& aaa bbb c d\"`\n\n`s1 has 4 'a', 2 'b', 1 'c'`\n\n`s2 has 3 'a', 3 'b', 1 'c', 1 'd'`\n\nSo the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2.\nIn the following we will not consider letters when the maximum of their occurrences\nis less than or equal to 1.\n\nWe can resume the differences between s1 and s2 in the following string:\n`\"1:aaaa/2:bbb\"`\nwhere `1` in `1:aaaa` stands for string s1 and `aaaa` because the maximum for `a` is 4.\nIn the same manner `2:bbb` stands for string s2 and `bbb` because the maximum for `b` is 3.\n\nThe task is to produce a string in which each *lowercase* letters of s1 or s2 appears as many times as\nits maximum if this maximum is *strictly greater than 1*; these letters will be prefixed by the \nnumber of the string where they appear with their maximum value and `:`. \nIf the maximum is in s1 as well as in s2 the prefix is `=:`.\n\nIn the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by '/'. See examples and \"Example Tests\".\n\nHopefully other examples can make this clearer.\n\n```\ns1 = \"my&friend&Paul has heavy hats! &\"\ns2 = \"my friend John has many many friends &\"\nmix(s1, s2) --> \"2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1=\"Are the kids at home? aaaaa fffff\"\ns2=\"Yes they are here! aaaaa fffff\"\nmix(s1, s2) --> \"=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\"\n```\n# Note for Swift, R, PowerShell\nThe prefix `=:` is replaced by `E:`\n``` \ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\"\n```", "difficulty": "interview", "id": 1640, "sample_io": [{"input": "my&friend&Paul has heavy hats! &\nmy friend John has many many friends &", "output": ["2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"]}, {"input": "mmmmm m nnnnn y&friend&Paul has heavy hats! &\nmy frie n d Joh n has ma n y ma n y frie n ds n&", "output": ["1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"]}, {"input": "Are the kids at home? aaaaa fffff\nYes they are here! aaaaa fffff", "output": ["=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh"]}, {"input": "mmmmm m nnnnn y&friend&Paul has heavy hats! &\nmy frie n d Joh n has ma n y ma n y frie n ds n&", "output": ["1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss"]}], "test_list": [{"input": "Are they here\nyes, they are here", "output": ["2:eeeee/2:yy/=:hh/=:rr"]}, {"input": "looping is fun but dangerous\nless dangerous than coding", "output": ["1:ooo/1:uuu/2:sss/=:nnn/1:ii/2:aa/2:dd/2:ee/=:gg"]}, {"input": " In many languages\n there's a pair of functions", "output": ["1:aaa/1:nnn/1:gg/2:ee/2:ff/2:ii/2:oo/2:rr/2:ss/2:tt"]}, {"input": "Lords of the Fallen\ngamekult", "output": ["1:ee/1:ll/1:oo"]}, {"input": "codewars\ncodewars", "output": [""]}, {"input": "A generation must confront the looming \ncodewarrs", "output": ["1:nnnnn/1:ooooo/1:tttt/1:eee/1:gg/1:ii/1:mm/=:rr"]}], "starter_code": "\ndef mix(s1, s2):\n\t", "source_codes": ["\ndef mix(s1, s2):\n    max_freq = {}\n    \n    # Function to update frequency dictionary\n    def update_freq(dictionary, string, index=0):\n        if index == len(string):\n            return\n        \n        char = string[index]\n        \n        if char.islower():\n            current_count = 0\n            \n            # Count the occurrences of the character in the string from the current position\n            for c in string[index:]:\n                if c == char:\n                    current_count += 1\n                    \n            max_freq[char] = max(max_freq.get(char, 0), current_count)\n            \n        update_freq(dictionary, string, index + 1)\n\n    # Update frequency dictionaries for both strings\n    update_freq(max_freq, s1.lower())\n    update_freq(max_freq, s2.lower())\n\n    result = []\n\n    # Add characters with maximum frequency greater than 1 to the result list\n    for char in max_freq:\n        if max_freq[char] > 1:\n            count_str = str(max_freq[char])\n            \n            # Prefix string with '=' if both strings have the character at max frequency\n            if s1.lower().count(char) == max_freq[char] == s2.lower().count(char):\n                prefix = 'E:'\n            else:\n                prefix = '1:' if char in s1.lower() else '2:'\n\n            result.append(prefix + count_str * char)\n\n    # Sort the list of strings\n    result.sort(key=lambda x: (len(x), x))\n\n    # Join the sorted strings with '/' and return the result\n    return '/'.join(result)\n\n\n# Test cases\nprint(mix(\"my&friend&Paul has heavy hats! &\", \"my friend John has many many friends &\"))\nprint(mix(\"mmmmm m nnnnn y&friend&Paul has heavy hats! &\", \"my frie n d Joh n has ma n y ma n y frie n ds n&\"))\nprint(mix(\"Are the kids at home? aaaaa fffff\", \"Yes they are here! aaaaa fffff\"))\n\ns1 = \"A aaaa bb c\"\ns2 = \"& aaa bbb c d\"\n\nmax_freq = {}\n\ndef update_freq(dictionary, string):\n    for char in string:\n        if char.islower():\n            current_count = 0\n            for c in string:\n                if c == char:\n                    current_count += 1\n            dictionary[char] = max(dictionary.get(char, 0), current_count)\n\nupdate_freq(max_freq, s1)\nupdate_freq(max_freq, s2)\n\nresult = []\n\nfor char in max_freq:\n    if max_freq[char] > 1:\n        count_str = str(max_freq[char])\n        prefix = 'E:' if char in s1 and max_freq[char] == s2.count(char) else '1:' if char in s1 else '2:'\n        result.append(prefix + count_str * char)\n\nresult.sort(key=lambda x: (len(x), x))\nprint('/'.join(result))\n\n\n"], "responses": ["```python\ndef mix(s1, s2):\n    max_freq = {}\n    \n    # Function to update frequency dictionary\n    def update_freq(dictionary, string, index=0):\n        if index == len(string):\n            return\n        \n        char = string[index]\n        \n        if char.islower():\n            current_count = 0\n            \n            # Count the occurrences of the character in the string from the current position\n            for c in string[index:]:\n                if c == char:\n                    current_count += 1\n                    \n            max_freq[char] = max(max_freq.get(char, 0), current_count)\n            \n        update_freq(dictionary, string, index + 1)\n\n    # Update frequency dictionaries for both strings\n    update_freq(max_freq, s1.lower())\n    update_freq(max_freq, s2.lower())\n\n    result = []\n\n    # Add characters with maximum frequency greater than 1 to the result list\n    for char in max_freq:\n        if max_freq[char] > 1:\n            count_str = str(max_freq[char])\n            \n            # Prefix string with '=' if both strings have the character at max frequency\n            if s1.lower().count(char) == max_freq[char] == s2.lower().count(char):\n                prefix = 'E:'\n            else:\n                prefix = '1:' if char in s1.lower() else '2:'\n\n            result.append(prefix + count_str * char)\n\n    # Sort the list of strings\n    result.sort(key=lambda x: (len(x), x))\n\n    # Join the sorted strings with '/' and return the result\n    return '/'.join(result)\n\n\n# Test cases\nprint(mix(\"my&friend&Paul has heavy hats! &\", \"my friend John has many many friends &\"))\nprint(mix(\"mmmmm m nnnnn y&friend&Paul has heavy hats! &\", \"my frie n d Joh n has ma n y ma n y frie n ds n&\"))\nprint(mix(\"Are the kids at home? aaaaa fffff\", \"Yes they are here! aaaaa fffff\"))\n\ns1 = \"A aaaa bb c\"\ns2 = \"& aaa bbb c d\"\n\nmax_freq = {}\n\ndef update_freq(dictionary, string):\n    for char in string:\n        if char.islower():\n            current_count = 0\n            for c in string:\n                if c == char:\n                    current_count += 1\n            dictionary[char] = max(dictionary.get(char, 0), current_count)\n\nupdate_freq(max_freq, s1)\nupdate_freq(max_freq, s2)\n\nresult = []\n\nfor char in max_freq:\n    if max_freq[char] > 1:\n        count_str = str(max_freq[char])\n        prefix = 'E:' if char in s1 and max_freq[char] == s2.count(char) else '1:' if char in s1 else '2:'\n        result.append(prefix + count_str * char)\n\nresult.sort(key=lambda x: (len(x), x))\nprint('/'.join(result))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1640}
{"name": "1654", "description": "To give credit where credit is due: This problem was taken from the ACMICPC-Northwest Regional Programming Contest. Thank you problem writers.\n\nYou are helping an archaeologist decipher some runes. He knows that this ancient society used a Base 10 system, and that they never start a number with a leading zero. He's figured out most of the digits as well as a few operators, but he needs your help to figure out the rest.\n\nThe professor will give you a simple math expression, of the form\n\n```\n[number][op][number]=[number]\n```\n\nHe has converted all of the runes he knows into digits. The only operators he knows are addition (`+`),subtraction(`-`), and multiplication (`*`), so those are the only ones that will appear. Each number will be in the range from -1000000 to 1000000, and will consist of only the digits 0-9, possibly a leading -, and maybe a few ?s. If there are ?s in an expression, they represent a digit rune that the professor doesn't know (never an operator, and never a leading -). All of the ?s in an expression will represent the same digit (0-9), and it won't be one of the other given digits in the expression. No number will begin with a 0 unless the number itself is  0, therefore 00 would not be a valid number. \n\nGiven an expression, figure out the value of the rune represented by the question mark. If more than one digit works, give the lowest one. If no digit works, well, that's bad news for the professor - it means that he's got some of his runes wrong. output -1 in that case.\n\nComplete the method to solve the expression to find the value of the unknown rune. The method takes a string as a paramater repressenting the expression and will return an int value representing the unknown rune or -1 if no such rune exists.\n\n~~~if:php\n**Most of the time, the professor will be able to figure out most of the runes himself, but sometimes, there may be exactly 1 rune present in the expression that the professor cannot figure out (resulting in all question marks where the digits are in the expression) so be careful ;)**\n~~~", "difficulty": "interview", "id": 1654, "sample_io": [], "test_list": [{"input": "123?45*?=?", "output": [0]}, {"input": "?*123?45=?", "output": [0]}, {"input": "??605*-63=-73???5", "output": [1]}, {"input": "123?45+?=123?45", "output": [0]}, {"input": "?8?170-1?6256=7?2?14", "output": [9]}, {"input": "?38???+595???=833444", "output": [2]}, {"input": "123?45-?=123?45", "output": [0]}, {"input": "-7715?5--484?00=-28?9?5", "output": [6]}, {"input": "50685?--1?5630=652?8?", "output": [4]}, {"input": "??+??=??", "output": [-1]}, {"input": "-?56373--9216=-?47157", "output": [8]}], "starter_code": "\ndef solve_runes(runes):\n\t", "source_codes": ["\ndef calc(a, b, op):\n    if op == '+':\n        return a + b\n    elif op == '-':\n        return a - b\n    else:\n        return a * b\n\ndef solve(expression):\n    for x in range(10):\n        temp = expression.replace('?', str(x))\n        try:\n            num1 = int(temp.split('.')[0].split('+')[0])\n            num2 = int(temp.split('.')[-1].split('+')[0])\n            op = '+' if '=>' in temp else '-'\n            a, b = num1, num2\n            if op == '+':\n                a, b = num1 + num2, 0\n            elif op == '-':\n                a, b = num1 - num2, 0\n            ans = calc(a, b, ' ')\n            if ans < -1000000 or ans > 1000000:\n                continue\n            return x\n        except (ValueError, IndexError):\n            pass\n    return -1\n\nexpression = input()\nprint(solve(expression))\n\n\n"], "responses": ["```python\ndef calc(a, b, op):\n    if op == '+':\n        return a + b\n    elif op == '-':\n        return a - b\n    else:\n        return a * b\n\ndef solve(expression):\n    for x in range(10):\n        temp = expression.replace('?', str(x))\n        try:\n            num1 = int(temp.split('.')[0].split('+')[0])\n            num2 = int(temp.split('.')[-1].split('+')[0])\n            op = '+' if '=>' in temp else '-'\n            a, b = num1, num2\n            if op == '+':\n                a, b = num1 + num2, 0\n            elif op == '-':\n                a, b = num1 - num2, 0\n            ans = calc(a, b, ' ')\n            if ans < -1000000 or ans > 1000000:\n                continue\n            return x\n        except (ValueError, IndexError):\n            pass\n    return -1\n\nexpression = input()\nprint(solve(expression))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1654}
{"name": "1616", "description": "In this kata we want to convert a string into an integer. The strings simply represent the numbers in words.\n\nExamples:\n\n* \"one\" => 1\n* \"twenty\" => 20\n* \"two hundred forty-six\" => 246\n* \"seven hundred eighty-three thousand nine hundred and nineteen\" => 783919\n\nAdditional Notes:\n\n* The minimum number is \"zero\" (inclusively)\n* The maximum number, which must be supported is 1 million (inclusively)\n* The \"and\" in e.g. \"one hundred and twenty-four\" is optional, in some cases it's present and in others it's not\n* All tested numbers are valid, you don't need to validate them", "difficulty": "interview", "id": 1616, "sample_io": [{"input": "one", "output": [1]}, {"input": "twenty", "output": [20]}, {"input": "two hundred forty-six", "output": [246]}, {"input": "seven hundred eighty-three thousand nine hundred and nineteen", "output": [783919]}], "test_list": [{"input": "zero", "output": [0]}, {"input": "one", "output": [1]}, {"input": "two", "output": [2]}, {"input": "three", "output": [3]}, {"input": "four", "output": [4]}, {"input": "five", "output": [5]}, {"input": "six", "output": [6]}, {"input": "seven", "output": [7]}, {"input": "eight", "output": [8]}, {"input": "nine", "output": [9]}, {"input": "ten", "output": [10]}, {"input": "twenty", "output": [20]}, {"input": "twenty-one", "output": [21]}, {"input": "thirty-seven", "output": [37]}, {"input": "forty-six", "output": [46]}, {"input": "fifty-nine", "output": [59]}, {"input": "sixty-eight", "output": [68]}, {"input": "seventy-two", "output": [72]}, {"input": "eighty-three", "output": [83]}, {"input": "ninety-four", "output": [94]}, {"input": "one hundred", "output": [100]}, {"input": "one hundred one", "output": [101]}, {"input": "one hundred and one", "output": [101]}, {"input": "one hundred sixty-nine", "output": [169]}, {"input": "two hundred and ninety-nine", "output": [299]}, {"input": "seven hundred thirty-six", "output": [736]}, {"input": "two thousand", "output": [2000]}, {"input": "one thousand three hundred and thirty-seven", "output": [1337]}, {"input": "ten thousand", "output": [10000]}, {"input": "twenty-six thousand three hundred and fifty-nine", "output": [26359]}, {"input": "thirty-five thousand", "output": [35000]}, {"input": "ninety-nine thousand nine hundred and ninety-nine", "output": [99999]}, {"input": "six hundred sixty-six thousand six hundred sixty-six", "output": [666666]}, {"input": "seven hundred thousand", "output": [700000]}, {"input": "two hundred thousand three", "output": [200003]}, {"input": "two hundred thousand and three", "output": [200003]}, {"input": "two hundred three thousand", "output": [203000]}, {"input": "five hundred thousand three hundred", "output": [500300]}, {"input": "eight hundred eighty-eight thousand eight hundred and eighty-eight", "output": [888888]}, {"input": "one million", "output": [1000000]}], "starter_code": "\ndef parse_int(string):\n\t", "source_codes": ["\nclass WordToNumber:\n    def __init__(self):\n        self.words = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9,\n            'ten': 10,\n            'eleven': 11,\n            'twelve': 12,\n            'thirteen': 13,\n            'fourteen': 14,\n            'fifteen': 15,\n            'sixteen': 16,\n            'seventeen': 17,\n            'eighteen': 18,\n            'nineteen': 19\n        }\n        self.units = {\n            'ten': 10,\n            'twenty': 20,\n            'thirty': 30,\n            'forty': 40,\n            'fifty': 50,\n            'sixty': 60,\n            'seventy': 70,\n            'eighty': 80,\n            'ninety': 90\n        }\n        self.tens = {\n            'hundred': 100,\n            'thousand': 1000,\n            'million': 10**6\n        }\n\n    def get_value(self, word):\n        if word in self.words:\n            return self.words[word]\n        elif word in self.units:\n            return self.units[word]\n        else:\n            return None\n\n    def calculate_number(self, words):\n        number = 0\n        i = 0\n        while i < len(words):\n            if words[i:i+7] == ['hundred', 'and']:\n                number += self.get_value('hundred') * self.get_value(\n                    words[i+8])\n                i += 9\n            elif words[i:i+6] == ['thousand', 'and']:\n                number += self.get_value('thousand') * self.get_value(\n                    words[i+7])\n                i += 8\n            elif words[i:i+5] == ['million', 'and']:\n                number += self.get_value('million') * self.get_value(\n                    words[i+6])\n                i += 7\n            else:\n                word = ''\n                while i < len(words) and words[i].isdigit():\n                    word += words[i]\n                    i += 1\n                if word == '':\n                    break\n\n                number += self.get_value(word)\n        return int(number)\n\nword_to_number = WordToNumber()\ns = input().split(' ')\nprint(word_to_number.calculate_number(s))\n\n\n"], "responses": ["```python\nclass WordToNumber:\n    def __init__(self):\n        self.words = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9,\n            'ten': 10,\n            'eleven': 11,\n            'twelve': 12,\n            'thirteen': 13,\n            'fourteen': 14,\n            'fifteen': 15,\n            'sixteen': 16,\n            'seventeen': 17,\n            'eighteen': 18,\n            'nineteen': 19\n        }\n        self.units = {\n            'ten': 10,\n            'twenty': 20,\n            'thirty': 30,\n            'forty': 40,\n            'fifty': 50,\n            'sixty': 60,\n            'seventy': 70,\n            'eighty': 80,\n            'ninety': 90\n        }\n        self.tens = {\n            'hundred': 100,\n            'thousand': 1000,\n            'million': 10**6\n        }\n\n    def get_value(self, word):\n        if word in self.words:\n            return self.words[word]\n        elif word in self.units:\n            return self.units[word]\n        else:\n            return None\n\n    def calculate_number(self, words):\n        number = 0\n        i = 0\n        while i < len(words):\n            if words[i:i+7] == ['hundred', 'and']:\n                number += self.get_value('hundred') * self.get_value(\n                    words[i+8])\n                i += 9\n            elif words[i:i+6] == ['thousand', 'and']:\n                number += self.get_value('thousand') * self.get_value(\n                    words[i+7])\n                i += 8\n            elif words[i:i+5] == ['million', 'and']:\n                number += self.get_value('million') * self.get_value(\n                    words[i+6])\n                i += 7\n            else:\n                word = ''\n                while i < len(words) and words[i].isdigit():\n                    word += words[i]\n                    i += 1\n                if word == '':\n                    break\n\n                number += self.get_value(word)\n        return int(number)\n\nword_to_number = WordToNumber()\ns = input().split(' ')\nprint(word_to_number.calculate_number(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1616}
{"name": "1642", "description": "## Task\n\nGiven a positive integer, `n`, return the number of possible ways such that `k` positive integers multiply to `n`. Order matters.\n\n**Examples**\n```\nn = 24\nk = 2\n(1, 24), (2, 12), (3, 8), (4, 6), (6, 4), (8, 3), (12, 2), (24, 1) -> 8\n\nn = 100\nk = 1\n100 -> 1\n\nn = 20\nk = 3\n(1, 1, 20), (1, 2, 10), (1, 4, 5), (1, 5, 4), (1, 10, 2), (1, 20, 1),\n(2, 1, 10), (2, 2, 5), (2, 5, 2), (2, 10, 1), (4, 1, 5), (4, 5, 1),\n(5, 1, 4), (5, 2, 2), (5, 4, 1), (10, 1, 2), (10, 2, 1), (20, 1, 1) -> 18\n```\n**Constraints**\n`1 <= n <= 500_000_000`\nand `1 <= k <= 1000`", "difficulty": "interview", "id": 1642, "sample_io": [{"input": "24\n2", "output": [8]}, {"input": "100\n1", "output": [1]}, {"input": "20\n3", "output": [18]}], "test_list": [{"input": "24\n2", "output": [8]}, {"input": "100\n1", "output": [1]}, {"input": "20\n3", "output": [18]}, {"input": "1\n2", "output": [1]}, {"input": "1000000\n3", "output": [784]}, {"input": "10\n2", "output": [4]}, {"input": "36\n4", "output": [100]}], "starter_code": "\ndef multiply(n, k):\n\t", "source_codes": ["\nfrom math import gcd, inf\nimport bisect\nfrom collections import defaultdict as dd, deque\nfrom functools import reduce\nimport random\nimport sys\n\ndef I():\n    return input()\ndef II():\n    return int(input())\ndef MII():\n    return map(int, input().split())\ndef LI():\n    return list(input().split())\ndef LII():\n    return list(map(int, input().split()))\ndef GMI():\n    return map(lambda x: int(x) - 1, input().split())\n\nmod = 998244353\n\ninf_int = 2280000000080000005\ninf_float = float('inf')\n\nfrom itertools import permutations, combinations, accumulate, product\nfrom heapq import heappush, heappop, heapify\nimport operator as op\nimport functools as fn\nimport re\n\ndef check(s):\n    return reduce(op.mul, s, 1)\n\nn, k = MII()\n\nf = [i for i in range(n+1)]\nfor i in range(2, n+1):\n    if f[i] == i:\n        for j in range(i, n+1, i):\n            f[j] //= i\n            while f[j]%i==0: f[j]//=i\n\nans = 0\nfor s in product(range(k+1), repeat=n+1):\n    if sum(x*y for x,y in zip(s,f)) == n:\n        ans += check(s)\n\nprint(ans)\n\n\n"], "responses": ["```python\nfrom math import gcd, inf\nimport bisect\nfrom collections import defaultdict as dd, deque\nfrom functools import reduce\nimport random\nimport sys\n\ndef I():\n    return input()\ndef II():\n    return int(input())\ndef MII():\n    return map(int, input().split())\ndef LI():\n    return list(input().split())\ndef LII():\n    return list(map(int, input().split()))\ndef GMI():\n    return map(lambda x: int(x) - 1, input().split())\n\nmod = 998244353\n\ninf_int = 2280000000080000005\ninf_float = float('inf')\n\nfrom itertools import permutations, combinations, accumulate, product\nfrom heapq import heappush, heappop, heapify\nimport operator as op\nimport functools as fn\nimport re\n\ndef check(s):\n    return reduce(op.mul, s, 1)\n\nn, k = MII()\n\nf = [i for i in range(n+1)]\nfor i in range(2, n+1):\n    if f[i] == i:\n        for j in range(i, n+1, i):\n            f[j] //= i\n            while f[j]%i==0: f[j]//=i\n\nans = 0\nfor s in product(range(k+1), repeat=n+1):\n    if sum(x*y for x,y in zip(s,f)) == n:\n        ans += check(s)\n\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1642}
{"name": "1665", "description": "Complete the function/method (depending on the language) to return `true`/`True` when its argument is an array that has the same nesting structures and same corresponding length of nested arrays as the first array.\n\nFor example:\n\n```python\n# should return True\nsame_structure_as([ 1, 1, 1 ], [ 2, 2, 2 ] )\nsame_structure_as([ 1, [ 1, 1 ] ], [ 2, [ 2, 2 ] ] )\n\n# should return False \nsame_structure_as([ 1, [ 1, 1 ] ], [ [ 2, 2 ], 2 ] )\nsame_structure_as([ 1, [ 1, 1 ] ], [ [ 2 ], 2 ] )\n\n# should return True\nsame_structure_as([ [ [ ], [ ] ] ], [ [ [ ], [ ] ] ] )\n\n# should return False\nsame_structure_as([ [ [ ], [ ] ] ], [ [ 1, 1 ] ] )\n```\n\n~~~if:javascript\nFor your convenience, there is already a function 'isArray(o)' declared and defined that returns true if its argument is an array, false otherwise.\n~~~\n\n~~~if:php\nYou may assume that all arrays passed in will be non-associative.\n~~~", "difficulty": "interview", "id": 1665, "sample_io": [{"input": "[1, 1, 1]\n[2, 2, 2]", "output": [true]}, {"input": "[1, [1, 1]]\n[2, [2, 2]]", "output": [true]}, {"input": "[1, [1, 1]]\n[[2, 2], 2]", "output": [false]}, {"input": "[1, [1, 1]]\n[[2], 2]", "output": [false]}, {"input": "[[[], []]]\n[[[], []]]", "output": [true]}, {"input": "[[[], []]]\n[[1, 1]]", "output": [false]}], "test_list": [{"input": "[1, [1, 1]]\n[[2, 2], 2]", "output": [false]}, {"input": "[1, [1, 1]]\n[2, [2]]", "output": [false]}, {"input": "[[[], []]]\n[[[], []]]", "output": [true]}, {"input": "[[[], []]]\n[[1, 1]]", "output": [false]}, {"input": "[1, [[[1]]]]\n[2, [[[2]]]]", "output": [true]}, {"input": "[]\n1", "output": [false]}, {"input": "[]\n{}", "output": [false]}, {"input": "[1, '[', ']']\n['[', ']', 1]", "output": [true]}], "starter_code": "\ndef same_structure_as(a, b):\n\t", "source_codes": ["\ndef same_structure_as(a, b):\n    if not isinstance(a, list) or not isinstance(b, list):\n        return False\n    \n    if len(a) != len(b):\n        return False\n    \n    for i in range(len(a)):\n        if not same_structure_as(a[i], b[i]):\n            return False\n            \n    return True\n\n\n"], "responses": ["```python\ndef same_structure_as(a, b):\n    if not isinstance(a, list) or not isinstance(b, list):\n        return False\n    \n    if len(a) != len(b):\n        return False\n    \n    for i in range(len(a)):\n        if not same_structure_as(a[i], b[i]):\n            return False\n            \n    return True\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1665}
{"name": "1648", "description": "This is the performance version of [this kata](https://www.codewars.com/kata/59afff65f1c8274f270020f5).\n\n---\n\nImagine two rings with numbers on them. The inner ring spins clockwise and the outer ring spins anti-clockwise. We start with both rings aligned on 0 at the top, and on each move we spin each ring by 1. How many moves will it take before both rings show the same number at the top again?\n\nThe inner ring has integers from 0 to innerMax and the outer ring has integers from 0 to outerMax, where innerMax and outerMax are integers >= 1.\n\n```\ne.g. if innerMax is 2 and outerMax is 3 then after\n1 move: inner = 2, outer = 1\n2 moves: inner = 1, outer = 2\n3 moves: inner = 0, outer = 3\n4 moves: inner = 2, outer = 0\n5 moves: inner = 1, outer = 1\nTherefore it takes 5 moves for the two rings to reach the same number\nTherefore spinningRings(2, 3) = 5\n```\n```\ne.g. if innerMax is 3 and outerMax is 2 then after\n1 move: inner = 3, outer = 1\n2 moves: inner = 2, outer = 2\nTherefore it takes 2 moves for the two rings to reach the same number\nspinningRings(3, 2) = 2\n```\n\n---\n\nTest input range:\n\n- `100` tests with `1 <= innerMax, outerMax <= 10000`\n- `400` tests with `1 <= innerMax, outerMax <= 2^48`", "difficulty": "interview", "id": 1648, "sample_io": [{"input": "2\n3", "output": [5]}, {"input": "3\n2", "output": [2]}], "test_list": [{"input": "5\n5", "output": [3]}, {"input": "2\n10", "output": [13]}, {"input": "10\n2", "output": [10]}, {"input": "7\n9", "output": [4]}, {"input": "1\n1", "output": [1]}, {"input": "16777216\n14348907", "output": [23951671]}], "starter_code": "\ndef spinning_rings(inner_max, outer_max):\n\t", "source_codes": ["\ndef spinningRings(innerMax, outerMax):\n    return (innerMax + 1) * (outerMax + 1)\n\nprint(spinningRings(2, 3))\nprint(spinningRings(3, 2))\n\n\n"], "responses": ["```python\ndef spinningRings(innerMax, outerMax):\n    return (innerMax + 1) * (outerMax + 1)\n\nprint(spinningRings(2, 3))\nprint(spinningRings(3, 2))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1648}
{"name": "1617", "description": "I started this as a joke among friends, telling that converting numbers to other integer bases is for n00bs, while an actual coder at least converts numbers to more complex bases like [pi (or \u03c0 or however you wish to spell it in your language)](http://en.wikipedia.org/wiki/Pi), so they dared me proving I was better.\n\nAnd I did it in few hours, discovering that what I started as a joke actually has [some math ground and application (particularly the conversion to base pi, it seems)](http://en.wikipedia.org/wiki/Non-integer_representation).\n\nThat said, now I am daring you to do the same, that is to build a function so that it takes a **number** (any number, you are warned!) and optionally the **number of decimals** (default: 0) and a **base** (default: pi), returning the proper conversion **as a string**:\n\n#Note\nIn Java there is no easy way with optional parameters so all three parameters will be given; the same in C# because, as of now, the used version is not known. \n\n```python\nconverter(13) #returns '103'\nconverter(13,3) #returns '103.010'\nconverter(-13,0,2) #returns '-1101'\n```\n\nI know most of the world uses a comma as a [decimal mark](http://en.wikipedia.org/wiki/Decimal_mark), but as English language and culture are *de facto* the Esperanto of us coders, we will stick to our common glorious traditions and uses, adopting the trivial dot (\".\") as decimal separator; if the absolute value of the result is <1, you have of course to put one (and only one) leading 0 before the decimal separator.\n\nFinally, you may assume that decimals if provided will always be >= 0 and that no test base will be smaller than 2 (because, you know, converting to base 1 is pretty lame) or greater than 36; as usual, for digits greater than 9 you can use uppercase alphabet letter, so your base of numeration is going to be: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n\nThat is my first 3-languages-kata, so I count on you all to give me extensive feedback, no matter how harsh it may sound, so to improve myself even further :)", "difficulty": "interview", "id": 1617, "sample_io": [{"input": "13", "output": ["103"]}, {"input": "13\n3", "output": ["103.010"]}, {"input": "-13\n0\n2", "output": ["-1101"]}], "test_list": [{"input": "13", "output": ["103"]}, {"input": "10", "output": ["100"]}, {"input": "13\n3", "output": ["103.010"]}, {"input": "13\n0\n8", "output": ["15"]}, {"input": "10\n0\n16", "output": ["A"]}, {"input": "10000\n4\n13", "output": ["4723.0000"]}, {"input": "7\n0\n19", "output": ["7"]}, {"input": "13.5\n4\n16", "output": ["D.8000"]}, {"input": "10.81\n0\n16", "output": ["A"]}, {"input": "1\n2\n2", "output": ["1.00"]}, {"input": "-10\n0\n23", "output": ["-A"]}, {"input": "0\n4\n26", "output": ["0.0000"]}, {"input": "-15.5\n2\n23", "output": ["-F.BB"]}, {"input": "13\n0\n10", "output": ["13"]}, {"input": "5.5\n1\n10", "output": ["5.5"]}], "starter_code": "\ndef converter(n, decimals=0, base=pi):\n\t", "source_codes": ["\nimport decimal\ndef converter(num, decimals=0, base=16):\n    if num == 0:\n        return '0'\n    \n    d = decimal.Decimal(str(abs(num)))\n    if decimals > 0:\n        result = str(d.quantize(decimal.Decimal('1.' + '0' * decimals))).replace('.', '')\n    else:\n        result = str(int(d))\n        \n    alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    base_result = ''\n    \n    while num != 0:\n        remainder = abs(num) % base\n        base_result = alphabet[remainder] + base_result\n        num //= base\n        \n    if len(base_result) < len(result):\n        base_result += '0' * (len(result) - len(base_result))\n        \n    return result.zfill(max(len(result), len(base_result)))[:max(len(result), len(base_result))] + base_result[-min(len(result), len(base_result)):]\n\nnum = int(input())\nprint(converter(num))\n\n\n"], "responses": ["```python\nimport decimal\ndef converter(num, decimals=0, base=16):\n    if num == 0:\n        return '0'\n    \n    d = decimal.Decimal(str(abs(num)))\n    if decimals > 0:\n        result = str(d.quantize(decimal.Decimal('1.' + '0' * decimals))).replace('.', '')\n    else:\n        result = str(int(d))\n        \n    alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    base_result = ''\n    \n    while num != 0:\n        remainder = abs(num) % base\n        base_result = alphabet[remainder] + base_result\n        num //= base\n        \n    if len(base_result) < len(result):\n        base_result += '0' * (len(result) - len(base_result))\n        \n    return result.zfill(max(len(result), len(base_result)))[:max(len(result), len(base_result))] + base_result[-min(len(result), len(base_result)):]\n\nnum = int(input())\nprint(converter(num))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1617}
{"name": "1660", "description": "When we attended middle school were asked to simplify mathematical expressions like \"3x-yx+2xy-x\" (or usually bigger), and that was easy-peasy (\"2x+xy\"). But tell that to your pc and we'll see! \n\nWrite a function: `simplify`, that takes a string in input, representing a *multilinear non-constant polynomial in integers coefficients* (like `\"3x-zx+2xy-x\"`), and returns another string as output where the same expression has been simplified in the following way ( `->` means application of `simplify`):\n\n- All possible sums and subtraction of equivalent monomials (\"xy==yx\") has been done, e.g.: `\"cb+cba\" -> \"bc+abc\"`, `\"2xy-yx\" -> \"xy\"`, `\"-a+5ab+3a-c-2a\" -> \"-c+5ab\"`\n\n- All monomials appears in order of increasing number of variables, e.g.: `\"-abc+3a+2ac\" -> \"3a+2ac-abc\"`, `\"xyz-xz\" -> \"-xz+xyz\"`\n \n- If two monomials have the same number of variables, they appears in lexicographic order, e.g.: `\"a+ca-ab\" -> \"a-ab+ac\"`, `\"xzy+zby\" ->\"byz+xyz\"`\n  \n- There is no leading `+` sign if the first coefficient is positive, e.g.: `\"-y+x\" -> \"x-y\"`, but no restrictions for `-`:  `\"y-x\" ->\"-x+y\"`\n\n---\n\n__N.B.__ to keep it simplest, the string in input is restricted to represent only *multilinear non-constant polynomials*, so you won't find something like `-3+yx^2'. **Multilinear** means in this context: **of degree 1 on each variable**.\n\n**Warning**: the string in input can contain arbitrary variables represented by lowercase characters in the english alphabet.\n\n__Good Work :)__", "difficulty": "interview", "id": 1660, "sample_io": [{"input": "cb+cba", "output": ["bc+abc"]}, {"input": "2xy-yx", "output": ["xy"]}, {"input": "-a+5ab+3a-c-2a", "output": ["-c+5ab"]}, {"input": "-abc+3a+2ac", "output": ["3a+2ac-abc"]}, {"input": "xyz-xz", "output": ["-xz+xyz"]}, {"input": "a+ca-ab", "output": ["a-ab+ac"]}, {"input": "xzy+zby", "output": ["byz+xyz"]}, {"input": "-y+x", "output": ["x-y"]}, {"input": "y-x", "output": ["-x+y"]}], "test_list": [{"input": "dc+dcba", "output": ["cd+abcd"]}, {"input": "2xy-yx", "output": ["xy"]}, {"input": "-a+5ab+3a-c-2a", "output": ["-c+5ab"]}, {"input": "-abc+3a+2ac", "output": ["3a+2ac-abc"]}, {"input": "xyz-xz", "output": ["-xz+xyz"]}, {"input": "a+ca-ab", "output": ["a-ab+ac"]}, {"input": "xzy+zby", "output": ["byz+xyz"]}, {"input": "-y+x", "output": ["x-y"]}, {"input": "y-x", "output": ["-x+y"]}, {"input": "3a+b+4ac+bc-ab+3a-cb-a-a", "output": ["4a+b-ab+4ac"]}, {"input": "+n-5hn+7tjhn-4nh-3n-6hnjt+2jhn+9hn", "output": ["-2n+2hjn+hjnt"]}, {"input": "-8fk+5kv-4yk+7kf-qk+yqv-3vqy+4ky+4kf+yvqkf", "output": ["3fk-kq+5kv-2qvy+fkqvy"]}], "starter_code": "\ndef simplify(poly):\n\t", "source_codes": ["\nfrom collections import OrderedDict\nimport re\n\ndef simplify(poly):\n    # Remove any whitespace and split into coefficients and variables\n    terms = re.findall(r'([+-]?\\d*)([a-z]+)', poly)\n    \n    # Initialize an ordered dictionary to store the simplified terms\n    simplified_terms = OrderedDict()\n    \n    # Iterate over each term\n    for coeff, var in terms:\n        # If the coefficient is '-', add it to the end of the dictionary\n        if coeff == '-':\n            coeff = -1\n        else:\n            coeff = int(coeff or 1)\n        \n        # Split the variable into individual variables\n        vars = re.findall(r'[a-z]', var)\n        \n        # Convert each variable to a tuple of its appearance count and lexicographic order\n        vars = tuple((i, vars[i]) for i in range(len(vars)))\n        \n        # If the term is already in the dictionary, add the coefficients\n        if vars in simplified_terms:\n            simplified_terms[vars] += coeff\n        else:\n            simplified_terms[vars] = coeff\n    \n    # Sort the terms by their appearance count and lexicographic order\n    sorted_terms = sorted(simplified_terms.items())\n    \n    # Join the terms into a string and return the result\n    return ''.join(f'{coeff}{var}' if coeff != 1 or var == 'x' else var for coeff, var in sorted_terms)\n\n# Take input from standard input\npoly = input()\n\n# Remove any leading '+' signs and split into individual terms\nterms = re.split(r'\\+', poly.lstrip('+'))\n    \n# Apply the simplify function to each term\nsimplified_terms = ' + '.join(simplify(term) for term in terms)\n    \n# Print the result\nprint(simplified_terms)\n\n\n"], "responses": ["```python\nfrom collections import OrderedDict\nimport re\n\ndef simplify(poly):\n    # Remove any whitespace and split into coefficients and variables\n    terms = re.findall(r'([+-]?\\d*)([a-z]+)', poly)\n    \n    # Initialize an ordered dictionary to store the simplified terms\n    simplified_terms = OrderedDict()\n    \n    # Iterate over each term\n    for coeff, var in terms:\n        # If the coefficient is '-', add it to the end of the dictionary\n        if coeff == '-':\n            coeff = -1\n        else:\n            coeff = int(coeff or 1)\n        \n        # Split the variable into individual variables\n        vars = re.findall(r'[a-z]', var)\n        \n        # Convert each variable to a tuple of its appearance count and lexicographic order\n        vars = tuple((i, vars[i]) for i in range(len(vars)))\n        \n        # If the term is already in the dictionary, add the coefficients\n        if vars in simplified_terms:\n            simplified_terms[vars] += coeff\n        else:\n            simplified_terms[vars] = coeff\n    \n    # Sort the terms by their appearance count and lexicographic order\n    sorted_terms = sorted(simplified_terms.items())\n    \n    # Join the terms into a string and return the result\n    return ''.join(f'{coeff}{var}' if coeff != 1 or var == 'x' else var for coeff, var in sorted_terms)\n\n# Take input from standard input\npoly = input()\n\n# Remove any leading '+' signs and split into individual terms\nterms = re.split(r'\\+', poly.lstrip('+'))\n    \n# Apply the simplify function to each term\nsimplified_terms = ' + '.join(simplify(term) for term in terms)\n    \n# Print the result\nprint(simplified_terms)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1660}
{"name": "1613", "description": "Complete the solution so that it strips all text that follows any of a set of comment markers passed in. Any whitespace at the end of the line should also be stripped out. \n\n**Example:**\n\nGiven an input string of:\n```\napples, pears # and bananas\ngrapes\nbananas !apples\n```\n\nThe output expected would be:\n```\napples, pears\ngrapes\nbananas\n```\n\nThe code would be called like so:\n\n```python\nresult = solution(\"apples, pears # and bananas\\ngrapes\\nbananas !apples\", [\"#\", \"!\"])\n# result should == \"apples, pears\\ngrapes\\nbananas\"\n\n```", "difficulty": "interview", "id": 1613, "sample_io": [{"input": "apples, pears # and bananas\ngrapes\nbananas !apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}], "test_list": [{"input": "apples, pears # and bananas\ngrapes\nbananas !apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}, {"input": "a #b\nc\nd $e f g\n['#', '$']", "output": ["a\nc\nd"]}, {"input": "apples, pears # and bananas\ngrapes\nbananas !#apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}, {"input": "apples, pears # and bananas\ngrapes\nbananas #!apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}, {"input": "apples, pears # and bananas\ngrapes\navocado @apples\n['@', '!']", "output": ["apples, pears # and bananas\ngrapes\navocado"]}, {"input": "apples, pears \u00a7 and bananas\ngrapes\navocado *apples\n['*', '\u00a7']", "output": ["apples, pears\ngrapes\navocado"]}, {"input": "\n['#', '!']", "output": [""]}, {"input": "#\n['#', '!']", "output": [""]}, {"input": "\n\u00a7\n['#', '\u00a7']", "output": ["\n"]}, {"input": "apples, pears # and bananas\ngrapes\nbananas !apples\n[]", "output": ["apples, pears # and bananas\ngrapes\nbananas !apples"]}], "starter_code": "\ndef solution(string,markers):\n\t", "source_codes": ["\ndef solution(s, comment_markers):\n    # Split the input string into lines (strings)\n    lines = s.split('\\n')\n\n    # Strip whitespace from each line and join back together with newline characters\n    lines = [line.rstrip() for line in lines]\n\n    # Initialize an empty list to store cleaned lines\n    cleaned_lines = []\n\n    # Iterate over each line\n    for line in lines:\n        # Initialize a flag to indicate if the line has been modified (i.e., had comments stripped)\n        modified = False\n\n        # Iterate over each comment marker\n        for marker in comment_markers:\n            # Find the index of the first occurrence of the marker\n            idx = line.find(marker)\n\n            # If the marker is found, remove everything after it and mark the line as modified\n            if idx != -1:\n                cleaned_line = line[:idx].rstrip()\n                modified = True\n                break\n\n        # If the line was modified, replace it with the cleaned version; otherwise use the original line\n        cleaned_lines.append(cleaned_line if modified else line)\n\n    # Join all cleaned lines back together with newline characters and return the result\n    return '\\n'.join(cleaned_lines)\n\n\n"], "responses": ["```python\ndef solution(s, comment_markers):\n    # Split the input string into lines (strings)\n    lines = s.split('\\n')\n\n    # Strip whitespace from each line and join back together with newline characters\n    lines = [line.rstrip() for line in lines]\n\n    # Initialize an empty list to store cleaned lines\n    cleaned_lines = []\n\n    # Iterate over each line\n    for line in lines:\n        # Initialize a flag to indicate if the line has been modified (i.e., had comments stripped)\n        modified = False\n\n        # Iterate over each comment marker\n        for marker in comment_markers:\n            # Find the index of the first occurrence of the marker\n            idx = line.find(marker)\n\n            # If the marker is found, remove everything after it and mark the line as modified\n            if idx != -1:\n                cleaned_line = line[:idx].rstrip()\n                modified = True\n                break\n\n        # If the line was modified, replace it with the cleaned version; otherwise use the original line\n        cleaned_lines.append(cleaned_line if modified else line)\n\n    # Join all cleaned lines back together with newline characters and return the result\n    return '\\n'.join(cleaned_lines)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1613}
{"name": "1630", "description": "Story:\nIn the realm of numbers, the apocalypse has arrived. Hordes of zombie numbers have infiltrated and are ready to turn everything into undead. The properties of zombies are truly apocalyptic: they reproduce themselves unlimitedly and freely interact with each other. Anyone who equals them is doomed. Out of an infinite number of natural numbers, only a few remain. This world needs a hero who leads remaining numbers in hope for survival: The highest number to lead those who still remain.\n\nBriefing:\nThere is a list of positive natural numbers. Find the largest number that cannot be represented as the sum of this numbers, given that each number can be added unlimited times. Return this number, either 0 if there are no such numbers, or -1 if there are an infinite number of them.\n\nExample:\n```\nLet's say [3,4] are given numbers. Lets check each number one by one:\n1 - (no solution) - good\n2 - (no solution) - good\n3 = 3 won't go\n4 = 4 won't go\n5 - (no solution) - good\n6 = 3+3 won't go\n7 = 3+4 won't go\n8 = 4+4 won't go\n9 = 3+3+3 won't go\n10 = 3+3+4 won't go\n11 = 3+4+4 won't go\n13 = 3+3+3+4 won't go\n```\n...and so on. So 5 is the biggest 'good'. return 5\n\nTest specs:\nRandom cases will input up to 10 numbers with up to 1000 value\n\nSpecial thanks:\nThanks to Voile-sama, mathsisfun-sama, and Avanta-sama for heavy assistance. And to everyone who tried and beaten the kata ^_^", "difficulty": "interview", "id": 1630, "sample_io": [{"input": "[3,4]", "output": [5]}], "test_list": [{"input": "[7, 11]", "output": [59]}, {"input": "[1, 7, 15]", "output": [0]}, {"input": "[2, 10]", "output": [-1]}, {"input": "[687, 829, 998]", "output": [45664]}, {"input": "[]", "output": [-1]}, {"input": "[1]", "output": [0]}], "starter_code": "\ndef survivor(zombies):\n\t", "source_codes": ["\nfrom itertools import chain, repeat\n\ndef is_possible(n):\n    current = 0\n    for x in n:\n        if current + x >= 5:\n            return False\n        current += x\n    return True\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef main():\n    nums = list(map(int, input()[1:-1].split(',')))\n    n = max(nums)\n    root = Node(n)\n\n    for num in nums:\n        node = root\n        current = 0\n        while node:\n            if current + num >= 5 and not is_possible([num]):\n                return -1\n            if current + num < 5:\n                if current + num == n: break\n                current += num\n                if not node.left:\n                    node.left = Node(n)\n                node = node.left\n            else:\n                node.right = None\n                break\n\n    res = root.value\n    while True:\n        node = root.right\n        if is_possible([node.value]):\n            return -1\n        if not node.right or (node.right and is_possible([node.right.value])):\n            res += 5\n            if current + num < 5: current += num\n            else:\n                if not node.left:\n                    node.left = Node(n)\n                node = node.left\n                current += num\n            while node:\n                if current + num >= 5 and not is_possible([num]):\n                    return -1\n                if current + num == n: break\n                current += num\n                if not node.left:\n                    node.left = Node(n)\n                node = node.left\n\n        res += node.value\n    print(res)\n\nmain()\n\n\n"], "responses": ["```python\nfrom itertools import chain, repeat\n\ndef is_possible(n):\n    current = 0\n    for x in n:\n        if current + x >= 5:\n            return False\n        current += x\n    return True\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef main():\n    nums = list(map(int, input()[1:-1].split(',')))\n    n = max(nums)\n    root = Node(n)\n\n    for num in nums:\n        node = root\n        current = 0\n        while node:\n            if current + num >= 5 and not is_possible([num]):\n                return -1\n            if current + num < 5:\n                if current + num == n: break\n                current += num\n                if not node.left:\n                    node.left = Node(n)\n                node = node.left\n            else:\n                node.right = None\n                break\n\n    res = root.value\n    while True:\n        node = root.right\n        if is_possible([node.value]):\n            return -1\n        if not node.right or (node.right and is_possible([node.right.value])):\n            res += 5\n            if current + num < 5: current += num\n            else:\n                if not node.left:\n                    node.left = Node(n)\n                node = node.left\n                current += num\n            while node:\n                if current + num >= 5 and not is_possible([num]):\n                    return -1\n                if current + num == n: break\n                current += num\n                if not node.left:\n                    node.left = Node(n)\n                node = node.left\n\n        res += node.value\n    print(res)\n\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1630}
{"name": "1668", "description": "Write a function that takes a positive integer and returns the next smaller positive integer containing the same digits.\n\nFor example:\n\n```python\nnext_smaller(21) == 12\nnext_smaller(531) == 513\nnext_smaller(2071) == 2017\n```\n\nReturn -1 (for `Haskell`: return `Nothing`, for `Rust`: return `None`), when there is no smaller number that contains the same digits. Also return -1 when the next smaller number with the same digits would require the leading digit to be zero.\n\n```python \nnext_smaller(9) == -1\nnext_smaller(135) == -1\nnext_smaller(1027) == -1  # 0721 is out since we don't write numbers with leading zeros\n```\n```ruby \nnext_smaller(9) == -1\nnext_smaller(135) == -1\nnext_smaller(1027) == -1  # 0721 is out since we don't write numbers with leading zeros\n```\n\n * some tests will include very large numbers.\n * test data only employs positive integers.\n\n*The function you write for this challenge is the inverse of this kata: \"[Next bigger number with the same digits](http://www.codewars.com/kata/next-bigger-number-with-the-same-digits).\"*", "difficulty": "interview", "id": 1668, "sample_io": [{"input": "21", "output": [12]}, {"input": "531", "output": [513]}, {"input": "2071", "output": [2017]}, {"input": "9", "output": [-1]}, {"input": "135", "output": [-1]}, {"input": "1027", "output": [-1]}], "test_list": [{"input": "21", "output": [12]}, {"input": "907", "output": [790]}, {"input": "531", "output": [513]}, {"input": "1027", "output": [-1]}, {"input": "441", "output": [414]}, {"input": "123456798", "output": [123456789]}, {"input": "513", "output": [351]}, {"input": "351", "output": [315]}, {"input": "315", "output": [153]}, {"input": "153", "output": [135]}, {"input": "135", "output": [-1]}, {"input": "100", "output": [-1]}, {"input": "2071", "output": [2017]}, {"input": "1207", "output": [1072]}, {"input": "414", "output": [144]}, {"input": "123456789", "output": [-1]}, {"input": "29009", "output": [20990]}, {"input": "1234567908", "output": [1234567890]}, {"input": "9999999999", "output": [-1]}, {"input": "59884848483559", "output": [59884848459853]}, {"input": "1023456789", "output": [-1]}, {"input": "51226262651257", "output": [51226262627551]}, {"input": "202233445566", "output": [-1]}, {"input": "506789", "output": [-1]}], "starter_code": "\ndef next_smaller(n):\n\t", "source_codes": [" \ndef next_smaller(n):\n    digits = [int(x) for x in str(n)]\n    \n    i = len(digits)-1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1\n    \n    if i == 0:\n        return -1\n\n    j = len(digits)-1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    \n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    \n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    \n    result = int(''.join(map(str, digits)))\n    \n    if n == result:\n        return -1\n    else:\n        return result\n\n\n"], "responses": ["```python \ndef next_smaller(n):\n    digits = [int(x) for x in str(n)]\n    \n    i = len(digits)-1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1\n    \n    if i == 0:\n        return -1\n\n    j = len(digits)-1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    \n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    \n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    \n    result = int(''.join(map(str, digits)))\n    \n    if n == result:\n        return -1\n    else:\n        return result\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1668}
{"name": "1613", "description": "Complete the solution so that it strips all text that follows any of a set of comment markers passed in. Any whitespace at the end of the line should also be stripped out. \n\n**Example:**\n\nGiven an input string of:\n```\napples, pears # and bananas\ngrapes\nbananas !apples\n```\n\nThe output expected would be:\n```\napples, pears\ngrapes\nbananas\n```\n\nThe code would be called like so:\n\n```python\nresult = solution(\"apples, pears # and bananas\\ngrapes\\nbananas !apples\", [\"#\", \"!\"])\n# result should == \"apples, pears\\ngrapes\\nbananas\"\n\n```", "difficulty": "interview", "id": 1613, "sample_io": [{"input": "apples, pears # and bananas\ngrapes\nbananas !apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}], "test_list": [{"input": "apples, pears # and bananas\ngrapes\nbananas !apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}, {"input": "a #b\nc\nd $e f g\n['#', '$']", "output": ["a\nc\nd"]}, {"input": "apples, pears # and bananas\ngrapes\nbananas !#apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}, {"input": "apples, pears # and bananas\ngrapes\nbananas #!apples\n['#', '!']", "output": ["apples, pears\ngrapes\nbananas"]}, {"input": "apples, pears # and bananas\ngrapes\navocado @apples\n['@', '!']", "output": ["apples, pears # and bananas\ngrapes\navocado"]}, {"input": "apples, pears \u00a7 and bananas\ngrapes\navocado *apples\n['*', '\u00a7']", "output": ["apples, pears\ngrapes\navocado"]}, {"input": "\n['#', '!']", "output": [""]}, {"input": "#\n['#', '!']", "output": [""]}, {"input": "\n\u00a7\n['#', '\u00a7']", "output": ["\n"]}, {"input": "apples, pears # and bananas\ngrapes\nbananas !apples\n[]", "output": ["apples, pears # and bananas\ngrapes\nbananas !apples"]}], "starter_code": "\ndef solution(string,markers):\n\t", "source_codes": ["\ndef solution(text, comment_markers):\n    lines = text.split('\\n')\n    result_lines = []\n    \n    for line in lines:\n        stripped_line = ''\n        found_comment = False\n        \n        for char in line:\n            if char not in comment_markers and not found_comment:\n                stripped_line += char\n            elif char in comment_markers and not found_comment:\n                found_comment = True\n            else:\n                found_comment = False\n            \n            # If we've reached the end of a line, reset the found_comment flag\n            if char == '\\n':\n                found_comment = False\n        \n        result_lines.append(stripped_line.rstrip())\n    \n    return '\\n'.join(result_lines)\n\n\n"], "responses": ["```python\ndef solution(text, comment_markers):\n    lines = text.split('\\n')\n    result_lines = []\n    \n    for line in lines:\n        stripped_line = ''\n        found_comment = False\n        \n        for char in line:\n            if char not in comment_markers and not found_comment:\n                stripped_line += char\n            elif char in comment_markers and not found_comment:\n                found_comment = True\n            else:\n                found_comment = False\n            \n            # If we've reached the end of a line, reset the found_comment flag\n            if char == '\\n':\n                found_comment = False\n        \n        result_lines.append(stripped_line.rstrip())\n    \n    return '\\n'.join(result_lines)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1613}
{"name": "1634", "description": "Let's define `increasing` numbers as the numbers whose digits, read from left to right, are never less than the previous ones: 234559 is an example of increasing number.\n\nConversely, `decreasing` numbers have all the digits read from left to right so that no digits is bigger than the previous one: 97732 is an example of decreasing number.\n\nYou do not need to be the next Gauss to figure that all numbers with 1 or 2 digits are either increasing or decreasing: 00, 01, 02, ..., 98, 99 are all belonging to one of this categories (if not both, like 22 or 55): 101 is indeed the first number which does NOT fall into either of the categories. Same goes for all the numbers up to 109, while 110 is again a decreasing number.\n\nNow your task is rather easy to declare (a bit less to perform): you have to build a function to return the total occurrences of all the increasing or decreasing numbers *below* 10 raised to the xth power (x will always be >= 0).\n\nTo give you a starting point, there are a grand total of increasing and decreasing numbers as shown in the table:\n\n|Total  | Below\n|---------------\n|1      | 1\n|10     | 10\n|100    | 100\n|475    | 1000\n|1675   | 10000\n|4954   | 100000\n|12952  | 1000000\n\nThis means that your function will have to behave like this:\n```python\ntotal_inc_dec(0)==1\ntotal_inc_dec(1)==10\ntotal_inc_dec(2)==100\ntotal_inc_dec(3)==475\ntotal_inc_dec(4)==1675\ntotal_inc_dec(5)==4954\ntotal_inc_dec(6)==12952\n```\n\n**Tips:** efficiency and trying to figure out how it works are essential: with a brute force approach, some tests with larger numbers may take more than the total computing power currently on Earth to be finished in the short allotted time.\n\nTo make it even clearer, the increasing or decreasing numbers between in the range 101-200 are: [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 177, 178, 179, 188, 189, 199, 200], that is 47 of them. In the following range, 201-300, there are 41 of them and so on, getting rarer and rarer.\n\n**Trivia:** just for the sake of your own curiosity, a number which is neither decreasing of increasing is called a `bouncy` number, like, say, 3848 or 37294; also, usually 0 is not considered being increasing, decreasing or bouncy, but it will be for the purpose of this kata", "difficulty": "interview", "id": 1634, "sample_io": [{"input": "0", "output": [1]}, {"input": "1", "output": [10]}, {"input": "2", "output": [100]}, {"input": "3", "output": [475]}, {"input": "4", "output": [1675]}, {"input": "5", "output": [4954]}, {"input": "6", "output": [12952]}], "test_list": [{"input": "0", "output": [1]}, {"input": "1", "output": [10]}, {"input": "2", "output": [100]}, {"input": "3", "output": [475]}, {"input": "4", "output": [1675]}, {"input": "5", "output": [4954]}, {"input": "6", "output": [12952]}, {"input": "10", "output": [277033]}, {"input": "20", "output": [40059819]}, {"input": "50", "output": [87959698326]}], "starter_code": "\ndef total_inc_dec(x):\n\t", "source_codes": ["\ndef total_inc_dec(x):\n    if x == 0:\n        return 1\n    \n    n = 10 ** (x + 1)\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        if i < 10 or (i >= 10 and i % 10 <= (i - 1) % 10):\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n    \n    return dp[n]\n\n\n"], "responses": ["```python\ndef total_inc_dec(x):\n    if x == 0:\n        return 1\n    \n    n = 10 ** (x + 1)\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        if i < 10 or (i >= 10 and i % 10 <= (i - 1) % 10):\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n    \n    return dp[n]\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1634}
{"name": "1645", "description": "The task is simply stated. Given an integer n (3 < n < 10^(9)), find the length of the smallest list of [*perfect squares*](https://en.wikipedia.org/wiki/Square_number) which add up to n. Come up with the best algorithm you can; you'll need it!\n\nExamples:\n\nsum_of_squares(17) = 2  17 = 16 + 1 (4 and 1 are perfect squares).\nsum_of_squares(15) = 4  15 = 9 + 4 + 1 + 1. There is no way to represent 15 as the sum of three perfect squares.\nsum_of_squares(16) = 1  16 itself is a perfect square.\n\nTime constraints:\n\n5 easy (sample) test cases: n < 20\n\n5 harder test cases: 1000 < n < 15000\n\n5 maximally hard test cases: 5 * 1e8 < n < 1e9\n\n```if:java\n300 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:c#\n350 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:python\n15 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:ruby\n25  random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:javascript\n100 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:crystal\n250 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:cpp\nRandom maximally hard test cases: 1e8 < n < 1e9\n```", "difficulty": "interview", "id": 1645, "sample_io": [{"input": "15", "output": [4]}, {"input": "16", "output": [1]}, {"input": "17", "output": [2]}], "test_list": [{"input": "15", "output": [4]}, {"input": "16", "output": [1]}, {"input": "17", "output": [2]}, {"input": "18", "output": [2]}, {"input": "19", "output": [3]}, {"input": "2017", "output": [2]}, {"input": "1008", "output": [4]}, {"input": "3456", "output": [3]}, {"input": "4000", "output": [2]}, {"input": "12321", "output": [1]}, {"input": "661915703", "output": [4]}, {"input": "999887641", "output": [1]}, {"input": "999950886", "output": [3]}, {"input": "999951173", "output": [2]}, {"input": "999998999", "output": [4]}], "starter_code": "\ndef sum_of_squares(n):\n\t", "source_codes": ["\nimport math\n\ndef sum_of_squares(n):\n    if n < 0:\n        return -1\n    \n    max_val = int(math.sqrt(n))\n    \n    for i in range(max_val, 0, -1):\n        square = i * i\n        \n        if (n - square) >= 0 and ((n - square)) % (i ** 2) == 0:\n            num_of_squares = (n - square) // (i ** 2)\n            \n            return num_of_squares + 1\n    \n    return 1\n\n# Take input from user\nn = int(input())\n\nprint(sum_of_squares(n))\n\n\n"], "responses": ["```python\nimport math\n\ndef sum_of_squares(n):\n    if n < 0:\n        return -1\n    \n    max_val = int(math.sqrt(n))\n    \n    for i in range(max_val, 0, -1):\n        square = i * i\n        \n        if (n - square) >= 0 and ((n - square)) % (i ** 2) == 0:\n            num_of_squares = (n - square) // (i ** 2)\n            \n            return num_of_squares + 1\n    \n    return 1\n\n# Take input from user\nn = int(input())\n\nprint(sum_of_squares(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1645}
{"name": "1666", "description": "## Description\n\nGiven an array X of positive integers, its elements are to be transformed by running the following operation on them as many times as required:\n\n```if X[i] > X[j] then X[i] = X[i] - X[j]```\n\nWhen no more transformations are possible, return its sum (\"smallest possible sum\").\n\nFor instance, the successive transformation of the elements of input X = [6, 9, 21] is detailed below:\n```\nX_1 = [6, 9, 12] # -> X_1[2] = X[2] - X[1] = 21 - 9\nX_2 = [6, 9, 6]  # -> X_2[2] = X_1[2] - X_1[0] = 12 - 6\nX_3 = [6, 3, 6]  # -> X_3[1] = X_2[1] - X_2[0] = 9 - 6\nX_4 = [6, 3, 3]  # -> X_4[2] = X_3[2] - X_3[1] = 6 - 3\nX_5 = [3, 3, 3]  # -> X_5[1] = X_4[0] - X_4[1] = 6 - 3\n```\nThe returning output is the sum of the final transformation (here 9).\n\n## Example\n\n## Solution steps:\n\n## Additional notes:\n\nThere are performance tests consisted of very big numbers and arrays of size at least 30000. Please write an efficient algorithm to prevent timeout.", "difficulty": "interview", "id": 1666, "sample_io": [{"input": "[6, 9, 21]", "output": [9]}], "test_list": [{"input": "[6, 9, 21]", "output": [9]}, {"input": "[9]", "output": [9]}, {"input": "[30, 12]", "output": [12]}, {"input": "[11, 22]", "output": [22]}, {"input": "[1, 21, 55]", "output": [3]}, {"input": "[4, 16, 24]", "output": [12]}, {"input": "[3, 13, 23, 7, 83]", "output": [5]}, {"input": "[60, 12, 96, 48, 60, 24, 72, 36, 72, 72, 48]", "output": [132]}, {"input": "[71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71]", "output": [923]}], "starter_code": "\ndef solution(a):\n\t", "source_codes": ["\ndef smallest_possible_sum(arr):\n    arr.sort()\n    i, j = 0, 1\n    while j < len(arr) and arr[j] == arr[i]:\n        j += 1\n    ans = sum(arr[:j])\n    for k in range(j, len(arr)):\n        while i >= j and arr[k] % arr[i] == 0:\n            ans -= arr[i]\n            i += 1\n    return ans\n\n# Take input from user\narr = list(map(int, input().split()))\nprint(smallest_possible_sum(arr))\n\n\n"], "responses": ["```python\ndef smallest_possible_sum(arr):\n    arr.sort()\n    i, j = 0, 1\n    while j < len(arr) and arr[j] == arr[i]:\n        j += 1\n    ans = sum(arr[:j])\n    for k in range(j, len(arr)):\n        while i >= j and arr[k] % arr[i] == 0:\n            ans -= arr[i]\n            i += 1\n    return ans\n\n# Take input from user\narr = list(map(int, input().split()))\nprint(smallest_possible_sum(arr))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1666}
{"name": "1659", "description": "# How many ways can you make the sum of a number?\n\nFrom wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)#\n\n>In number theory and combinatorics, a partition of a positive integer *n*, also called an *integer partition*, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. If order matters, the sum becomes a composition. For example, 4 can be partitioned in five distinct ways:\n```\n4\n3 + 1\n2 + 2\n2 + 1 + 1\n1 + 1 + 1 + 1\n```\n\n## Examples\n\n### Basic\n\n```python\nexp_sum(1) # 1\nexp_sum(2) # 2  -> 1+1 , 2\nexp_sum(3) # 3 -> 1+1+1, 1+2, 3\nexp_sum(4) # 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) # 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) # 42\n```\n\n### Explosive\n\n```python\nexp_sum(50) # 204226\nexp_sum(80) # 15796476\nexp_sum(100) # 190569292\n```\n\nSee [here](http://www.numericana.com/data/partition.htm) for more examples.", "difficulty": "interview", "id": 1659, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [2]}, {"input": "3", "output": [3]}, {"input": "4", "output": [5]}, {"input": "5", "output": [7]}, {"input": "10", "output": [42]}, {"input": "50", "output": [204226]}, {"input": "80", "output": [15796476]}, {"input": "100", "output": [190569292]}], "test_list": [{"input": "1", "output": [1]}, {"input": "2", "output": [2]}, {"input": "3", "output": [3]}, {"input": "4", "output": [5]}, {"input": "5", "output": [7]}, {"input": "20", "output": [627]}, {"input": "30", "output": [5604]}, {"input": "40", "output": [37338]}, {"input": "43", "output": [63261]}, {"input": "60", "output": [966467]}, {"input": "70", "output": [4087968]}, {"input": "90", "output": [56634173]}, {"input": "200", "output": [3972999029388]}, {"input": "275", "output": [1520980492851175]}], "starter_code": "\ndef exp_sum(n):\n\t", "source_codes": ["\nimport itertools\n\ndef exp_sum(n):\n    max_len = int(n ** 0.5) + 1\n    result = 0\n    \n    for r in range(1, max_len):\n        it = itertools.combinations_with_replacement(range(r, n+1), r)\n        \n        for p in it:\n            if sum(p) == n:\n                result += 1\n                \n    return result\n\n# Test cases\nprint(exp_sum(1)) # 1\nprint(exp_sum(2)) # 2\nprint(exp_sum(3)) # 3\nprint(exp_sum(4)) # 5\nprint(exp_sum(5)) # 7\nprint(exp_sum(10)) # 42\nprint(exp_sum(50)) # 204226\nprint(exp_sum(80)) # 15796476\nprint(exp_sum(100)) # 190569292\n\n\n"], "responses": ["```python\nimport itertools\n\ndef exp_sum(n):\n    max_len = int(n ** 0.5) + 1\n    result = 0\n    \n    for r in range(1, max_len):\n        it = itertools.combinations_with_replacement(range(r, n+1), r)\n        \n        for p in it:\n            if sum(p) == n:\n                result += 1\n                \n    return result\n\n# Test cases\nprint(exp_sum(1)) # 1\nprint(exp_sum(2)) # 2\nprint(exp_sum(3)) # 3\nprint(exp_sum(4)) # 5\nprint(exp_sum(5)) # 7\nprint(exp_sum(10)) # 42\nprint(exp_sum(50)) # 204226\nprint(exp_sum(80)) # 15796476\nprint(exp_sum(100)) # 190569292\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1659}
{"name": "1647", "description": "Create a function that takes a positive integer and returns the next bigger number that can be formed by rearranging its digits. For example:\n\n```\n12 ==> 21\n513 ==> 531\n2017 ==> 2071\n```\n\nIf the digits can't be rearranged to form a bigger number, return `-1` (or `nil` in Swift):\n\n```\n9 ==> -1\n111 ==> -1\n531 ==> -1\n```", "difficulty": "interview", "id": 1647, "sample_io": [{"input": "12", "output": [21]}, {"input": "513", "output": [531]}, {"input": "2017", "output": [2071]}, {"input": "9", "output": [-1]}, {"input": "111", "output": [-1]}, {"input": "531", "output": [-1]}], "test_list": [{"input": "12", "output": [21]}, {"input": "513", "output": [531]}, {"input": "2017", "output": [2071]}, {"input": "414", "output": [441]}, {"input": "144", "output": [414]}, {"input": "123456789", "output": [123456798]}, {"input": "1234567890", "output": [1234567908]}, {"input": "9876543210", "output": [-1]}, {"input": "9999999999", "output": [-1]}, {"input": "59884848459853", "output": [59884848483559]}], "starter_code": "\ndef next_bigger(n):\n\t", "source_codes": ["\nfrom collections import Counter\n\ndef next_bigger(n):\n    s = str(n)\n    c = sorted(Counter(s).items())\n    \n    if len(c) == 1:\n        return -1\n    \n    for i in range(len(c) - 1, 0, -1):\n        if c[i][1] > 1 and c[i-1][0] < c[i][0]:\n            s = list(s)\n            s[s.index(str(c[i][0]))], s[s.index(str(c[i-1][0]))] = str(c[i-1][0]), str(c[i][0])\n            return int(''.join(s))\n            \n    return -1\n\n# Take user input and pass it to the function\nn = int(input())\n\nprint(next_bigger(n))\n\n\n"], "responses": ["```python\nfrom collections import Counter\n\ndef next_bigger(n):\n    s = str(n)\n    c = sorted(Counter(s).items())\n    \n    if len(c) == 1:\n        return -1\n    \n    for i in range(len(c) - 1, 0, -1):\n        if c[i][1] > 1 and c[i-1][0] < c[i][0]:\n            s = list(s)\n            s[s.index(str(c[i][0]))], s[s.index(str(c[i-1][0]))] = str(c[i-1][0]), str(c[i][0])\n            return int(''.join(s))\n            \n    return -1\n\n# Take user input and pass it to the function\nn = int(input())\n\nprint(next_bigger(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1647}
{"name": "1666", "description": "## Description\n\nGiven an array X of positive integers, its elements are to be transformed by running the following operation on them as many times as required:\n\n```if X[i] > X[j] then X[i] = X[i] - X[j]```\n\nWhen no more transformations are possible, return its sum (\"smallest possible sum\").\n\nFor instance, the successive transformation of the elements of input X = [6, 9, 21] is detailed below:\n```\nX_1 = [6, 9, 12] # -> X_1[2] = X[2] - X[1] = 21 - 9\nX_2 = [6, 9, 6]  # -> X_2[2] = X_1[2] - X_1[0] = 12 - 6\nX_3 = [6, 3, 6]  # -> X_3[1] = X_2[1] - X_2[0] = 9 - 6\nX_4 = [6, 3, 3]  # -> X_4[2] = X_3[2] - X_3[1] = 6 - 3\nX_5 = [3, 3, 3]  # -> X_5[1] = X_4[0] - X_4[1] = 6 - 3\n```\nThe returning output is the sum of the final transformation (here 9).\n\n## Example\n\n## Solution steps:\n\n## Additional notes:\n\nThere are performance tests consisted of very big numbers and arrays of size at least 30000. Please write an efficient algorithm to prevent timeout.", "difficulty": "interview", "id": 1666, "sample_io": [{"input": "[6, 9, 21]", "output": [9]}], "test_list": [{"input": "[6, 9, 21]", "output": [9]}, {"input": "[9]", "output": [9]}, {"input": "[30, 12]", "output": [12]}, {"input": "[11, 22]", "output": [22]}, {"input": "[1, 21, 55]", "output": [3]}, {"input": "[4, 16, 24]", "output": [12]}, {"input": "[3, 13, 23, 7, 83]", "output": [5]}, {"input": "[60, 12, 96, 48, 60, 24, 72, 36, 72, 72, 48]", "output": [132]}, {"input": "[71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71]", "output": [923]}], "starter_code": "\ndef solution(a):\n\t", "source_codes": ["\ndef smallestSum(arr):\n    n = len(arr)\n    arr.sort()\n\n    s, i = 0, 1\n    while i < n:\n        if arr[i] > arr[i - 1]:\n            s += (arr[i - 1])\n            i += 1\n        else:\n            s += (2 * arr[i - 1])\n            i += 1\n\n    return s\n\n\narr = list(map(int, input().split()))\nprint(smallestSum(arr))\n\n\n"], "responses": ["```python\ndef smallestSum(arr):\n    n = len(arr)\n    arr.sort()\n\n    s, i = 0, 1\n    while i < n:\n        if arr[i] > arr[i - 1]:\n            s += (arr[i - 1])\n            i += 1\n        else:\n            s += (2 * arr[i - 1])\n            i += 1\n\n    return s\n\n\narr = list(map(int, input().split()))\nprint(smallestSum(arr))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1666}
{"name": "1646", "description": "This is a very simply formulated task. Let's call an integer number `N` 'green' if `N\u00b2` ends with all of the digits of `N`. Some examples:\n\n`5` is green, because `5\u00b2 = 25` and `25` ends with `5`.\n\n`11` is not green, because `11\u00b2 = 121` and `121` does not end with `11`.\n\n`376` is green, because `376\u00b2 = 141376` and `141376` ends with `376`.\n\nYour task is to write a function `green` that returns `n`th green number, starting with `1` - `green (1) == 1`\n\n---\n\n## Data range\n\n```if:haskell\n`n <= 4000` for Haskell\n```\n```if:java\n`n <= 5000` for Java\n```\n```if:python\n`n <= 5000` for Python\n```\n```if:javascript\n`n <= 3000` for JavaScript\n\nReturn values should be `String`s, and should be exact. A BigNum library is recommended.\n```", "difficulty": "interview", "id": 1646, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [5]}], "test_list": [{"input": "1", "output": [1]}, {"input": "2", "output": [5]}, {"input": "3", "output": [6]}, {"input": "4", "output": [25]}, {"input": "12", "output": [2890625]}, {"input": "13", "output": [7109376]}, {"input": "100", "output": [6188999442576576769103890995893380022607743740081787109376]}, {"input": "110", "output": [9580863811000557423423230896109004106619977392256259918212890625]}], "starter_code": "\ndef green(n):\n\t", "source_codes": ["\ndef green(n):\n    def digit_count(num, base):\n        count = 0\n        while num:\n            num //= base\n            count += num % base == 1\n        return count\n\n    i = 2 * n - 1\n    while True:\n        i += 1\n        if digit_count(i ** 2, 10) == n:\n            return str(i)\n\nn = int(input())\nprint(green(n))\n\n\n"], "responses": ["```python\ndef green(n):\n    def digit_count(num, base):\n        count = 0\n        while num:\n            num //= base\n            count += num % base == 1\n        return count\n\n    i = 2 * n - 1\n    while True:\n        i += 1\n        if digit_count(i ** 2, 10) == n:\n            return str(i)\n\nn = int(input())\nprint(green(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1646}
{"name": "1656", "description": "With your birthday coming up soon, your eccentric friend sent you a message to say \"happy birthday\":\n\n    hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu\n    hhapppyyyy biirtttthdaaay too youuu\n    happy birrrthdayy to youuu\n    happpyyyy birrtthdaaay tooooo youu\n\nAt first it looks like a song, but upon closer investigation, you realize that your friend hid the phrase \"happy birthday\" thousands of times inside his message. In fact, it contains it more than 2 million times! To thank him, you'd like to reply with exactly how many times it occurs.\n\nTo count all the occurences, the procedure is as follows: look through the paragraph and find a `'h'`; then find an `'a'` later in the paragraph; then find an `'p'` after that, and so on. Now count the number of ways in which you can choose letters in this way to make the full phrase.\n\nMore precisely, given a text string, you are to determine how many times the search string appears as a sub-sequence of that string.\n\nWrite a function called `countSubsequences` that takes two arguments: `needle`, the string to be search for and `haystack`, the string to search in. In our example, `\"happy birthday\"` is the needle and the birthday message is the haystack. The function should return the number of times `needle` occurs as a sub-sequence of `haystack`.  Spaces are also considered part of the needle.\n\nSince the answers can be very large, return only the last 8 digits of the answer in case it exceeds 8 digits. The answers to the test cases will all be shorter than 8 digits.", "difficulty": "interview", "id": 1656, "sample_io": [], "test_list": [{"input": "happy birthday\nappyh appy birth day", "output": [1]}, {"input": "happy birthday\nhhaappyy bbiirrtthhddaayy", "output": [2048]}, {"input": "happy birthday\nhappy holidays", "output": [0]}, {"input": "happy birthday\nhappy birthday", "output": [1]}, {"input": "happy\nhhhappy", "output": [3]}, {"input": "happy birthday\nhhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu", "output": [7680]}], "starter_code": "\ndef count_subsequences(a, b):\n\t", "source_codes": ["\ndef countSubsequences(needle, haystack):\n    needle = ' ' + needle  # add space at the beginning for correct handling of spaces in the needle string\n    n = len(needle)\n    h = len(haystack)\n    \n    # arrays to store counts of characters in the haystack that can be matched with each character in the needle \n    arr = [[0] * (n + 1) for _ in range(n + 1)]\n    arr[0][0] = 1\n    \n    for i in range(1, n + 1):\n        arr[i][0] = arr[i - 1][0]\n        for j in range(1, h + 1):\n            if needle[i] == haystack[j]:\n                arr[i][j % i] += arr[i - 1][j % (i - 1)]\n    \n    return format(arr[n][h % n], '08d')\n\n# input\nneedle = input()\nhaystack = input()\n\nprint(countSubsequences(needle, haystack))\n\n\n"], "responses": ["```python\ndef countSubsequences(needle, haystack):\n    needle = ' ' + needle  # add space at the beginning for correct handling of spaces in the needle string\n    n = len(needle)\n    h = len(haystack)\n    \n    # arrays to store counts of characters in the haystack that can be matched with each character in the needle \n    arr = [[0] * (n + 1) for _ in range(n + 1)]\n    arr[0][0] = 1\n    \n    for i in range(1, n + 1):\n        arr[i][0] = arr[i - 1][0]\n        for j in range(1, h + 1):\n            if needle[i] == haystack[j]:\n                arr[i][j % i] += arr[i - 1][j % (i - 1)]\n    \n    return format(arr[n][h % n], '08d')\n\n# input\nneedle = input()\nhaystack = input()\n\nprint(countSubsequences(needle, haystack))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1656}
{"name": "1634", "description": "Let's define `increasing` numbers as the numbers whose digits, read from left to right, are never less than the previous ones: 234559 is an example of increasing number.\n\nConversely, `decreasing` numbers have all the digits read from left to right so that no digits is bigger than the previous one: 97732 is an example of decreasing number.\n\nYou do not need to be the next Gauss to figure that all numbers with 1 or 2 digits are either increasing or decreasing: 00, 01, 02, ..., 98, 99 are all belonging to one of this categories (if not both, like 22 or 55): 101 is indeed the first number which does NOT fall into either of the categories. Same goes for all the numbers up to 109, while 110 is again a decreasing number.\n\nNow your task is rather easy to declare (a bit less to perform): you have to build a function to return the total occurrences of all the increasing or decreasing numbers *below* 10 raised to the xth power (x will always be >= 0).\n\nTo give you a starting point, there are a grand total of increasing and decreasing numbers as shown in the table:\n\n|Total  | Below\n|---------------\n|1      | 1\n|10     | 10\n|100    | 100\n|475    | 1000\n|1675   | 10000\n|4954   | 100000\n|12952  | 1000000\n\nThis means that your function will have to behave like this:\n```python\ntotal_inc_dec(0)==1\ntotal_inc_dec(1)==10\ntotal_inc_dec(2)==100\ntotal_inc_dec(3)==475\ntotal_inc_dec(4)==1675\ntotal_inc_dec(5)==4954\ntotal_inc_dec(6)==12952\n```\n\n**Tips:** efficiency and trying to figure out how it works are essential: with a brute force approach, some tests with larger numbers may take more than the total computing power currently on Earth to be finished in the short allotted time.\n\nTo make it even clearer, the increasing or decreasing numbers between in the range 101-200 are: [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 177, 178, 179, 188, 189, 199, 200], that is 47 of them. In the following range, 201-300, there are 41 of them and so on, getting rarer and rarer.\n\n**Trivia:** just for the sake of your own curiosity, a number which is neither decreasing of increasing is called a `bouncy` number, like, say, 3848 or 37294; also, usually 0 is not considered being increasing, decreasing or bouncy, but it will be for the purpose of this kata", "difficulty": "interview", "id": 1634, "sample_io": [{"input": "0", "output": [1]}, {"input": "1", "output": [10]}, {"input": "2", "output": [100]}, {"input": "3", "output": [475]}, {"input": "4", "output": [1675]}, {"input": "5", "output": [4954]}, {"input": "6", "output": [12952]}], "test_list": [{"input": "0", "output": [1]}, {"input": "1", "output": [10]}, {"input": "2", "output": [100]}, {"input": "3", "output": [475]}, {"input": "4", "output": [1675]}, {"input": "5", "output": [4954]}, {"input": "6", "output": [12952]}, {"input": "10", "output": [277033]}, {"input": "20", "output": [40059819]}, {"input": "50", "output": [87959698326]}], "starter_code": "\ndef total_inc_dec(x):\n\t", "source_codes": ["\ndef total_inc_dec(n):\n    if n == 0:\n        return 1\n    \n    inc = (n + 2) * 9 * (10 ** (n - 1)) // 2\n    dec = ((n + 3) * 9 * (10 ** (n - 1))) // 2\n    bouncy = (n + 4) * 9 * (10 ** (n - 1))\n    \n    return inc + dec - bouncy\n\n# Call the function with a sample input\nprint(total_inc_dec(0))  # Output: 1\n\n\n"], "responses": ["```python\ndef total_inc_dec(n):\n    if n == 0:\n        return 1\n    \n    inc = (n + 2) * 9 * (10 ** (n - 1)) // 2\n    dec = ((n + 3) * 9 * (10 ** (n - 1))) // 2\n    bouncy = (n + 4) * 9 * (10 ** (n - 1))\n    \n    return inc + dec - bouncy\n\n# Call the function with a sample input\nprint(total_inc_dec(0))  # Output: 1\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1634}
{"name": "1627", "description": "### Background\n\nI was reading a [book](http://www.amazon.co.uk/Things-Make-Do-Fourth-Dimension/dp/1846147646/) recently, \"Things to Make and Do in the Fourth Dimension\" by comedian and mathematician Matt Parker, and in the first chapter of the book Matt talks about problems he likes to solve in his head to take his mind off the fact that he is in his dentist's chair, we've all been there!\n\nThe problem he talks about relates to polydivisible numbers, and I thought a kata should be written on the subject as it's quite interesting. (Well it's interesting to me, so there!)\n\n### Polydivisib... huh what?\n\nSo what are they?\n\nA polydivisible number is divisible in an unusual way. The first digit is cleanly divisible by `1`, the first two digits are cleanly divisible by `2`, the first three by `3` and so on.\n\nThe interesting thing about polydivisiblity is that it relates to the underlying number, but not the base it is written in, so if aliens came to Earth and used base `23` (`11` fingers on one hand and `12` on the other), no matter what squiggles they use to write numbers, they would find the same numbers polydivisible!\n\n### Polydivisibilty Example:\n\nLet's do a worked example to clear up any questions ...\n\nStarting wih the number `1,232` in base `10` then:\n\n```\n 1232\n 1    /1 = 1    Yay!\n 12   /2 = 6    Yay!\n 123  /3 = 41   Yay!\n 1232 /4 = 308  Yay!\n```\n\nThus `1,232` is a polydivisible number in base `4` and above.\n\nHowever starting wih the number `123,220` and using base `10` then:\n\n```\n 123220\n 1      /1 = 1            Yay!\n 12     /2 = 6            Yay!\n 123    /3 = 41           Yay!\n 1232   /4 = 308          Yay!\n 12322  /5 = 2464.4       Oh no, that's not a round number!\n 123220 /6 = 220536.333r  Oh no, that's not a round number!\n```\n\nThus `123,220` is not a polydivisible base 10 number, but what about in another base?\n\nAgain starting wih the number `123,220` and using base `6` then:\n\n```\n base 6   base 10\n 1      = 1       -> 1     /1 = 1     Yay!\n 12     = 8       -> 8     /2 = 4     Yay!\n 123    = 51      -> 51    /3 = 17    Yay!\n 1232   = 308     -> 308   /4 = 77    Yay!\n 12322  = 1850    -> 1850  /5 = 370   Yay!\n 123220 = 11100   -> 11100 /6 = 1850  Yay!\n```\n\nThus `123,220` is a polydivisible base `6` number (and a polydivisible base `10` number when converted to `11100` in base `10`).\n\n### Kata\n\nIn this kata you must implement two methods: `is_polydivisible(n, b)` and `get_polydivisible(n, b)`.\n\nThe first `is_polydivisible(n, b)` will return `True` if `n` is polydivisible in base `b` or `False` if not.\n\nThe second `get_polydivisible(n, b)` will return the `n`th polydivisible number using base `b`, the first polydivisible number is of course always `0`.\n\nYou can assume that all inputs are valid.\n\n```if:haskell\nAll necessary arithmetic can be done in `Int` range.\n```\n\n### Kata Examples:\n\n```python\n    is_polydivisible(\"1232\", 10)   # => True\n    is_polydivisible(\"123220\", 10) # => False\n    is_polydivisible(\"123220\", 6)  # => True\n    get_polydivisible(22, 10)      # => \"32\"\n    get_polydivisible(22, 16)      # => \"1A\"\n    get_polydivisible(42, 16)      # => \"42\"\n```\n\n#### A Note on Bases\n\nThe maximum base used is base `62`, and uses characters in the following order `[0-9][A-Z][a-z]` to denote its digits, base `n` will use the first `n` characters of this sequence.\n```if-not:haskell\nA constant CHARS has been declared with this sequence for you.\n```", "difficulty": "interview", "id": 1627, "sample_io": [{"input": "1232\n10", "output": [true]}, {"input": "123220\n10", "output": [false]}, {"input": "123220\n6", "output": [true]}], "test_list": [{"input": "123\n10", "output": [true]}, {"input": "1234\n10", "output": [false]}, {"input": "12345\n10", "output": [false]}, {"input": "12365\n10", "output": [true]}, {"input": "123220\n10", "output": [false]}, {"input": "50041\n6", "output": [true]}, {"input": "140410\n6", "output": [true]}, {"input": "203230\n6", "output": [true]}, {"input": "30043052\n6", "output": [true]}], "starter_code": "\ndef is_polydivisible(s, b):\n\t", "source_codes": ["\ndef is_polydivisible(n, b):\n    n = int(n)\n    for i in range(1, len(str(n)) + 1):\n        if n % (10 ** i) // 10**(i-1) % i != 0:\n            return False\n    return True\n\ndef get_polydivisible(i, b):\n    CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    MAX_B = 62\n    base = min(b, MAX_B)\n    index = 0\n    num = ''\n    \n    while index < i:\n        remainder = index % (base // len(CHARS))\n        if remainder == 0: \n            index //= base // len(CHARS)\n        digit = CHARS[remainder]\n        num += digit\n        index //= len(CHARS)\n        \n    return num\n\n# Test cases\nprint(is_polydivisible(\"1232\", 10))   # True\nprint(is_polydivisible(\"123220\", 10)) # False\nprint(is_polydivisible(\"123220\", 6))  # True\nprint(get_polydivisible(22, 10))      # '32'\nprint(get_polydivisible(22, 16))      # '1A'\nprint(get_polydivisible(42, 16))      # '42'\n\n\n"], "responses": ["```python\ndef is_polydivisible(n, b):\n    n = int(n)\n    for i in range(1, len(str(n)) + 1):\n        if n % (10 ** i) // 10**(i-1) % i != 0:\n            return False\n    return True\n\ndef get_polydivisible(i, b):\n    CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    MAX_B = 62\n    base = min(b, MAX_B)\n    index = 0\n    num = ''\n    \n    while index < i:\n        remainder = index % (base // len(CHARS))\n        if remainder == 0: \n            index //= base // len(CHARS)\n        digit = CHARS[remainder]\n        num += digit\n        index //= len(CHARS)\n        \n    return num\n\n# Test cases\nprint(is_polydivisible(\"1232\", 10))   # True\nprint(is_polydivisible(\"123220\", 10)) # False\nprint(is_polydivisible(\"123220\", 6))  # True\nprint(get_polydivisible(22, 10))      # '32'\nprint(get_polydivisible(22, 16))      # '1A'\nprint(get_polydivisible(42, 16))      # '42'\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1627}
{"name": "1656", "description": "With your birthday coming up soon, your eccentric friend sent you a message to say \"happy birthday\":\n\n    hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu\n    hhapppyyyy biirtttthdaaay too youuu\n    happy birrrthdayy to youuu\n    happpyyyy birrtthdaaay tooooo youu\n\nAt first it looks like a song, but upon closer investigation, you realize that your friend hid the phrase \"happy birthday\" thousands of times inside his message. In fact, it contains it more than 2 million times! To thank him, you'd like to reply with exactly how many times it occurs.\n\nTo count all the occurences, the procedure is as follows: look through the paragraph and find a `'h'`; then find an `'a'` later in the paragraph; then find an `'p'` after that, and so on. Now count the number of ways in which you can choose letters in this way to make the full phrase.\n\nMore precisely, given a text string, you are to determine how many times the search string appears as a sub-sequence of that string.\n\nWrite a function called `countSubsequences` that takes two arguments: `needle`, the string to be search for and `haystack`, the string to search in. In our example, `\"happy birthday\"` is the needle and the birthday message is the haystack. The function should return the number of times `needle` occurs as a sub-sequence of `haystack`.  Spaces are also considered part of the needle.\n\nSince the answers can be very large, return only the last 8 digits of the answer in case it exceeds 8 digits. The answers to the test cases will all be shorter than 8 digits.", "difficulty": "interview", "id": 1656, "sample_io": [], "test_list": [{"input": "happy birthday\nappyh appy birth day", "output": [1]}, {"input": "happy birthday\nhhaappyy bbiirrtthhddaayy", "output": [2048]}, {"input": "happy birthday\nhappy holidays", "output": [0]}, {"input": "happy birthday\nhappy birthday", "output": [1]}, {"input": "happy\nhhhappy", "output": [3]}, {"input": "happy birthday\nhhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu", "output": [7680]}], "starter_code": "\ndef count_subsequences(a, b):\n\t", "source_codes": ["\ndef countSubsequences(needle, haystack):\n    n = len(needle)\n    h = len(haystack)\n    needle += '0' * 27 # Append some extra characters to ensure we can find all non-existent subsequences\n    dp = [1] * (h + 1) # dp[i][j] denotes the number of ways to choose i characters from haystack and obtain j characters of needle\n    \n    for i in range(2, n+1):\n        prev = '0'\n        dp0 = 0\n        for j in range(h+1):\n            if needle[i-1] != prev:\n                dp[j] += dp0\n            else:\n                dp0 = dp[j]\n                dp[j] += dp0\n            prev = haystack[j]\n\n    result = str(dp[h])[-8:] # Return only the last 8 digits of the answer in case it exceeds 8 digits\n\n    return int(result)\n\n# Input from standard input\nneedle = input()\nhaystack = input()\n\nprint(countSubsequences(needle, haystack))\n\n\n"], "responses": ["```python\ndef countSubsequences(needle, haystack):\n    n = len(needle)\n    h = len(haystack)\n    needle += '0' * 27 # Append some extra characters to ensure we can find all non-existent subsequences\n    dp = [1] * (h + 1) # dp[i][j] denotes the number of ways to choose i characters from haystack and obtain j characters of needle\n    \n    for i in range(2, n+1):\n        prev = '0'\n        dp0 = 0\n        for j in range(h+1):\n            if needle[i-1] != prev:\n                dp[j] += dp0\n            else:\n                dp0 = dp[j]\n                dp[j] += dp0\n            prev = haystack[j]\n\n    result = str(dp[h])[-8:] # Return only the last 8 digits of the answer in case it exceeds 8 digits\n\n    return int(result)\n\n# Input from standard input\nneedle = input()\nhaystack = input()\n\nprint(countSubsequences(needle, haystack))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1656}
{"name": "1649", "description": "Automatons, or Finite State Machines (FSM), are extremely useful to programmers when it comes to software design. You will be given a simplistic version of an FSM to code for a basic TCP session.\n\nThe outcome of this exercise will be to return the correct state of the TCP FSM based on the array of events given.\n\n---------------------------------\n\nThe input array of events will consist of one or more of the following strings:\n\n```\nAPP_PASSIVE_OPEN, APP_ACTIVE_OPEN, APP_SEND, APP_CLOSE, APP_TIMEOUT, RCV_SYN, RCV_ACK, RCV_SYN_ACK, RCV_FIN, RCV_FIN_ACK\n```\n\n---------------------------------\n\nThe states are as follows and should be returned in all capital letters as shown:\n\n```\nCLOSED, LISTEN, SYN_SENT, SYN_RCVD, ESTABLISHED, CLOSE_WAIT, LAST_ACK, FIN_WAIT_1, FIN_WAIT_2, CLOSING, TIME_WAIT\n```\n\n---------------------------------\n\nThe input will be an array of events. Your job is to traverse the FSM as determined by the events, and return the proper state as a string, all caps, as shown above.\n\nIf an event is not applicable to the current state, your code will return `\"ERROR\"`.\n\n### Action of each event upon each state:\n(the format is `INITIAL_STATE: EVENT -> NEW_STATE`)\n\n```\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n```\n\n![\"EFSM TCP\" ](http://theangelfallseries.com/img/EFSM_TCP.png)\n\n## Examples\n\n```\n[\"APP_PASSIVE_OPEN\", \"APP_SEND\", \"RCV_SYN_ACK\"] =>  \"ESTABLISHED\"\n\n[\"APP_ACTIVE_OPEN\"] =>  \"SYN_SENT\"\n\n[\"APP_ACTIVE_OPEN\", \"RCV_SYN_ACK\", \"APP_CLOSE\", \"RCV_FIN_ACK\", \"RCV_ACK\"] =>  \"ERROR\"\n```\n\n \n\nThis kata is similar to [Design a Simple Automaton (Finite State Machine)](https://www.codewars.com/kata/design-a-simple-automaton-finite-state-machine), and you may wish to try that kata before tackling this one.\n\nSee wikipedia page [Transmission Control Protocol]( http://en.wikipedia.org/wiki/Transmission_Control_Protocol)\nfor further details.\n\nSee http://www.medianet.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf page 4, for the FSM diagram used for this kata.", "difficulty": "interview", "id": 1649, "sample_io": [{"input": "['APP_PASSIVE_OPEN', 'APP_SEND', 'RCV_SYN_ACK']", "output": ["ESTABLISHED"]}, {"input": "['APP_ACTIVE_OPEN']", "output": ["SYN_SENT"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'APP_CLOSE', 'RCV_FIN_ACK', 'RCV_ACK']", "output": ["ERROR"]}], "test_list": [{"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE']", "output": ["FIN_WAIT_1"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK']", "output": ["ESTABLISHED"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN']", "output": ["SYN_RCVD"]}, {"input": "['APP_PASSIVE_OPEN']", "output": ["LISTEN"]}, {"input": "['APP_ACTIVE_OPEN', 'APP_CLOSE']", "output": ["CLOSED"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_FIN', 'RCV_ACK']", "output": ["TIME_WAIT"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_FIN', 'RCV_ACK', 'APP_TIMEOUT']", "output": ["CLOSED"]}, {"input": "['RCV_SYN', 'RCV_ACK', 'APP_CLOSE']", "output": ["ERROR"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_ACK']", "output": ["FIN_WAIT_2"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'RCV_FIN']", "output": ["CLOSE_WAIT"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'RCV_FIN', 'APP_CLOSE']", "output": ["LAST_ACK"]}, {"input": "['APP_ACTIVE_OPEN']", "output": ["SYN_SENT"]}, {"input": "['APP_PASSIVE_OPEN', 'APP_CLOSE']", "output": ["CLOSED"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'APP_CLOSE']", "output": ["FIN_WAIT_1"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_PASSIVE_OPEN']", "output": ["ERROR"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE', 'RCV_FIN_ACK', 'APP_TIMEOUT', 'APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_FIN', 'RCV_ACK']", "output": ["TIME_WAIT"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE', 'RCV_SYN']", "output": ["ERROR"]}, {"input": "['APP_PASSIVE_OPEN', 'APP_CLOSE', 'RCV_SYN']", "output": ["ERROR"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE', 'RCV_FIN']", "output": ["CLOSING"]}], "starter_code": "\ndef traverse_TCP_states(events):\n\t", "source_codes": ["\ndef main():\n    # Take user input as a list representing events in TCP FSM\n    events = input().split()\n\n    # Define the states and their transitions\n    states = {\n        'CLOSED': {'APP_PASSIVE_OPEN': 'LISTEN', 'APP_ACTIVE_OPEN': 'SYN_SENT', 'OTHER': 'ERROR'},\n        'LISTEN': {'RCV_SYN': 'SYN_RCVD', 'APP_SEND': 'SYN_SENT', 'APP_CLOSE': 'CLOSED', 'OTHER': 'ERROR'},\n        'SYN_SENT': {'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'APP_CLOSE': 'CLOSED', 'OTHER': 'ERROR'},\n        'SYN_RCVD': {'RCV_ACK': 'ESTABLISHED', 'APP_CLOSE': 'FIN_WAIT_1', 'OTHER': 'ERROR'},\n        'ESTABLISHED': {'RCV_FIN': 'CLOSE_WAIT', 'APP_CLOSE': 'FIN_WAIT_1', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2', 'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'OTHER': 'ERROR'},\n        'FIN_WAIT_1': {'RCV_FIN': 'CLOSING', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2', 'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'OTHER': 'ERROR'},\n        'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT', 'OTHER': 'ERROR'},\n        'CLOSING': {'RCV_ACK': 'TIME_WAIT', 'OTHER': 'ERROR'},\n        'CLOSE_WAIT': {'APP_CLOSE': 'LAST_ACK', 'OTHER': 'ERROR'},\n        'LAST_ACK': {'RCV_ACK': 'CLOSED', 'OTHER': 'ERROR'},\n        'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT', 'OTHER': 'ERROR'},\n        'TIME_WAIT': {'APP_TIMEOUT': 'CLOSED', 'OTHER': 'ERROR'}\n    }\n\n    # Start in the CLOSED state\n    current_state = 'CLOSED'\n\n    # Process each event\n    for event in events:\n        # If the event is not applicable to the current state, return \"ERROR\"\n        if event not in states[current_state]:\n            print(\"ERROR\")\n            break\n\n        # Update the current state\n        current_state = states[current_state][event]\n\n    # Print the final state\n    print(current_state)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a list representing events in TCP FSM\n    events = input().split()\n\n    # Define the states and their transitions\n    states = {\n        'CLOSED': {'APP_PASSIVE_OPEN': 'LISTEN', 'APP_ACTIVE_OPEN': 'SYN_SENT', 'OTHER': 'ERROR'},\n        'LISTEN': {'RCV_SYN': 'SYN_RCVD', 'APP_SEND': 'SYN_SENT', 'APP_CLOSE': 'CLOSED', 'OTHER': 'ERROR'},\n        'SYN_SENT': {'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'APP_CLOSE': 'CLOSED', 'OTHER': 'ERROR'},\n        'SYN_RCVD': {'RCV_ACK': 'ESTABLISHED', 'APP_CLOSE': 'FIN_WAIT_1', 'OTHER': 'ERROR'},\n        'ESTABLISHED': {'RCV_FIN': 'CLOSE_WAIT', 'APP_CLOSE': 'FIN_WAIT_1', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2', 'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'OTHER': 'ERROR'},\n        'FIN_WAIT_1': {'RCV_FIN': 'CLOSING', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2', 'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'OTHER': 'ERROR'},\n        'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT', 'OTHER': 'ERROR'},\n        'CLOSING': {'RCV_ACK': 'TIME_WAIT', 'OTHER': 'ERROR'},\n        'CLOSE_WAIT': {'APP_CLOSE': 'LAST_ACK', 'OTHER': 'ERROR'},\n        'LAST_ACK': {'RCV_ACK': 'CLOSED', 'OTHER': 'ERROR'},\n        'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT', 'OTHER': 'ERROR'},\n        'TIME_WAIT': {'APP_TIMEOUT': 'CLOSED', 'OTHER': 'ERROR'}\n    }\n\n    # Start in the CLOSED state\n    current_state = 'CLOSED'\n\n    # Process each event\n    for event in events:\n        # If the event is not applicable to the current state, return \"ERROR\"\n        if event not in states[current_state]:\n            print(\"ERROR\")\n            break\n\n        # Update the current state\n        current_state = states[current_state][event]\n\n    # Print the final state\n    print(current_state)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1649}
{"name": "1646", "description": "This is a very simply formulated task. Let's call an integer number `N` 'green' if `N\u00b2` ends with all of the digits of `N`. Some examples:\n\n`5` is green, because `5\u00b2 = 25` and `25` ends with `5`.\n\n`11` is not green, because `11\u00b2 = 121` and `121` does not end with `11`.\n\n`376` is green, because `376\u00b2 = 141376` and `141376` ends with `376`.\n\nYour task is to write a function `green` that returns `n`th green number, starting with `1` - `green (1) == 1`\n\n---\n\n## Data range\n\n```if:haskell\n`n <= 4000` for Haskell\n```\n```if:java\n`n <= 5000` for Java\n```\n```if:python\n`n <= 5000` for Python\n```\n```if:javascript\n`n <= 3000` for JavaScript\n\nReturn values should be `String`s, and should be exact. A BigNum library is recommended.\n```", "difficulty": "interview", "id": 1646, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [5]}], "test_list": [{"input": "1", "output": [1]}, {"input": "2", "output": [5]}, {"input": "3", "output": [6]}, {"input": "4", "output": [25]}, {"input": "12", "output": [2890625]}, {"input": "13", "output": [7109376]}, {"input": "100", "output": [6188999442576576769103890995893380022607743740081787109376]}, {"input": "110", "output": [9580863811000557423423230896109004106619977392256259918212890625]}], "starter_code": "\ndef green(n):\n\t", "source_codes": ["\ndef green(n):\n    def good(x):\n        return x ** 2 % (10 ** len(str(x))) == int(x) % (10 ** len(str(x)))\n\n    for i in range(1, n + 1):\n        if good(i):\n            yield i\n\nprint(next(green(int(input()))))\n\n\n"], "responses": ["```python\ndef green(n):\n    def good(x):\n        return x ** 2 % (10 ** len(str(x))) == int(x) % (10 ** len(str(x)))\n\n    for i in range(1, n + 1):\n        if good(i):\n            yield i\n\nprint(next(green(int(input()))))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1646}
{"name": "1660", "description": "When we attended middle school were asked to simplify mathematical expressions like \"3x-yx+2xy-x\" (or usually bigger), and that was easy-peasy (\"2x+xy\"). But tell that to your pc and we'll see! \n\nWrite a function: `simplify`, that takes a string in input, representing a *multilinear non-constant polynomial in integers coefficients* (like `\"3x-zx+2xy-x\"`), and returns another string as output where the same expression has been simplified in the following way ( `->` means application of `simplify`):\n\n- All possible sums and subtraction of equivalent monomials (\"xy==yx\") has been done, e.g.: `\"cb+cba\" -> \"bc+abc\"`, `\"2xy-yx\" -> \"xy\"`, `\"-a+5ab+3a-c-2a\" -> \"-c+5ab\"`\n\n- All monomials appears in order of increasing number of variables, e.g.: `\"-abc+3a+2ac\" -> \"3a+2ac-abc\"`, `\"xyz-xz\" -> \"-xz+xyz\"`\n \n- If two monomials have the same number of variables, they appears in lexicographic order, e.g.: `\"a+ca-ab\" -> \"a-ab+ac\"`, `\"xzy+zby\" ->\"byz+xyz\"`\n  \n- There is no leading `+` sign if the first coefficient is positive, e.g.: `\"-y+x\" -> \"x-y\"`, but no restrictions for `-`:  `\"y-x\" ->\"-x+y\"`\n\n---\n\n__N.B.__ to keep it simplest, the string in input is restricted to represent only *multilinear non-constant polynomials*, so you won't find something like `-3+yx^2'. **Multilinear** means in this context: **of degree 1 on each variable**.\n\n**Warning**: the string in input can contain arbitrary variables represented by lowercase characters in the english alphabet.\n\n__Good Work :)__", "difficulty": "interview", "id": 1660, "sample_io": [{"input": "cb+cba", "output": ["bc+abc"]}, {"input": "2xy-yx", "output": ["xy"]}, {"input": "-a+5ab+3a-c-2a", "output": ["-c+5ab"]}, {"input": "-abc+3a+2ac", "output": ["3a+2ac-abc"]}, {"input": "xyz-xz", "output": ["-xz+xyz"]}, {"input": "a+ca-ab", "output": ["a-ab+ac"]}, {"input": "xzy+zby", "output": ["byz+xyz"]}, {"input": "-y+x", "output": ["x-y"]}, {"input": "y-x", "output": ["-x+y"]}], "test_list": [{"input": "dc+dcba", "output": ["cd+abcd"]}, {"input": "2xy-yx", "output": ["xy"]}, {"input": "-a+5ab+3a-c-2a", "output": ["-c+5ab"]}, {"input": "-abc+3a+2ac", "output": ["3a+2ac-abc"]}, {"input": "xyz-xz", "output": ["-xz+xyz"]}, {"input": "a+ca-ab", "output": ["a-ab+ac"]}, {"input": "xzy+zby", "output": ["byz+xyz"]}, {"input": "-y+x", "output": ["x-y"]}, {"input": "y-x", "output": ["-x+y"]}, {"input": "3a+b+4ac+bc-ab+3a-cb-a-a", "output": ["4a+b-ab+4ac"]}, {"input": "+n-5hn+7tjhn-4nh-3n-6hnjt+2jhn+9hn", "output": ["-2n+2hjn+hjnt"]}, {"input": "-8fk+5kv-4yk+7kf-qk+yqv-3vqy+4ky+4kf+yvqkf", "output": ["3fk-kq+5kv-2qvy+fkqvy"]}], "starter_code": "\ndef simplify(poly):\n\t", "source_codes": ["\nimport re\n\ndef simplify(expression):\n    # Split expression into terms\n    terms = expression.split('+')\n    \n    # Remove any leading or trailing whitespace from each term\n    terms = [re.sub(r'\\s+', '', term) for term in terms]\n    \n    # Sort the terms based on their variables\n    terms.sort(key=lambda x: sorted(re.findall(r'[a-z]', x)))\n    \n    # Initialize an empty list to store the simplified terms\n    simplified_terms = []\n    \n    # Iterate over each term\n    for term in terms:\n        # Split the term into coefficient and variable(s)\n        coeff, var = re.split(r'([a-z]+)', term)\n        \n        # If the term is not already in the simplified list of terms, add it\n        if (len(simplified_terms) == 0 or \n            any(sorted(re.findall(r'[a-z]', simplified_term)) != sorted(re.findall(r'[a-z]', var)) for simplified_term in simplified_terms)):\n            simplified_terms.append(term)\n    \n    # Join the simplified terms with '+' and return the result\n    return '+'.join(simplified_terms).replace('+', ' +')\n\n# Read input from standard input\nexpression = input()\n\n# Call the simplify function and print the output to standard output\nprint(simplify(expression))\n\n\n"], "responses": ["```python\nimport re\n\ndef simplify(expression):\n    # Split expression into terms\n    terms = expression.split('+')\n    \n    # Remove any leading or trailing whitespace from each term\n    terms = [re.sub(r'\\s+', '', term) for term in terms]\n    \n    # Sort the terms based on their variables\n    terms.sort(key=lambda x: sorted(re.findall(r'[a-z]', x)))\n    \n    # Initialize an empty list to store the simplified terms\n    simplified_terms = []\n    \n    # Iterate over each term\n    for term in terms:\n        # Split the term into coefficient and variable(s)\n        coeff, var = re.split(r'([a-z]+)', term)\n        \n        # If the term is not already in the simplified list of terms, add it\n        if (len(simplified_terms) == 0 or \n            any(sorted(re.findall(r'[a-z]', simplified_term)) != sorted(re.findall(r'[a-z]', var)) for simplified_term in simplified_terms)):\n            simplified_terms.append(term)\n    \n    # Join the simplified terms with '+' and return the result\n    return '+'.join(simplified_terms).replace('+', ' +')\n\n# Read input from standard input\nexpression = input()\n\n# Call the simplify function and print the output to standard output\nprint(simplify(expression))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1660}
{"name": "1616", "description": "In this kata we want to convert a string into an integer. The strings simply represent the numbers in words.\n\nExamples:\n\n* \"one\" => 1\n* \"twenty\" => 20\n* \"two hundred forty-six\" => 246\n* \"seven hundred eighty-three thousand nine hundred and nineteen\" => 783919\n\nAdditional Notes:\n\n* The minimum number is \"zero\" (inclusively)\n* The maximum number, which must be supported is 1 million (inclusively)\n* The \"and\" in e.g. \"one hundred and twenty-four\" is optional, in some cases it's present and in others it's not\n* All tested numbers are valid, you don't need to validate them", "difficulty": "interview", "id": 1616, "sample_io": [{"input": "one", "output": [1]}, {"input": "twenty", "output": [20]}, {"input": "two hundred forty-six", "output": [246]}, {"input": "seven hundred eighty-three thousand nine hundred and nineteen", "output": [783919]}], "test_list": [{"input": "zero", "output": [0]}, {"input": "one", "output": [1]}, {"input": "two", "output": [2]}, {"input": "three", "output": [3]}, {"input": "four", "output": [4]}, {"input": "five", "output": [5]}, {"input": "six", "output": [6]}, {"input": "seven", "output": [7]}, {"input": "eight", "output": [8]}, {"input": "nine", "output": [9]}, {"input": "ten", "output": [10]}, {"input": "twenty", "output": [20]}, {"input": "twenty-one", "output": [21]}, {"input": "thirty-seven", "output": [37]}, {"input": "forty-six", "output": [46]}, {"input": "fifty-nine", "output": [59]}, {"input": "sixty-eight", "output": [68]}, {"input": "seventy-two", "output": [72]}, {"input": "eighty-three", "output": [83]}, {"input": "ninety-four", "output": [94]}, {"input": "one hundred", "output": [100]}, {"input": "one hundred one", "output": [101]}, {"input": "one hundred and one", "output": [101]}, {"input": "one hundred sixty-nine", "output": [169]}, {"input": "two hundred and ninety-nine", "output": [299]}, {"input": "seven hundred thirty-six", "output": [736]}, {"input": "two thousand", "output": [2000]}, {"input": "one thousand three hundred and thirty-seven", "output": [1337]}, {"input": "ten thousand", "output": [10000]}, {"input": "twenty-six thousand three hundred and fifty-nine", "output": [26359]}, {"input": "thirty-five thousand", "output": [35000]}, {"input": "ninety-nine thousand nine hundred and ninety-nine", "output": [99999]}, {"input": "six hundred sixty-six thousand six hundred sixty-six", "output": [666666]}, {"input": "seven hundred thousand", "output": [700000]}, {"input": "two hundred thousand three", "output": [200003]}, {"input": "two hundred thousand and three", "output": [200003]}, {"input": "two hundred three thousand", "output": [203000]}, {"input": "five hundred thousand three hundred", "output": [500300]}, {"input": "eight hundred eighty-eight thousand eight hundred and eighty-eight", "output": [888888]}, {"input": "one million", "output": [1000000]}], "starter_code": "\ndef parse_int(string):\n\t", "source_codes": ["\ndef num_of_word(word):\n    dictionary = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                  'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9,\n                  'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13,\n                  'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17,\n                  'eighteen': 18, 'nineteen': 19}\n    if word in dictionary:\n        return dictionary[word]\n    \n    tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty',\n            'ninety']\n    hundreds = ['one hundred', 'two hundred', 'three hundred', 'four hundred',\n                 'five hundred', 'six hundred', 'seven hundred', 'eight hundred',\n                 'nine hundred']\n\n    if word.endswith('hundred'):\n        return int(word[:-7]) * 100\n\n    if word.startswith('and') and len(word) == 4:\n        return num_of_word(word[3:])\n\n    for i in tens:\n        if i in word:\n            return (10 * (tens.index(i))) + num_of_word(word.replace(i, ''))\n\n    if 'thousand' in word:\n        return int(num_of_word(word.split(' ')[0])) * 1000\n\n    result = ''\n    numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven',\n               'eight', 'nine', 'ten']\n    \n    for i in range(len(numbers)):\n        if str(i + 1) in word:\n            result += str(i+1)\n\n    return int(result)\n\n\ndef main():\n    s = input().lower()\n    numbers = ['one hundred thousand', 'two hundred thousand', 'three hundred thousand',\n               'four hundred thousand', 'five hundred thousand', 'six hundred thousand',\n               'seven hundred thousand', 'eight hundred thousand', 'nine hundred thousand']\n\n    for i in range(len(numbers)):\n        if numbers[i] in s:\n            print(num_of_word(s.replace(numbers[i], '')) * 1000 + int(i+1)*100000)\n            return\n\n    numbers = ['one hundred', 'two hundred', 'three hundred', 'four hundred',\n               'five hundred', 'six hundred', 'seven hundred', 'eight hundred',\n               'nine hundred']\n    \n    for i in range(len(numbers)):\n        if numbers[i] in s:\n            print(num_of_word(s.replace(numbers[i], '')) * 100 + int(i+1)*100)\n            return\n\n    words = ['twenty one thousand', 'twenty two thousand', 'thirty three thousand',\n             'forty four thousand', 'fifty five thousand', 'sixty six thousand',\n             'seventy seven thousand', 'eighty eight thousand', 'ninety nine thousand']\n\n    for i in range(len(words)):\n        if words[i] in s:\n            print(num_of_word(s.replace(words[i], '')) * 1000 + int(i+1)*10000)\n            return\n\n    word = ''\n    for char in s:\n        word += char\n        print(num_of_word(word))\n\nmain()\n\n\n"], "responses": ["```python\ndef num_of_word(word):\n    dictionary = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                  'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9,\n                  'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13,\n                  'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17,\n                  'eighteen': 18, 'nineteen': 19}\n    if word in dictionary:\n        return dictionary[word]\n    \n    tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty',\n            'ninety']\n    hundreds = ['one hundred', 'two hundred', 'three hundred', 'four hundred',\n                 'five hundred', 'six hundred', 'seven hundred', 'eight hundred',\n                 'nine hundred']\n\n    if word.endswith('hundred'):\n        return int(word[:-7]) * 100\n\n    if word.startswith('and') and len(word) == 4:\n        return num_of_word(word[3:])\n\n    for i in tens:\n        if i in word:\n            return (10 * (tens.index(i))) + num_of_word(word.replace(i, ''))\n\n    if 'thousand' in word:\n        return int(num_of_word(word.split(' ')[0])) * 1000\n\n    result = ''\n    numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven',\n               'eight', 'nine', 'ten']\n    \n    for i in range(len(numbers)):\n        if str(i + 1) in word:\n            result += str(i+1)\n\n    return int(result)\n\n\ndef main():\n    s = input().lower()\n    numbers = ['one hundred thousand', 'two hundred thousand', 'three hundred thousand',\n               'four hundred thousand', 'five hundred thousand', 'six hundred thousand',\n               'seven hundred thousand', 'eight hundred thousand', 'nine hundred thousand']\n\n    for i in range(len(numbers)):\n        if numbers[i] in s:\n            print(num_of_word(s.replace(numbers[i], '')) * 1000 + int(i+1)*100000)\n            return\n\n    numbers = ['one hundred', 'two hundred', 'three hundred', 'four hundred',\n               'five hundred', 'six hundred', 'seven hundred', 'eight hundred',\n               'nine hundred']\n    \n    for i in range(len(numbers)):\n        if numbers[i] in s:\n            print(num_of_word(s.replace(numbers[i], '')) * 100 + int(i+1)*100)\n            return\n\n    words = ['twenty one thousand', 'twenty two thousand', 'thirty three thousand',\n             'forty four thousand', 'fifty five thousand', 'sixty six thousand',\n             'seventy seven thousand', 'eighty eight thousand', 'ninety nine thousand']\n\n    for i in range(len(words)):\n        if words[i] in s:\n            print(num_of_word(s.replace(words[i], '')) * 1000 + int(i+1)*10000)\n            return\n\n    word = ''\n    for char in s:\n        word += char\n        print(num_of_word(word))\n\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1616}
{"name": "1621", "description": "Write a function that counts how many different ways you can make change for an amount of money, given an array of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2: \n```\n1+1+1+1, 1+1+2, 2+2.\n```\nThe order of coins does not matter:\n```\n1+1+2 == 2+1+1\n```\nAlso, assume that you have an infinite amount of coins.\n\nYour function should take an amount to change and an array of unique denominations for the coins:\n\n```python\n  count_change(4, [1,2]) # => 3\n  count_change(10, [5,2,3]) # => 4\n  count_change(11, [5,7]) # => 0\n```", "difficulty": "interview", "id": 1621, "sample_io": [{"input": "4\n[1, 2]", "output": [3]}, {"input": "10\n[5, 2, 3]", "output": [4]}, {"input": "11\n[5, 7]", "output": [0]}], "test_list": [{"input": "4\n[1, 2]", "output": [3]}, {"input": "10\n[5, 2, 3]", "output": [4]}, {"input": "11\n[5, 7]", "output": [0]}, {"input": "98\n[3, 14, 8]", "output": [19]}, {"input": "199\n[3, 5, 9, 15]", "output": [760]}, {"input": "300\n[5, 10, 20, 50, 100, 200, 500]", "output": [1022]}, {"input": "301\n[5, 10, 20, 50, 100, 200, 500]", "output": [0]}, {"input": "419\n[2, 5, 10, 20, 50]", "output": [18515]}], "starter_code": "\ndef count_change(money, coins):\n\t", "source_codes": ["\ndef count_change(amount, coins):\n    ways = [0 for i in range(amount + 1)]\n    ways[0] = 1\n    \n    for coin in coins:\n        for i in range(coin, amount + 1):\n            ways[i] += ways[i - coin]\n    \n    return ways[amount]\n\n# Take the input\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Print the result\nprint(count_change(n, coins))\n\n\n"], "responses": ["```python\ndef count_change(amount, coins):\n    ways = [0 for i in range(amount + 1)]\n    ways[0] = 1\n    \n    for coin in coins:\n        for i in range(coin, amount + 1):\n            ways[i] += ways[i - coin]\n    \n    return ways[amount]\n\n# Take the input\nn = int(input())\ncoins = list(map(int, input().split()))\n\n# Print the result\nprint(count_change(n, coins))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1621}
{"name": "1628", "description": "If n is the numerator and d the denominator of a fraction, that fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.\n\nFor example `5/16` is a proper fraction, while `6/16` is not, as both 6 and 16 are divisible by 2, thus the fraction can be reduced to `3/8`.\n\nNow, if you consider a given number d, how many proper fractions can be built using d as a denominator?\n\nFor example, let's assume that d is 15: you can build a total of 8 different proper fractions between 0 and 1 with it: 1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15.\n\nYou are to build a function that computes how many proper fractions you can build with a given denominator:\n```python\nproper_fractions(1)==0\nproper_fractions(2)==1\nproper_fractions(5)==4\nproper_fractions(15)==8\nproper_fractions(25)==20\n```\n\nBe ready to handle big numbers.\n\nEdit: to be extra precise, the term should be \"reduced\" fractions, thanks to [girianshiido](http://www.codewars.com/users/girianshiido) for pointing this out and sorry for the use of an improper word :)", "difficulty": "interview", "id": 1628, "sample_io": [{"input": "1", "output": [0]}, {"input": "2", "output": [1]}, {"input": "5", "output": [4]}, {"input": "15", "output": [8]}, {"input": "25", "output": [20]}], "test_list": [{"input": "1", "output": [0]}, {"input": "2", "output": [1]}, {"input": "5", "output": [4]}, {"input": "15", "output": [8]}, {"input": "25", "output": [20]}, {"input": "9999999", "output": [6637344]}, {"input": "500000003", "output": [500000002]}, {"input": "1532420", "output": [608256]}, {"input": "123456789", "output": [82260072]}, {"input": "9999999999", "output": [5890320000]}], "starter_code": "\ndef proper_fractions(n):\n\t", "source_codes": ["\nimport math\n\ndef proper_fractions(d):\n    # Initialize counter for reduced fractions\n    count = 0\n    \n    # Iterate over possible numerators from 1 to d-1\n    for n in range(1, d):\n        # Check if the current numerator and denominator are coprime (GCD equals to 1)\n        if math.gcd(n, d) == 1:\n            count += 1\n    \n    return count\n\n# Take input from user and print output\nd = int(input())\nprint(proper_fractions(d))\n\n\n"], "responses": ["```python\nimport math\n\ndef proper_fractions(d):\n    # Initialize counter for reduced fractions\n    count = 0\n    \n    # Iterate over possible numerators from 1 to d-1\n    for n in range(1, d):\n        # Check if the current numerator and denominator are coprime (GCD equals to 1)\n        if math.gcd(n, d) == 1:\n            count += 1\n    \n    return count\n\n# Take input from user and print output\nd = int(input())\nprint(proper_fractions(d))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1628}
{"name": "1604", "description": "You are at the top left cell $(1, 1)$ of an $n \\times m$ labyrinth. Your goal is to get to the bottom right cell $(n, m)$. You can only move right or down, one cell per step. Moving right from a cell $(x, y)$ takes you to the cell $(x, y + 1)$, while moving down takes you to the cell $(x + 1, y)$.\n\nSome cells of the labyrinth contain rocks. When you move to a cell with rock, the rock is pushed to the next cell in the direction you're moving. If the next cell contains a rock, it gets pushed further, and so on.\n\nThe labyrinth is surrounded by impenetrable walls, thus any move that would put you or any rock outside of the labyrinth is illegal.\n\nCount the number of different legal paths you can take from the start to the goal modulo $10^9 + 7$. Two paths are considered different if there is at least one cell that is visited in one path, but not visited in the other.\n\n\n-----Input-----\n\nThe first line contains two integers $n, m$\u00a0\u2014 dimensions of the labyrinth ($1 \\leq n, m \\leq 2000$).\n\nNext $n$ lines describe the labyrinth. Each of these lines contains $m$ characters. The $j$-th character of the $i$-th of these lines is equal to \"R\" if the cell $(i, j)$ contains a rock, or \".\" if the cell $(i, j)$ is empty.\n\nIt is guaranteed that the starting cell $(1, 1)$ is empty.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of different legal paths from $(1, 1)$ to $(n, m)$ modulo $10^9 + 7$.\n\n\n-----Examples-----\nInput\n1 1\n.\n\nOutput\n1\n\nInput\n2 3\n...\n..R\n\nOutput\n0\n\nInput\n4 4\n...R\n.RR.\n.RR.\nR...\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample case we can't (and don't have to) move, hence the only path consists of a single cell $(1, 1)$.\n\nIn the second sample case the goal is blocked and is unreachable.\n\nIllustrations for the third sample case can be found here: https://assets.codeforces.com/rounds/1225/index.html", "difficulty": "interview", "id": 1604, "sample_io": [{"input": "1 1\n.\n", "output": ["1\n"]}, {"input": "2 3\n...\n..R\n", "output": ["0\n"]}, {"input": "4 4\n...R\n.RR.\n.RR.\nR...\n", "output": ["4\n"]}], "test_list": [{"input": "1 1\n.\n", "output": ["1\n"]}, {"input": "2 3\n...\n..R\n", "output": ["0\n"]}, {"input": "4 4\n...R\n.RR.\n.RR.\nR...\n", "output": ["4\n"]}, {"input": "1 3\n.R.\n", "output": ["0\n"]}, {"input": "2 2\n.R\nR.\n", "output": ["0\n"]}, {"input": "10 10\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n", "output": ["48620\n"]}], "starter_code": "", "source_codes": ["\nMOD = 10**9 + 7\n\ndef add(x, y):\n    x += y\n    if x >= MOD:\n        x -= MOD\n    return x\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n\n    total_rocks = sum(sum(1 for x in row if x == 'R') for row in grid)\n    dp = [[[0] * 2 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                dp[i+1][j+1][0] = add(dp[i+1][j+1][0], dp[i][j+1][0])\n                dp[i+1][j+1][0] = add(dp[i+1][j+1][0], dp[i][j+1][1])\n\n            if j == m-1:\n                continue\n\n            dp[i+1][j+2][1] = add(dp[i+1][j+2][1], dp[i][j+1][0])\n            dp[i+1][j+2][1] = add(dp[i+1][j+2][1], dp[i][j+1][1])\n\n    print((dp[n][m][0] + dp[n][m][1]) % MOD)\n\nmain()\n\n\n"], "responses": ["```python\nMOD = 10**9 + 7\n\ndef add(x, y):\n    x += y\n    if x >= MOD:\n        x -= MOD\n    return x\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n\n    total_rocks = sum(sum(1 for x in row if x == 'R') for row in grid)\n    dp = [[[0] * 2 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'R':\n                dp[i+1][j+1][0] = add(dp[i+1][j+1][0], dp[i][j+1][0])\n                dp[i+1][j+1][0] = add(dp[i+1][j+1][0], dp[i][j+1][1])\n\n            if j == m-1:\n                continue\n\n            dp[i+1][j+2][1] = add(dp[i+1][j+2][1], dp[i][j+1][0])\n            dp[i+1][j+2][1] = add(dp[i+1][j+2][1], dp[i][j+1][1])\n\n    print((dp[n][m][0] + dp[n][m][1]) % MOD)\n\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1604}
{"name": "1622", "description": "# Ten-Pin Bowling\n\nIn the game of ten-pin bowling, a player rolls a bowling ball down a lane to knock over pins. There are ten pins set at the end of the bowling lane. Each player has 10 frames to roll a bowling ball down a lane and knock over as many pins as possible. The first nine frames are ended after two rolls or when the player knocks down all the pins. The last frame a player will receive an extra roll every time they knock down all ten pins; up to a maximum of three total rolls. \n\n## The Challenge\n\nIn this challenge you will be given a string representing a player's ten frames. It will look something like this: `'X X 9/ 80 X X 90 8/ 7/ 44'` (in Java: `\"X X 9/ 80 X X 90 8/ 7/ 44\"`), where each frame is space-delimited, `'X'` represents strikes, and `'/'` represents spares. Your goal is take in this string of frames into a function called `bowlingScore` and return the players total score.\n\n## Scoring\n\nThe scoring for ten-pin bowling can be difficult to understand, and if you're like most people, easily forgotten if you don't play often. Here is a quick breakdown:\n\n### Frames\n\nIn Ten-Pin Bowling there are ten frames per game. Frames are the players turn to bowl, which can be multiple rolls. The first 9 frames you get 2 rolls maximum to try to get all 10 pins down. **On the 10th or last frame a player will receive an extra roll each time they get all ten pins down to a maximum of three total rolls. Also on the last frame bonuses are not awarded for strikes and spares moving forward.**\n\nIn this challenge, three frames might be represented like this: `54 72 44`. In this case, the player has had three frames. On their first frame they scored 9 points (5 + 4), on their second frame they scored 9 points (7 + 2) and on their third frame they scored 8 points (4 + 4). This is a very simple example of bowling scoring. It gets more complicated when we introduce strikes and spares.\n\n### Strikes \nRepresented in this challenge as `'X'`\n\nA strike is scored when a player knocks all ten pins down in one roll. In the first 9 frames this will conclude the players turn and it will be scored as 10 points plus the points received from the next two rolls. So if a player were to have two frames `X 54`, the total score of those two frames would be 28. The first frame would be worth 19 (10 + 5 + 4) and the second frame would be worth 9 (5 + 4).\n\nA perfect game in bowling is 12 strikes in a row and would be represented like this `'X X X X X X X X X XXX'` (in Java: `\"X X X X X X X X X XXX\"`). This adds up to a total score of 300.\n\n### Spares\nRepresented in this challenge as `'/'`\n\nA spare is scored when a player knocks down all ten pins in two rolls. In the first 9 frames this will be scored as 10 points plus the next roll. So if a player were to have two frames `9/ 54`, the total score of the two frames would be 24. The first frame would be worth 15 (10 + 5) and the second frame would be worth 9 (5 + 4).\n\nFor a more detailed explanation see Wikipedia: \n\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring", "difficulty": "interview", "id": 1622, "sample_io": [{"input": "X X X X X X X X X XXX", "output": [300]}, {"input": "X X 9/ 80 X X 90 8/ 7/ 44", "output": [171]}], "test_list": [{"input": "11 11 11 11 11 11 11 11 11 11", "output": [20]}, {"input": "X X X X X X X X X XXX", "output": [300]}, {"input": "00 5/ 4/ 53 33 22 4/ 5/ 45 XXX", "output": [115]}, {"input": "5/ 4/ 3/ 2/ 1/ 0/ X 9/ 4/ 8/8", "output": [150]}, {"input": "5/ 4/ 3/ 2/ 1/ 0/ X 9/ 4/ 7/2", "output": [143]}, {"input": "X X 9/ 80 X X 90 8/ 7/ 44", "output": [171]}, {"input": "6/ 5/ 6/ 2/ 3/ 0/ 1/ 8/ 3/ 6/5", "output": [139]}, {"input": "00 00 00 00 00 00 00 00 00 0/X", "output": [20]}, {"input": "00 00 00 00 00 00 00 00 X 0/X", "output": [40]}], "starter_code": "\ndef bowling_score(frames):\n\t", "source_codes": ["\ndef bowlingScore(frames):\n    # Split frames into individual scores\n    frame_scores = frames.split()\n    \n    total_score = 0\n    \n    for i in range(0, len(frame_scores), 2):\n        if frame_scores[i] == 'X':\n            total_score += 10 + int(frame_scores[i+1]) if i+1 < len(frame_scores) else 10\n        elif frame_scores[i] == '/':\n            total_score += 10 + int(frame_scores[i+1])\n        else:\n            total_score += int(frame_scores[i]) + int(frame_scores[i+1])\n    \n    return total_score\n\n# Input the string of frames from standard input\nframes = input()\n\n# Print the result\nprint(bowlingScore(frames))\n\n\n"], "responses": ["```python\ndef bowlingScore(frames):\n    # Split frames into individual scores\n    frame_scores = frames.split()\n    \n    total_score = 0\n    \n    for i in range(0, len(frame_scores), 2):\n        if frame_scores[i] == 'X':\n            total_score += 10 + int(frame_scores[i+1]) if i+1 < len(frame_scores) else 10\n        elif frame_scores[i] == '/':\n            total_score += 10 + int(frame_scores[i+1])\n        else:\n            total_score += int(frame_scores[i]) + int(frame_scores[i+1])\n    \n    return total_score\n\n# Input the string of frames from standard input\nframes = input()\n\n# Print the result\nprint(bowlingScore(frames))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1622}
{"name": "1649", "description": "Automatons, or Finite State Machines (FSM), are extremely useful to programmers when it comes to software design. You will be given a simplistic version of an FSM to code for a basic TCP session.\n\nThe outcome of this exercise will be to return the correct state of the TCP FSM based on the array of events given.\n\n---------------------------------\n\nThe input array of events will consist of one or more of the following strings:\n\n```\nAPP_PASSIVE_OPEN, APP_ACTIVE_OPEN, APP_SEND, APP_CLOSE, APP_TIMEOUT, RCV_SYN, RCV_ACK, RCV_SYN_ACK, RCV_FIN, RCV_FIN_ACK\n```\n\n---------------------------------\n\nThe states are as follows and should be returned in all capital letters as shown:\n\n```\nCLOSED, LISTEN, SYN_SENT, SYN_RCVD, ESTABLISHED, CLOSE_WAIT, LAST_ACK, FIN_WAIT_1, FIN_WAIT_2, CLOSING, TIME_WAIT\n```\n\n---------------------------------\n\nThe input will be an array of events. Your job is to traverse the FSM as determined by the events, and return the proper state as a string, all caps, as shown above.\n\nIf an event is not applicable to the current state, your code will return `\"ERROR\"`.\n\n### Action of each event upon each state:\n(the format is `INITIAL_STATE: EVENT -> NEW_STATE`)\n\n```\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n```\n\n![\"EFSM TCP\" ](http://theangelfallseries.com/img/EFSM_TCP.png)\n\n## Examples\n\n```\n[\"APP_PASSIVE_OPEN\", \"APP_SEND\", \"RCV_SYN_ACK\"] =>  \"ESTABLISHED\"\n\n[\"APP_ACTIVE_OPEN\"] =>  \"SYN_SENT\"\n\n[\"APP_ACTIVE_OPEN\", \"RCV_SYN_ACK\", \"APP_CLOSE\", \"RCV_FIN_ACK\", \"RCV_ACK\"] =>  \"ERROR\"\n```\n\n \n\nThis kata is similar to [Design a Simple Automaton (Finite State Machine)](https://www.codewars.com/kata/design-a-simple-automaton-finite-state-machine), and you may wish to try that kata before tackling this one.\n\nSee wikipedia page [Transmission Control Protocol]( http://en.wikipedia.org/wiki/Transmission_Control_Protocol)\nfor further details.\n\nSee http://www.medianet.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf page 4, for the FSM diagram used for this kata.", "difficulty": "interview", "id": 1649, "sample_io": [{"input": "['APP_PASSIVE_OPEN', 'APP_SEND', 'RCV_SYN_ACK']", "output": ["ESTABLISHED"]}, {"input": "['APP_ACTIVE_OPEN']", "output": ["SYN_SENT"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'APP_CLOSE', 'RCV_FIN_ACK', 'RCV_ACK']", "output": ["ERROR"]}], "test_list": [{"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE']", "output": ["FIN_WAIT_1"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK']", "output": ["ESTABLISHED"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN']", "output": ["SYN_RCVD"]}, {"input": "['APP_PASSIVE_OPEN']", "output": ["LISTEN"]}, {"input": "['APP_ACTIVE_OPEN', 'APP_CLOSE']", "output": ["CLOSED"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_FIN', 'RCV_ACK']", "output": ["TIME_WAIT"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_FIN', 'RCV_ACK', 'APP_TIMEOUT']", "output": ["CLOSED"]}, {"input": "['RCV_SYN', 'RCV_ACK', 'APP_CLOSE']", "output": ["ERROR"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_ACK']", "output": ["FIN_WAIT_2"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'RCV_FIN']", "output": ["CLOSE_WAIT"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'RCV_FIN', 'APP_CLOSE']", "output": ["LAST_ACK"]}, {"input": "['APP_ACTIVE_OPEN']", "output": ["SYN_SENT"]}, {"input": "['APP_PASSIVE_OPEN', 'APP_CLOSE']", "output": ["CLOSED"]}, {"input": "['APP_ACTIVE_OPEN', 'RCV_SYN_ACK', 'APP_CLOSE']", "output": ["FIN_WAIT_1"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_PASSIVE_OPEN']", "output": ["ERROR"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE', 'RCV_FIN_ACK', 'APP_TIMEOUT', 'APP_ACTIVE_OPEN', 'RCV_SYN', 'APP_CLOSE', 'RCV_FIN', 'RCV_ACK']", "output": ["TIME_WAIT"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE', 'RCV_SYN']", "output": ["ERROR"]}, {"input": "['APP_PASSIVE_OPEN', 'APP_CLOSE', 'RCV_SYN']", "output": ["ERROR"]}, {"input": "['APP_PASSIVE_OPEN', 'RCV_SYN', 'RCV_ACK', 'APP_CLOSE', 'RCV_FIN']", "output": ["CLOSING"]}], "starter_code": "\ndef traverse_TCP_states(events):\n\t", "source_codes": ["\ndef main():\n    # Take user input as a list of events representing the current state in Berland\n    s = input().split(',')\n\n    # Step 1: Create a dictionary mapping each event to its corresponding transition function\n    transitions = {\n        'CLOSED': {'APP_PASSIVE_OPEN': 'LISTEN', 'APP_ACTIVE_OPEN': 'SYN_SENT'},\n        'LISTEN': {'RCV_SYN': 'SYN_RCVD', 'APP_SEND': 'SYN_SENT', 'APP_CLOSE': 'CLOSED'},\n        'SYN_SENT': {'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'APP_CLOSE': 'CLOSED'},\n        'SYN_RCVD': {'APP_CLOSE': 'FIN_WAIT_1', 'RCV_ACK': 'ESTABLISHED'},\n        'ESTABLISHED': {'APP_CLOSE': 'FIN_WAIT_1', 'RCV_FIN': 'CLOSE_WAIT'},\n        'FIN_WAIT_1': {'RCV_FIN': 'CLOSING', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2'},\n        'CLOSING': {'RCV_ACK': 'TIME_WAIT'},\n        'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT'},\n        'CLOSE_WAIT': {'APP_CLOSE': 'LAST_ACK'},\n        'LAST_ACK': {'RCV_ACK': 'CLOSED'},\n        'TIME_WAIT': {'APP_TIMEOUT': 'CLOSED'}\n    }\n\n    # Step 2: Initialize the current state to CLOSED\n    state = 'CLOSED'\n\n    # Step 3: Iterate over each event in the list\n    for event in s:\n        # Check if the event is applicable to the current state\n        if event in transitions.get(state, {}):\n            # If applicable, update the state using the transition function\n            state = transitions[state][event]\n        else:\n            # If not applicable, return ERROR\n            print('ERROR')\n            break\n\n    # Step 4: Print the final state after all events have been processed\n    print(state)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a list of events representing the current state in Berland\n    s = input().split(',')\n\n    # Step 1: Create a dictionary mapping each event to its corresponding transition function\n    transitions = {\n        'CLOSED': {'APP_PASSIVE_OPEN': 'LISTEN', 'APP_ACTIVE_OPEN': 'SYN_SENT'},\n        'LISTEN': {'RCV_SYN': 'SYN_RCVD', 'APP_SEND': 'SYN_SENT', 'APP_CLOSE': 'CLOSED'},\n        'SYN_SENT': {'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'APP_CLOSE': 'CLOSED'},\n        'SYN_RCVD': {'APP_CLOSE': 'FIN_WAIT_1', 'RCV_ACK': 'ESTABLISHED'},\n        'ESTABLISHED': {'APP_CLOSE': 'FIN_WAIT_1', 'RCV_FIN': 'CLOSE_WAIT'},\n        'FIN_WAIT_1': {'RCV_FIN': 'CLOSING', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2'},\n        'CLOSING': {'RCV_ACK': 'TIME_WAIT'},\n        'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT'},\n        'CLOSE_WAIT': {'APP_CLOSE': 'LAST_ACK'},\n        'LAST_ACK': {'RCV_ACK': 'CLOSED'},\n        'TIME_WAIT': {'APP_TIMEOUT': 'CLOSED'}\n    }\n\n    # Step 2: Initialize the current state to CLOSED\n    state = 'CLOSED'\n\n    # Step 3: Iterate over each event in the list\n    for event in s:\n        # Check if the event is applicable to the current state\n        if event in transitions.get(state, {}):\n            # If applicable, update the state using the transition function\n            state = transitions[state][event]\n        else:\n            # If not applicable, return ERROR\n            print('ERROR')\n            break\n\n    # Step 4: Print the final state after all events have been processed\n    print(state)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1649}
{"name": "1622", "description": "# Ten-Pin Bowling\n\nIn the game of ten-pin bowling, a player rolls a bowling ball down a lane to knock over pins. There are ten pins set at the end of the bowling lane. Each player has 10 frames to roll a bowling ball down a lane and knock over as many pins as possible. The first nine frames are ended after two rolls or when the player knocks down all the pins. The last frame a player will receive an extra roll every time they knock down all ten pins; up to a maximum of three total rolls. \n\n## The Challenge\n\nIn this challenge you will be given a string representing a player's ten frames. It will look something like this: `'X X 9/ 80 X X 90 8/ 7/ 44'` (in Java: `\"X X 9/ 80 X X 90 8/ 7/ 44\"`), where each frame is space-delimited, `'X'` represents strikes, and `'/'` represents spares. Your goal is take in this string of frames into a function called `bowlingScore` and return the players total score.\n\n## Scoring\n\nThe scoring for ten-pin bowling can be difficult to understand, and if you're like most people, easily forgotten if you don't play often. Here is a quick breakdown:\n\n### Frames\n\nIn Ten-Pin Bowling there are ten frames per game. Frames are the players turn to bowl, which can be multiple rolls. The first 9 frames you get 2 rolls maximum to try to get all 10 pins down. **On the 10th or last frame a player will receive an extra roll each time they get all ten pins down to a maximum of three total rolls. Also on the last frame bonuses are not awarded for strikes and spares moving forward.**\n\nIn this challenge, three frames might be represented like this: `54 72 44`. In this case, the player has had three frames. On their first frame they scored 9 points (5 + 4), on their second frame they scored 9 points (7 + 2) and on their third frame they scored 8 points (4 + 4). This is a very simple example of bowling scoring. It gets more complicated when we introduce strikes and spares.\n\n### Strikes \nRepresented in this challenge as `'X'`\n\nA strike is scored when a player knocks all ten pins down in one roll. In the first 9 frames this will conclude the players turn and it will be scored as 10 points plus the points received from the next two rolls. So if a player were to have two frames `X 54`, the total score of those two frames would be 28. The first frame would be worth 19 (10 + 5 + 4) and the second frame would be worth 9 (5 + 4).\n\nA perfect game in bowling is 12 strikes in a row and would be represented like this `'X X X X X X X X X XXX'` (in Java: `\"X X X X X X X X X XXX\"`). This adds up to a total score of 300.\n\n### Spares\nRepresented in this challenge as `'/'`\n\nA spare is scored when a player knocks down all ten pins in two rolls. In the first 9 frames this will be scored as 10 points plus the next roll. So if a player were to have two frames `9/ 54`, the total score of the two frames would be 24. The first frame would be worth 15 (10 + 5) and the second frame would be worth 9 (5 + 4).\n\nFor a more detailed explanation see Wikipedia: \n\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring", "difficulty": "interview", "id": 1622, "sample_io": [{"input": "X X X X X X X X X XXX", "output": [300]}, {"input": "X X 9/ 80 X X 90 8/ 7/ 44", "output": [171]}], "test_list": [{"input": "11 11 11 11 11 11 11 11 11 11", "output": [20]}, {"input": "X X X X X X X X X XXX", "output": [300]}, {"input": "00 5/ 4/ 53 33 22 4/ 5/ 45 XXX", "output": [115]}, {"input": "5/ 4/ 3/ 2/ 1/ 0/ X 9/ 4/ 8/8", "output": [150]}, {"input": "5/ 4/ 3/ 2/ 1/ 0/ X 9/ 4/ 7/2", "output": [143]}, {"input": "X X 9/ 80 X X 90 8/ 7/ 44", "output": [171]}, {"input": "6/ 5/ 6/ 2/ 3/ 0/ 1/ 8/ 3/ 6/5", "output": [139]}, {"input": "00 00 00 00 00 00 00 00 00 0/X", "output": [20]}, {"input": "00 00 00 00 00 00 00 00 X 0/X", "output": [40]}], "starter_code": "\ndef bowling_score(frames):\n\t", "source_codes": ["\ndef bowlingScore(frames):\n    score = 0\n    roll_num = [0] * 10\n    \n    for i, frame in enumerate(frames.split()):\n        if '/' in frame:\n            score += 10 + int(frame.split('/')[1])\n        elif 'X' == frame:\n            score += 10 + roll_num[i+1] + roll_num[i+2]\n            roll_num[i] = 10\n        else:\n            score += int(frame[0]) * 10 + int(frame[-1])\n    \n    return score\n\n# Test the function\nprint(bowlingScore('X X X X X X X X X XXX'))\n\n\n"], "responses": ["```python\ndef bowlingScore(frames):\n    score = 0\n    roll_num = [0] * 10\n    \n    for i, frame in enumerate(frames.split()):\n        if '/' in frame:\n            score += 10 + int(frame.split('/')[1])\n        elif 'X' == frame:\n            score += 10 + roll_num[i+1] + roll_num[i+2]\n            roll_num[i] = 10\n        else:\n            score += int(frame[0]) * 10 + int(frame[-1])\n    \n    return score\n\n# Test the function\nprint(bowlingScore('X X X X X X X X X XXX'))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1622}
{"name": "1640", "description": "Given two strings s1 and s2, we want to visualize how different the two strings are.\nWe will only take into account the *lowercase* letters (a to z).\nFirst let us count the frequency of each *lowercase* letters in s1 and s2.\n\n`s1 = \"A aaaa bb c\"`\n\n`s2 = \"& aaa bbb c d\"`\n\n`s1 has 4 'a', 2 'b', 1 'c'`\n\n`s2 has 3 'a', 3 'b', 1 'c', 1 'd'`\n\nSo the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2.\nIn the following we will not consider letters when the maximum of their occurrences\nis less than or equal to 1.\n\nWe can resume the differences between s1 and s2 in the following string:\n`\"1:aaaa/2:bbb\"`\nwhere `1` in `1:aaaa` stands for string s1 and `aaaa` because the maximum for `a` is 4.\nIn the same manner `2:bbb` stands for string s2 and `bbb` because the maximum for `b` is 3.\n\nThe task is to produce a string in which each *lowercase* letters of s1 or s2 appears as many times as\nits maximum if this maximum is *strictly greater than 1*; these letters will be prefixed by the \nnumber of the string where they appear with their maximum value and `:`. \nIf the maximum is in s1 as well as in s2 the prefix is `=:`.\n\nIn the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by '/'. See examples and \"Example Tests\".\n\nHopefully other examples can make this clearer.\n\n```\ns1 = \"my&friend&Paul has heavy hats! &\"\ns2 = \"my friend John has many many friends &\"\nmix(s1, s2) --> \"2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1=\"Are the kids at home? aaaaa fffff\"\ns2=\"Yes they are here! aaaaa fffff\"\nmix(s1, s2) --> \"=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\"\n```\n# Note for Swift, R, PowerShell\nThe prefix `=:` is replaced by `E:`\n``` \ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\"\n```", "difficulty": "interview", "id": 1640, "sample_io": [{"input": "my&friend&Paul has heavy hats! &\nmy friend John has many many friends &", "output": ["2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"]}, {"input": "mmmmm m nnnnn y&friend&Paul has heavy hats! &\nmy frie n d Joh n has ma n y ma n y frie n ds n&", "output": ["1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"]}, {"input": "Are the kids at home? aaaaa fffff\nYes they are here! aaaaa fffff", "output": ["=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh"]}, {"input": "mmmmm m nnnnn y&friend&Paul has heavy hats! &\nmy frie n d Joh n has ma n y ma n y frie n ds n&", "output": ["1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss"]}], "test_list": [{"input": "Are they here\nyes, they are here", "output": ["2:eeeee/2:yy/=:hh/=:rr"]}, {"input": "looping is fun but dangerous\nless dangerous than coding", "output": ["1:ooo/1:uuu/2:sss/=:nnn/1:ii/2:aa/2:dd/2:ee/=:gg"]}, {"input": " In many languages\n there's a pair of functions", "output": ["1:aaa/1:nnn/1:gg/2:ee/2:ff/2:ii/2:oo/2:rr/2:ss/2:tt"]}, {"input": "Lords of the Fallen\ngamekult", "output": ["1:ee/1:ll/1:oo"]}, {"input": "codewars\ncodewars", "output": [""]}, {"input": "A generation must confront the looming \ncodewarrs", "output": ["1:nnnnn/1:ooooo/1:tttt/1:eee/1:gg/1:ii/1:mm/=:rr"]}], "starter_code": "\ndef mix(s1, s2):\n\t", "source_codes": ["\nfrom collections import Counter\n\ndef mix(s1, s2):\n    max_count = {}\n    min_count = {}\n\n    for string in [s1, s2]:\n        counter = Counter(string.lower())\n        for letter, count in counter.items():\n            if letter.isalpha():\n                max_count[letter] = max(max_count.get(letter, 0), count)\n                min_count[letter] = min(min_count.get(letter, float('inf')), count)\n\n    result = []\n    for string, counter in [(1, Counter(s1.lower())), (2, Counter(s2.lower()))]:\n        for letter, count in counter.items():\n            if max_count[letter] > 1 and min_count[letter] <= 1:\n                result.append(f\"{string}:{letter * max_count[letter]}\")\n            elif max_count[letter] == 1 and min_count[letter] <= 1:\n                result.append(f\"{string}:{letter}\")\n\n    return \"/\".join(sorted(result, key=lambda x: (len(x.split(\":\")[1]), ord(x.split(\":\")[0]) if x.startswith(\"1:\") or x.startswith(\"2:\") else \"E\")), reverse=True))\n\n# Test cases\nprint(mix(\"my&friend&Paul has heavy hats! &\", \"my friend John has many many friends &\")) # Output: 2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\nprint(mix(\"mmmmm m nnnnn y&friend&Paul has heavy hats! &\", \"my frie n d Joh n has ma n y ma n y frie n ds n&\")) # Output: 1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\nprint(mix(\"Are the kids at home? aaaaa fffff\", \"Yes they are here! aaaaa fffff\")) # Output: =:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\n\n\n"], "responses": ["```python\nfrom collections import Counter\n\ndef mix(s1, s2):\n    max_count = {}\n    min_count = {}\n\n    for string in [s1, s2]:\n        counter = Counter(string.lower())\n        for letter, count in counter.items():\n            if letter.isalpha():\n                max_count[letter] = max(max_count.get(letter, 0), count)\n                min_count[letter] = min(min_count.get(letter, float('inf')), count)\n\n    result = []\n    for string, counter in [(1, Counter(s1.lower())), (2, Counter(s2.lower()))]:\n        for letter, count in counter.items():\n            if max_count[letter] > 1 and min_count[letter] <= 1:\n                result.append(f\"{string}:{letter * max_count[letter]}\")\n            elif max_count[letter] == 1 and min_count[letter] <= 1:\n                result.append(f\"{string}:{letter}\")\n\n    return \"/\".join(sorted(result, key=lambda x: (len(x.split(\":\")[1]), ord(x.split(\":\")[0]) if x.startswith(\"1:\") or x.startswith(\"2:\") else \"E\")), reverse=True))\n\n# Test cases\nprint(mix(\"my&friend&Paul has heavy hats! &\", \"my friend John has many many friends &\")) # Output: 2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\nprint(mix(\"mmmmm m nnnnn y&friend&Paul has heavy hats! &\", \"my frie n d Joh n has ma n y ma n y frie n ds n&\")) # Output: 1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\nprint(mix(\"Are the kids at home? aaaaa fffff\", \"Yes they are here! aaaaa fffff\")) # Output: =:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1640}
{"name": "1604", "description": "You are at the top left cell $(1, 1)$ of an $n \\times m$ labyrinth. Your goal is to get to the bottom right cell $(n, m)$. You can only move right or down, one cell per step. Moving right from a cell $(x, y)$ takes you to the cell $(x, y + 1)$, while moving down takes you to the cell $(x + 1, y)$.\n\nSome cells of the labyrinth contain rocks. When you move to a cell with rock, the rock is pushed to the next cell in the direction you're moving. If the next cell contains a rock, it gets pushed further, and so on.\n\nThe labyrinth is surrounded by impenetrable walls, thus any move that would put you or any rock outside of the labyrinth is illegal.\n\nCount the number of different legal paths you can take from the start to the goal modulo $10^9 + 7$. Two paths are considered different if there is at least one cell that is visited in one path, but not visited in the other.\n\n\n-----Input-----\n\nThe first line contains two integers $n, m$\u00a0\u2014 dimensions of the labyrinth ($1 \\leq n, m \\leq 2000$).\n\nNext $n$ lines describe the labyrinth. Each of these lines contains $m$ characters. The $j$-th character of the $i$-th of these lines is equal to \"R\" if the cell $(i, j)$ contains a rock, or \".\" if the cell $(i, j)$ is empty.\n\nIt is guaranteed that the starting cell $(1, 1)$ is empty.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of different legal paths from $(1, 1)$ to $(n, m)$ modulo $10^9 + 7$.\n\n\n-----Examples-----\nInput\n1 1\n.\n\nOutput\n1\n\nInput\n2 3\n...\n..R\n\nOutput\n0\n\nInput\n4 4\n...R\n.RR.\n.RR.\nR...\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample case we can't (and don't have to) move, hence the only path consists of a single cell $(1, 1)$.\n\nIn the second sample case the goal is blocked and is unreachable.\n\nIllustrations for the third sample case can be found here: https://assets.codeforces.com/rounds/1225/index.html", "difficulty": "interview", "id": 1604, "sample_io": [{"input": "1 1\n.\n", "output": ["1\n"]}, {"input": "2 3\n...\n..R\n", "output": ["0\n"]}, {"input": "4 4\n...R\n.RR.\n.RR.\nR...\n", "output": ["4\n"]}], "test_list": [{"input": "1 1\n.\n", "output": ["1\n"]}, {"input": "2 3\n...\n..R\n", "output": ["0\n"]}, {"input": "4 4\n...R\n.RR.\n.RR.\nR...\n", "output": ["4\n"]}, {"input": "1 3\n.R.\n", "output": ["0\n"]}, {"input": "2 2\n.R\nR.\n", "output": ["0\n"]}, {"input": "10 10\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n", "output": ["48620\n"]}], "starter_code": "", "source_codes": ["\nmod = 10**9 + 7\n\nfor _ in range(1):\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    dp = [[0]*(m+2) for _ in range(n+2)]\n    dp[0][1] = 1 if grid[0][1] == '.' else 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if grid[i-1][j] == 'R':\n                dp[i][j] += dp[i-1][j]\n                dp[i][j] %= mod\n            else:\n                dp[i][j] = (dp[i][j] + dp[i-1][j]) % mod\n\n            if grid[i][j-1] == 'R':\n                dp[i][j] += dp[i][j-1]\n                dp[i][j] %= mod\n            else:\n                dp[i][j] = (dp[i][j] + dp[i][j-1]) % mod\n\n    print(dp[n][m])\n\n\n"], "responses": ["```python\nmod = 10**9 + 7\n\nfor _ in range(1):\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    dp = [[0]*(m+2) for _ in range(n+2)]\n    dp[0][1] = 1 if grid[0][1] == '.' else 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if grid[i-1][j] == 'R':\n                dp[i][j] += dp[i-1][j]\n                dp[i][j] %= mod\n            else:\n                dp[i][j] = (dp[i][j] + dp[i-1][j]) % mod\n\n            if grid[i][j-1] == 'R':\n                dp[i][j] += dp[i][j-1]\n                dp[i][j] %= mod\n            else:\n                dp[i][j] = (dp[i][j] + dp[i][j-1]) % mod\n\n    print(dp[n][m])\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1604}
{"name": "1658", "description": "The aim is to calculate `exponential(x)` (written `exp(x)` in most math libraries) as an irreducible fraction, the numerator of this fraction having a given number of digits.\n\nWe call this function `expand`, it takes two parameters, `x` of which we want to evaluate the exponential, `digits` which is the required number of digits for the numerator. \n\nThe function `expand` will return an array of the form `[numerator, denominator]`; we stop the loop in the Taylor expansion (see references below) when the numerator has a number of digits `>=` the required number of digits\n\n# Examples:\n```\nexpand(1, 2) --> 65/24 (we will write this [65, 24] or (65, 24) in Haskell; \n65/24 ~ 2.708...)\n\nexpand(2, 5) --> [20947, 2835]\n\nexpand(3, 10) --> [7205850259, 358758400]\n\nexpand(1.5, 10) --> [36185315027,8074035200]\n```\n**Note**\n```expand(1,5) = [109601, 40320]``` is the same as ```expand(1, 6)```\n\n#Method:\nAs said above the way here is to use `Taylor expansion` of the exponential function though it is not always the best approximation by a rational.\n\n#References:\nhttps://en.wikipedia.org/wiki/Exponential_function#Formal_definition\n\nhttp://www.efunda.com/math/taylor_series/exponential.cfm", "difficulty": "interview", "id": 1658, "sample_io": [{"input": "1\n2", "output": [[65, 24]]}, {"input": "2\n5", "output": [[20947, 2835]]}, {"input": "3\n10", "output": [[7205850259, 358758400]]}, {"input": "1.5\n10", "output": [[36185315027, 8074035200]]}], "test_list": [{"input": "1\n2", "output": [[65, 24]]}, {"input": "1\n5", "output": [[109601, 40320]]}, {"input": "1\n6", "output": [[109601, 40320]]}, {"input": "10\n3", "output": [[683, 3]]}, {"input": "10\n4", "output": [[1933, 3]]}, {"input": "10\n40", "output": [[1239343290542858204293897268755807211243, 56266098342252742161373730812700463]]}, {"input": "10\n39", "output": [[1239343290542858204293897268755807211243, 56266098342252742161373730812700463]]}, {"input": "10\n38", "output": [[1239343290542858204293897268755807211243, 56266098342252742161373730812700463]]}, {"input": "1.5\n10", "output": [[36185315027, 8074035200]]}, {"input": "1.6\n10", "output": [[27425286391, 5537109375]]}, {"input": "1.7\n10", "output": [[3933851989, 720000000]]}, {"input": "1.7\n12", "output": [[22069373989681, 4032000000000]]}, {"input": "1.7\n15", "output": [[1986362246947787, 362880000000000]]}, {"input": "1.8\n20", "output": [[13246837419514181887, 2189687500000000000]]}, {"input": "2.0\n20", "output": [[355236915407681299637, 48076088562799171875]]}, {"input": "1.95\n60", "output": [[12382830214749612215651955187527316512224932853910667762866497, 1761755672416929554471321600000000000000000000000000000000000]]}], "starter_code": "\ndef expand(x, digit):\n\t", "source_codes": ["\ndef expand(x, digits):\n    numerator = int(1)\n    denominator = int(1)\n    \n    while True:\n        new_numerator = int(numerator * x + 0.5)\n        if len(str(new_numerator)) >= digits:\n            return [new_numerator, denominator]\n        \n        numerator = new_numerator\n        denominator *= (int(x) + 1)\n\nans = expand(2, 10)\nprint(ans)\n\n\n"], "responses": ["```python\ndef expand(x, digits):\n    numerator = int(1)\n    denominator = int(1)\n    \n    while True:\n        new_numerator = int(numerator * x + 0.5)\n        if len(str(new_numerator)) >= digits:\n            return [new_numerator, denominator]\n        \n        numerator = new_numerator\n        denominator *= (int(x) + 1)\n\nans = expand(2, 10)\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1658}
{"name": "1626", "description": "Consider the following array:\n\n```\n[1, 12, 123, 1234, 12345, 123456, 1234567, 12345678, 123456789, 12345678910, 1234567891011...]\n```\n\nIf we join these blocks of numbers, we come up with an infinite sequence which starts with `112123123412345123456...`. The list is infinite.\n\nYou will be given an number (`n`) and your task will be to return the element at that index in the sequence, where `1 \u2264 n \u2264 10^18`. Assume the indexes start with `1`, not `0`.  For example:\n\n```\nsolve(1) = 1, because the first character in the sequence is 1. There is no index 0. \nsolve(2) = 1, because the second character is also 1.\nsolve(3) = 2, because the third character is 2.\n```\n\nMore examples in the test cases. Good luck!", "difficulty": "interview", "id": 1626, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [1]}, {"input": "3", "output": [2]}], "test_list": [{"input": "1", "output": [1]}, {"input": "2", "output": [1]}, {"input": "3", "output": [2]}, {"input": "100", "output": [1]}, {"input": "2100", "output": [2]}, {"input": "31000", "output": [2]}, {"input": "55", "output": [1]}, {"input": "123456", "output": [6]}, {"input": "123456789", "output": [3]}, {"input": "999999999999999999", "output": [4]}, {"input": "1000000000000000000", "output": [1]}, {"input": "999999999999999993", "output": [7]}], "starter_code": "\ndef solve(n):\n\t", "source_codes": ["\ndef next(n):\n    if n < 9:\n        return [n]\n    elif n == 9:\n        return ['9']\n    else:\n        a = str(n // 10)\n        b = str(n % 10)\n\n        s1 = ''.join(next(int(a)))\n        s2 = b\n\n        return list(s1 + s2)\n\ndef solve():\n    # Take user input as an integer representing the current index in the sequence\n    n = int(input())\n\n    # Convert 'n' to a string and calculate its length (number of digits)\n    s = str(n)\n    len_s = len(s)\n\n    # Calculate the sum of all numbers up to 'len_s'\n    tot = 0\n    for i in range(1, len_s + 1):\n        tot += next(i)[0]\n\n    # Initialize a variable 'ind' to store the current index in the sequence\n    ind = 0\n\n    # Step 1: Iterate through all numbers from 1 to 'len_s'\n    for i in range(1, len_s + 1):\n        # Convert each number to a string and get its length (number of digits)\n        t = str(i)\n        len_t = len(t)\n\n        # Calculate the sum of all numbers up to 'len_t'\n        tot = 0\n        for j in range(1, len_t + 1):\n            tot += next(j)[0]\n\n        # Step 2: Check if the current index is within the calculated sum\n        if ind <= tot:\n            # Update 'ind' and break out of the loop\n            ind = i\n            break\n\n    # Return the element at the updated index in the sequence\n    return next(ind)[0]\n\n# Call the solve function to get the answer\nans = solve()\nprint(ans)\n\n\n"], "responses": ["```python\ndef next(n):\n    if n < 9:\n        return [n]\n    elif n == 9:\n        return ['9']\n    else:\n        a = str(n // 10)\n        b = str(n % 10)\n\n        s1 = ''.join(next(int(a)))\n        s2 = b\n\n        return list(s1 + s2)\n\ndef solve():\n    # Take user input as an integer representing the current index in the sequence\n    n = int(input())\n\n    # Convert 'n' to a string and calculate its length (number of digits)\n    s = str(n)\n    len_s = len(s)\n\n    # Calculate the sum of all numbers up to 'len_s'\n    tot = 0\n    for i in range(1, len_s + 1):\n        tot += next(i)[0]\n\n    # Initialize a variable 'ind' to store the current index in the sequence\n    ind = 0\n\n    # Step 1: Iterate through all numbers from 1 to 'len_s'\n    for i in range(1, len_s + 1):\n        # Convert each number to a string and get its length (number of digits)\n        t = str(i)\n        len_t = len(t)\n\n        # Calculate the sum of all numbers up to 'len_t'\n        tot = 0\n        for j in range(1, len_t + 1):\n            tot += next(j)[0]\n\n        # Step 2: Check if the current index is within the calculated sum\n        if ind <= tot:\n            # Update 'ind' and break out of the loop\n            ind = i\n            break\n\n    # Return the element at the updated index in the sequence\n    return next(ind)[0]\n\n# Call the solve function to get the answer\nans = solve()\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1626}
{"name": "1621", "description": "Write a function that counts how many different ways you can make change for an amount of money, given an array of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2: \n```\n1+1+1+1, 1+1+2, 2+2.\n```\nThe order of coins does not matter:\n```\n1+1+2 == 2+1+1\n```\nAlso, assume that you have an infinite amount of coins.\n\nYour function should take an amount to change and an array of unique denominations for the coins:\n\n```python\n  count_change(4, [1,2]) # => 3\n  count_change(10, [5,2,3]) # => 4\n  count_change(11, [5,7]) # => 0\n```", "difficulty": "interview", "id": 1621, "sample_io": [{"input": "4\n[1, 2]", "output": [3]}, {"input": "10\n[5, 2, 3]", "output": [4]}, {"input": "11\n[5, 7]", "output": [0]}], "test_list": [{"input": "4\n[1, 2]", "output": [3]}, {"input": "10\n[5, 2, 3]", "output": [4]}, {"input": "11\n[5, 7]", "output": [0]}, {"input": "98\n[3, 14, 8]", "output": [19]}, {"input": "199\n[3, 5, 9, 15]", "output": [760]}, {"input": "300\n[5, 10, 20, 50, 100, 200, 500]", "output": [1022]}, {"input": "301\n[5, 10, 20, 50, 100, 200, 500]", "output": [0]}, {"input": "419\n[2, 5, 10, 20, 50]", "output": [18515]}], "starter_code": "\ndef count_change(money, coins):\n\t", "source_codes": ["\ndef count_change(amount, denominations):\n    ways = [0]*(amount+1)\n    ways[0] = 1\n    \n    for denom in denominations:\n        for i in range(denom, amount + 1):\n            ways[i] += ways[i - denom]\n    \n    return ways[amount]\n\n# Take user input as an integer representing the amount to change\nn = int(input())\n\n# Take user input as a list of unique coin denominations\ndenominations = list(map(int, input().split()))\n\n# Call the function and print the result\nprint(count_change(n, denominations))\n\n\n"], "responses": ["```python\ndef count_change(amount, denominations):\n    ways = [0]*(amount+1)\n    ways[0] = 1\n    \n    for denom in denominations:\n        for i in range(denom, amount + 1):\n            ways[i] += ways[i - denom]\n    \n    return ways[amount]\n\n# Take user input as an integer representing the amount to change\nn = int(input())\n\n# Take user input as a list of unique coin denominations\ndenominations = list(map(int, input().split()))\n\n# Call the function and print the result\nprint(count_change(n, denominations))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1621}
{"name": "1665", "description": "Complete the function/method (depending on the language) to return `true`/`True` when its argument is an array that has the same nesting structures and same corresponding length of nested arrays as the first array.\n\nFor example:\n\n```python\n# should return True\nsame_structure_as([ 1, 1, 1 ], [ 2, 2, 2 ] )\nsame_structure_as([ 1, [ 1, 1 ] ], [ 2, [ 2, 2 ] ] )\n\n# should return False \nsame_structure_as([ 1, [ 1, 1 ] ], [ [ 2, 2 ], 2 ] )\nsame_structure_as([ 1, [ 1, 1 ] ], [ [ 2 ], 2 ] )\n\n# should return True\nsame_structure_as([ [ [ ], [ ] ] ], [ [ [ ], [ ] ] ] )\n\n# should return False\nsame_structure_as([ [ [ ], [ ] ] ], [ [ 1, 1 ] ] )\n```\n\n~~~if:javascript\nFor your convenience, there is already a function 'isArray(o)' declared and defined that returns true if its argument is an array, false otherwise.\n~~~\n\n~~~if:php\nYou may assume that all arrays passed in will be non-associative.\n~~~", "difficulty": "interview", "id": 1665, "sample_io": [{"input": "[1, 1, 1]\n[2, 2, 2]", "output": [true]}, {"input": "[1, [1, 1]]\n[2, [2, 2]]", "output": [true]}, {"input": "[1, [1, 1]]\n[[2, 2], 2]", "output": [false]}, {"input": "[1, [1, 1]]\n[[2], 2]", "output": [false]}, {"input": "[[[], []]]\n[[[], []]]", "output": [true]}, {"input": "[[[], []]]\n[[1, 1]]", "output": [false]}], "test_list": [{"input": "[1, [1, 1]]\n[[2, 2], 2]", "output": [false]}, {"input": "[1, [1, 1]]\n[2, [2]]", "output": [false]}, {"input": "[[[], []]]\n[[[], []]]", "output": [true]}, {"input": "[[[], []]]\n[[1, 1]]", "output": [false]}, {"input": "[1, [[[1]]]]\n[2, [[[2]]]]", "output": [true]}, {"input": "[]\n1", "output": [false]}, {"input": "[]\n{}", "output": [false]}, {"input": "[1, '[', ']']\n['[', ']', 1]", "output": [true]}], "starter_code": "\ndef same_structure_as(a, b):\n\t", "source_codes": ["\ndef same_structure_as(a, b):\n    if not isinstance(a, list) or not isinstance(b, list): # check if a and b are lists \n        return False\n    for i in range(min(len(a), len(b))):\n        if not same_structure_as(a[i], b[i]): # recursively compare elements within the list\n            return False\n    return len(a) == len(b)\n\n\n"], "responses": ["```python\ndef same_structure_as(a, b):\n    if not isinstance(a, list) or not isinstance(b, list): # check if a and b are lists \n        return False\n    for i in range(min(len(a), len(b))):\n        if not same_structure_as(a[i], b[i]): # recursively compare elements within the list\n            return False\n    return len(a) == len(b)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1665}
{"name": "1629", "description": "# Task\n Sorting is one of the most basic computational devices used in Computer Science. \n \n Given a sequence (length \u2264 1000) of 3 different key values (7, 8, 9), your task is to find the minimum number of exchange operations necessary to make the sequence sorted. \n\n One operation is the switching of 2 key values in the sequence.\n\n# Example\n\n For `sequence = [7, 7, 8, 8, 9, 9]`, the result should be `0`.\n \n It's already a sorted sequence.\n\n For `sequence = [9, 7, 8, 8, 9, 7]`, the result should be `1`.\n \n We can switching `sequence[0]` and `sequence[5]`.\n \n For `sequence = [8, 8, 7, 9, 9, 9, 8, 9, 7]`, the result should be `4`.\n \n We can:\n```\n [8, 8, 7, 9, 9, 9, 8, 9, 7] \n switching sequence[0] and sequence[3]\n --> [9, 8, 7, 8, 9, 9, 8, 9, 7]\n switching sequence[0] and sequence[8]\n --> [7, 8, 7, 8, 9, 9, 8, 9, 9]\n switching sequence[1] and sequence[2]\n --> [7, 7, 8, 8, 9, 9, 8, 9, 9]\n switching sequence[5] and sequence[7]\n --> [7, 7, 8, 8, 8, 9, 9, 9, 9] \n```\nSo `4` is the minimum number of operations for the sequence to become sorted.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n  The Sequence.\n\n\n - `[output]` an integer\n\n  the minimum number of operations.", "difficulty": "interview", "id": 1629, "sample_io": [{"input": "[7, 7, 8, 8, 9, 9]", "output": [0]}, {"input": "[9, 7, 8, 8, 9, 7]", "output": [1]}, {"input": "[8, 8, 7, 9, 9, 9, 8, 9, 7]", "output": [4]}], "test_list": [{"input": "[7, 7, 8, 8, 9, 9]", "output": [0]}, {"input": "[9, 7, 8, 8, 9, 7]", "output": [1]}, {"input": "[8, 8, 7, 9, 9, 9, 8, 9, 7]", "output": [4]}, {"input": "[9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7]", "output": [6]}, {"input": "[9, 9, 9, 7, 7, 8, 9, 7, 8, 9, 7, 9]", "output": [4]}, {"input": "[9, 9, 7, 7, 8, 8]", "output": [4]}, {"input": "[9, 7, 9]", "output": [1]}, {"input": "[8, 7, 8]", "output": [1]}, {"input": "[7, 8, 7, 8]", "output": [1]}, {"input": "[8, 8, 7, 8]", "output": [1]}, {"input": "[8, 8, 7, 7, 8]", "output": [2]}], "starter_code": "\ndef exchange_sort(sequence):\n\t", "source_codes": ["\ndef min_operations(sequence):\n    n = len(sequence)\n    \n    # Create a sorted copy of the sequence using list comprehension with if condition\n    sorted_sequence = [num for num in sorted(set(sequence))]\n    \n    # Count the number of elements that need to be swapped (different index positions)\n    operations = sum(1 for i, j in zip(sorted_sequence, sequence) if i != j)\n    \n    return operations\n\n# Take input from user\nsequence = list(map(int, input().split()))\n\n# Call function with input and print output\nprint(min_operations(sequence))\n\n\n"], "responses": ["```python\ndef min_operations(sequence):\n    n = len(sequence)\n    \n    # Create a sorted copy of the sequence using list comprehension with if condition\n    sorted_sequence = [num for num in sorted(set(sequence))]\n    \n    # Count the number of elements that need to be swapped (different index positions)\n    operations = sum(1 for i, j in zip(sorted_sequence, sequence) if i != j)\n    \n    return operations\n\n# Take input from user\nsequence = list(map(int, input().split()))\n\n# Call function with input and print output\nprint(min_operations(sequence))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1629}
{"name": "1630", "description": "Story:\nIn the realm of numbers, the apocalypse has arrived. Hordes of zombie numbers have infiltrated and are ready to turn everything into undead. The properties of zombies are truly apocalyptic: they reproduce themselves unlimitedly and freely interact with each other. Anyone who equals them is doomed. Out of an infinite number of natural numbers, only a few remain. This world needs a hero who leads remaining numbers in hope for survival: The highest number to lead those who still remain.\n\nBriefing:\nThere is a list of positive natural numbers. Find the largest number that cannot be represented as the sum of this numbers, given that each number can be added unlimited times. Return this number, either 0 if there are no such numbers, or -1 if there are an infinite number of them.\n\nExample:\n```\nLet's say [3,4] are given numbers. Lets check each number one by one:\n1 - (no solution) - good\n2 - (no solution) - good\n3 = 3 won't go\n4 = 4 won't go\n5 - (no solution) - good\n6 = 3+3 won't go\n7 = 3+4 won't go\n8 = 4+4 won't go\n9 = 3+3+3 won't go\n10 = 3+3+4 won't go\n11 = 3+4+4 won't go\n13 = 3+3+3+4 won't go\n```\n...and so on. So 5 is the biggest 'good'. return 5\n\nTest specs:\nRandom cases will input up to 10 numbers with up to 1000 value\n\nSpecial thanks:\nThanks to Voile-sama, mathsisfun-sama, and Avanta-sama for heavy assistance. And to everyone who tried and beaten the kata ^_^", "difficulty": "interview", "id": 1630, "sample_io": [{"input": "[3,4]", "output": [5]}], "test_list": [{"input": "[7, 11]", "output": [59]}, {"input": "[1, 7, 15]", "output": [0]}, {"input": "[2, 10]", "output": [-1]}, {"input": "[687, 829, 998]", "output": [45664]}, {"input": "[]", "output": [-1]}, {"input": "[1]", "output": [0]}], "starter_code": "\ndef survivor(zombies):\n\t", "source_codes": ["\nfrom functools import lru_cache\n\nclass Solution:\n    def __init__(self):\n        self.arr = [0] * 10000\n        for i in range(1, 10000):\n            if not any(i & (j << j) != 0 for j in range(16)):\n                self.arr[i] = 1\n\n    @lru_cache(maxsize=None)\n    def solve(self, n, total_sum, index):\n        if index == len(n):\n            return True\n        if self.arr[total_sum + n[index]] == 1:\n            return False\n        return not self.solve(n, total_sum + n[index], index)\n\n    def findTheHighestNumber(self, nums):\n        \"\"\"Returns the highest number that cannot be represented as the sum of this numbers\"\"\"\n        n = sorted(set(nums))\n        for i in range(2 ** len(n)):\n            temp = 0\n            temp_sum = 0\n            for j in range(len(n)):\n                if (i >> j) & 1:\n                    temp_sum += n[j]\n                    temp |= 1 << j\n            if self.solve(n, temp_sum, 0):\n                return i\n        return -1\n\ns = Solution()\nnums = list(map(int, input()[1:-1].split(',')))\nprint(s.findTheHighestNumber(nums))\n\n\n"], "responses": ["```python\nfrom functools import lru_cache\n\nclass Solution:\n    def __init__(self):\n        self.arr = [0] * 10000\n        for i in range(1, 10000):\n            if not any(i & (j << j) != 0 for j in range(16)):\n                self.arr[i] = 1\n\n    @lru_cache(maxsize=None)\n    def solve(self, n, total_sum, index):\n        if index == len(n):\n            return True\n        if self.arr[total_sum + n[index]] == 1:\n            return False\n        return not self.solve(n, total_sum + n[index], index)\n\n    def findTheHighestNumber(self, nums):\n        \"\"\"Returns the highest number that cannot be represented as the sum of this numbers\"\"\"\n        n = sorted(set(nums))\n        for i in range(2 ** len(n)):\n            temp = 0\n            temp_sum = 0\n            for j in range(len(n)):\n                if (i >> j) & 1:\n                    temp_sum += n[j]\n                    temp |= 1 << j\n            if self.solve(n, temp_sum, 0):\n                return i\n        return -1\n\ns = Solution()\nnums = list(map(int, input()[1:-1].split(',')))\nprint(s.findTheHighestNumber(nums))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1630}
{"name": "1647", "description": "Create a function that takes a positive integer and returns the next bigger number that can be formed by rearranging its digits. For example:\n\n```\n12 ==> 21\n513 ==> 531\n2017 ==> 2071\n```\n\nIf the digits can't be rearranged to form a bigger number, return `-1` (or `nil` in Swift):\n\n```\n9 ==> -1\n111 ==> -1\n531 ==> -1\n```", "difficulty": "interview", "id": 1647, "sample_io": [{"input": "12", "output": [21]}, {"input": "513", "output": [531]}, {"input": "2017", "output": [2071]}, {"input": "9", "output": [-1]}, {"input": "111", "output": [-1]}, {"input": "531", "output": [-1]}], "test_list": [{"input": "12", "output": [21]}, {"input": "513", "output": [531]}, {"input": "2017", "output": [2071]}, {"input": "414", "output": [441]}, {"input": "144", "output": [414]}, {"input": "123456789", "output": [123456798]}, {"input": "1234567890", "output": [1234567908]}, {"input": "9876543210", "output": [-1]}, {"input": "9999999999", "output": [-1]}, {"input": "59884848459853", "output": [59884848483559]}], "starter_code": "\ndef next_bigger(n):\n\t", "source_codes": ["\ndef next_bigger(n):\n    s = str(n)\n    i = 0\n    while i < len(s) - 1 and s[i] <= s[i + 1]:\n        i += 1\n    if i == len(s) - 1:\n        return -1\n\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = s[i + 1:][::-1]\n\n    return int(''.join(s))\n\n# Take user input as a positive integer\nn = int(input())\n\n# Call the function and print the result\nprint(next_bigger(n))\n\n\n"], "responses": ["```python\ndef next_bigger(n):\n    s = str(n)\n    i = 0\n    while i < len(s) - 1 and s[i] <= s[i + 1]:\n        i += 1\n    if i == len(s) - 1:\n        return -1\n\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n\n    s = list(s)\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = s[i + 1:][::-1]\n\n    return int(''.join(s))\n\n# Take user input as a positive integer\nn = int(input())\n\n# Call the function and print the result\nprint(next_bigger(n))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1647}
{"name": "1663", "description": "In this Kata we focus on finding a sum S(n) which is the total number of divisors taken for all natural numbers less or equal to n. More formally, we investigate the sum of n components denoted by d(1) + d(2) + ... + d(n) in which for any i starting from 1 up to n the value of d(i) tells us how many distinct numbers divide i without a remainder. \n\nYour solution should work for possibly large values of n without a timeout.\nAssume n to be greater than zero and not greater than 999 999 999 999 999.\nBrute force approaches will not be feasible options in such cases. It is fairly simple to conclude that for every n>1 there holds a recurrence S(n) = S(n-1) + d(n) with initial case S(1) = 1.\n\nFor example:\nS(1) = 1\nS(2) = 3\nS(3) = 5\nS(4) = 8\nS(5) = 10\n\nBut is the fact useful anyway? If you find it is rather not, maybe this will help: \n\nTry to convince yourself that for any natural k, the number S(k) is the same as the number of pairs (m,n) that solve the inequality mn <= k in natural numbers.\nOnce it becomes clear, we can think of a partition of all the solutions into classes just by saying that a pair (m,n) belongs to the class indexed by n.\nThe question now arises if it is possible to count solutions of n-th class. If f(n) stands for the number of solutions that belong to n-th class, it means that S(k) = f(1) + f(2) + f(3) + ...\n\nThe reasoning presented above leads us to some kind of a formula for S(k), however not necessarily the most efficient one. Can you imagine that all the solutions to inequality mn <= k can be split using sqrt(k) as pivotal item?", "difficulty": "interview", "id": 1663, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [3]}, {"input": "3", "output": [5]}, {"input": "4", "output": [8]}, {"input": "5", "output": [10]}], "test_list": [{"input": "5", "output": [10]}, {"input": "10", "output": [27]}, {"input": "20", "output": [66]}, {"input": "59", "output": [249]}, {"input": "105", "output": [510]}, {"input": "785", "output": [5364]}, {"input": "1001", "output": [7077]}, {"input": "8009", "output": [73241]}, {"input": "9999999999999", "output": [300880375389561]}, {"input": "9999999999998", "output": [300880375389537]}, {"input": "9999999999995", "output": [300880375389493]}, {"input": "9999999949950", "output": [300880373832097]}], "starter_code": "\ndef count_divisors(n):\n\t", "source_codes": ["\nimport math\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n = int(input())\n\n    # Calculate S(n)\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        count = 0\n        while n >= (i ** 2) and count < (n // (i ** 2)):\n            result += int(math.sqrt(n - (count * i ** 2))) + 1\n            count += 1\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport math\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n = int(input())\n\n    # Calculate S(n)\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        count = 0\n        while n >= (i ** 2) and count < (n // (i ** 2)):\n            result += int(math.sqrt(n - (count * i ** 2))) + 1\n            count += 1\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1663}
{"name": "1659", "description": "# How many ways can you make the sum of a number?\n\nFrom wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)#\n\n>In number theory and combinatorics, a partition of a positive integer *n*, also called an *integer partition*, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. If order matters, the sum becomes a composition. For example, 4 can be partitioned in five distinct ways:\n```\n4\n3 + 1\n2 + 2\n2 + 1 + 1\n1 + 1 + 1 + 1\n```\n\n## Examples\n\n### Basic\n\n```python\nexp_sum(1) # 1\nexp_sum(2) # 2  -> 1+1 , 2\nexp_sum(3) # 3 -> 1+1+1, 1+2, 3\nexp_sum(4) # 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) # 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) # 42\n```\n\n### Explosive\n\n```python\nexp_sum(50) # 204226\nexp_sum(80) # 15796476\nexp_sum(100) # 190569292\n```\n\nSee [here](http://www.numericana.com/data/partition.htm) for more examples.", "difficulty": "interview", "id": 1659, "sample_io": [{"input": "1", "output": [1]}, {"input": "2", "output": [2]}, {"input": "3", "output": [3]}, {"input": "4", "output": [5]}, {"input": "5", "output": [7]}, {"input": "10", "output": [42]}, {"input": "50", "output": [204226]}, {"input": "80", "output": [15796476]}, {"input": "100", "output": [190569292]}], "test_list": [{"input": "1", "output": [1]}, {"input": "2", "output": [2]}, {"input": "3", "output": [3]}, {"input": "4", "output": [5]}, {"input": "5", "output": [7]}, {"input": "20", "output": [627]}, {"input": "30", "output": [5604]}, {"input": "40", "output": [37338]}, {"input": "43", "output": [63261]}, {"input": "60", "output": [966467]}, {"input": "70", "output": [4087968]}, {"input": "90", "output": [56634173]}, {"input": "200", "output": [3972999029388]}, {"input": "275", "output": [1520980492851175]}], "starter_code": "\ndef exp_sum(n):\n\t", "source_codes": ["\nfrom functools import lru_cache\n\ndef exp_sum(n):\n    @lru_cache(maxsize=None)\n    def dp(i, total=0):\n        if i == 0:\n            return int(total > 0)\n        count = 0\n        for j in range(min(5, n - total), 0, -1):\n            count += dp(i - 1, total + j)\n        return count\n    \n    return dp(n)\n\nprint(exp_sum(int(input())))\n\n\n"], "responses": ["```python\nfrom functools import lru_cache\n\ndef exp_sum(n):\n    @lru_cache(maxsize=None)\n    def dp(i, total=0):\n        if i == 0:\n            return int(total > 0)\n        count = 0\n        for j in range(min(5, n - total), 0, -1):\n            count += dp(i - 1, total + j)\n        return count\n    \n    return dp(n)\n\nprint(exp_sum(int(input())))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1659}
{"name": "1618", "description": "Create a function that differentiates a polynomial for a given value of `x`.\n\nYour function will receive 2 arguments: a polynomial as a string, and a point to evaluate the equation as an integer.\n\n## Assumptions:\n\n* There will be a coefficient near each `x`, unless the coefficient equals `1` or `-1`.\n* There will be an exponent near each `x`, unless the exponent equals `0` or `1`.\n* All exponents will be greater or equal to zero\n\n## Examples:\n\n```python\ndifferenatiate(\"12x+2\", 3)      ==>   returns 12\ndifferenatiate(\"x^2+3x+2\", 3)   ==>   returns 9\n```", "difficulty": "interview", "id": 1618, "sample_io": [{"input": "12x+2\n3", "output": [12]}, {"input": "x^2+3x+2\n3", "output": [9]}], "test_list": [{"input": "12x+2\n3", "output": [12]}, {"input": "x-66\n3", "output": [1]}, {"input": "x^2-x\n3", "output": [5]}, {"input": "-5x^2+10x+4\n3", "output": [-20]}, {"input": "x^2+3x+3\n3", "output": [9]}, {"input": "1000x^2+300x+200\n531", "output": [1062300]}, {"input": "21x^2+35x+3\n2071", "output": [87017]}, {"input": "66x^3+3x^2+3\n441", "output": [38509884]}, {"input": "21x^4+3x^3\n414", "output": [5962009860]}, {"input": "-21x^5+3x^3\n12398", "output": [-2480823269890144044]}, {"input": "-x^2+3x-3\n1234567908", "output": [-2469135813]}, {"input": "-7x^5+22x^4-55x^3-94x^2+87x-56\n-3", "output": [-6045]}, {"input": "-123x^5+3x\n8559", "output": [-3300404885229567012]}, {"input": "x^2\n59884848483559", "output": [119769696967118]}], "starter_code": "\ndef differentiate(equation, point):\n\t", "source_codes": ["\ndef differenatiate(p, x):\n    coefficients = [0] * (len(p) + 1)\n    \n    for i in range(len(p)):\n        if p[i].isdigit():\n            start = i\n            while start < len(p) and p[start].isdigit():\n                start += 1\n            \n            end = i\n            while end > -1 and p[end].isdigit():\n                end -= 1\n            \n            value = int(p[i:end+1])\n            \n            if 'x' not in p or x != 1:\n                coefficients[len(p) - (end + 1)] *= value\n                \n            else:\n                coefficients[0] += value\n                \n        elif p[i] == 'x':\n            coefficient_value = 1\n            exponent = int(''.join(filter(str.isdigit, p[i+1:]))) if 'x' in p and len(p) > i else -1\n            \n            if 'x^' in p:\n                exponent = int(''.join(filter(str.isdigit, p[i+4:])))\n                \n            coefficients[exponent] *= coefficient_value\n                \n    result = 0\n    for power, value in enumerate(coefficients):\n        result += value * x ** power\n        \n    return result\n\n# Take input from user\np = input()\nx = int(input())\n\nprint(differenatiate(p, x))\n\n\n"], "responses": ["```python\ndef differenatiate(p, x):\n    coefficients = [0] * (len(p) + 1)\n    \n    for i in range(len(p)):\n        if p[i].isdigit():\n            start = i\n            while start < len(p) and p[start].isdigit():\n                start += 1\n            \n            end = i\n            while end > -1 and p[end].isdigit():\n                end -= 1\n            \n            value = int(p[i:end+1])\n            \n            if 'x' not in p or x != 1:\n                coefficients[len(p) - (end + 1)] *= value\n                \n            else:\n                coefficients[0] += value\n                \n        elif p[i] == 'x':\n            coefficient_value = 1\n            exponent = int(''.join(filter(str.isdigit, p[i+1:]))) if 'x' in p and len(p) > i else -1\n            \n            if 'x^' in p:\n                exponent = int(''.join(filter(str.isdigit, p[i+4:])))\n                \n            coefficients[exponent] *= coefficient_value\n                \n    result = 0\n    for power, value in enumerate(coefficients):\n        result += value * x ** power\n        \n    return result\n\n# Take input from user\np = input()\nx = int(input())\n\nprint(differenatiate(p, x))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1618}
{"name": "1638", "description": "# Longest Palindromic Substring (Linear)\n\nA palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g.,\n'madam' or 'racecar'. Even the letter 'x' is considered a palindrome. \n\nFor this Kata, you are given a string ```s```. Write a function that returns the longest _contiguous_ palindromic substring in ```s``` (it could be the entire string). In the event that there are multiple longest palindromic substrings, return the first to occur.\n\nI'm not trying to trick you here:\n- You can assume that all inputs are valid strings.\n- Only the letters a-z will be used, all lowercase (your solution should, in theory, extend to more than just the letters a-z though). \n\n**NOTE:** Quadratic asymptotic complexity _(O(N^2))_ or above will __NOT__ work here.\n\n-----\n\n## Examples\n\n### Basic Tests\n\n```\nInput: \"babad\"\nOutput: \"bab\"\n(Note: \"bab\" occurs before \"aba\")\n```\n```\nInput: \"abababa\"\nOutput: \"abababa\"\n```\n```\nInput: \"cbbd\"\nOutput: \"bb\"\n```\n\n### Edge Cases\n\n```\nInput: \"ab\"\nOutput: \"a\"\n```\n```\nInput: \"\"\nOutput: \"\"\n```\n-----\n\n## Testing\n\nAlong with the example tests given:\n\n - There are **500** tests using strings of length in range [1 - 1,000]\n - There are **50** tests using strings of length in range [1,000 - 10,000]\n - There are **5** tests using strings of length in range [10,000 - 100,000]\n \nAll test cases can be passed within 10 seconds, but non-linear solutions will time out every time. _Linear performance is essential_. \n\n## Good Luck!\n\n-----\n\nThis problem was inspired by [this](https://leetcode.com/problems/longest-palindromic-substring/) challenge on LeetCode. Except this is the performance version :^)", "difficulty": "interview", "id": 1638, "sample_io": [{"input": "babad", "output": ["bab"]}, {"input": "abababa", "output": ["abababa"]}, {"input": "cbbd", "output": ["bb"]}, {"input": "ab", "output": ["a"]}, {"input": "", "output": [""]}], "test_list": [{"input": "babad", "output": ["bab"]}, {"input": "madam", "output": ["madam"]}, {"input": "dde", "output": ["dd"]}, {"input": "ababbab", "output": ["babbab"]}, {"input": "abababa", "output": ["abababa"]}, {"input": "banana", "output": ["anana"]}, {"input": "abba", "output": ["abba"]}, {"input": "cbbd", "output": ["bb"]}, {"input": "zz", "output": ["zz"]}, {"input": "dddd", "output": ["dddd"]}, {"input": "", "output": [""]}, {"input": "abcdefghijklmnopqrstuvwxyz", "output": ["a"]}, {"input": "ttaaftffftfaafatf", "output": ["aaftffftfaa"]}, {"input": "bbaaacc", "output": ["aaa"]}, {"input": "m", "output": ["m"]}], "starter_code": "\ndef longest_palindrome(s):\n\t", "source_codes": ["\ndef longest_palindrome(s):\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n    \n    max_len = 1\n    max_palindrome = s[0]\n    for i in range(len(s)):\n        # Odd length palindrome\n        palindrome = expand_around_center(i, i)\n        if len(palindrome) > max_len:\n            max_len = len(palindrome)\n            max_palindrome = palindrome\n        \n        # Even length palindrome\n        palindrome = expand_around_center(i, i + 1)\n        if len(palindrome) > max_len:\n            max_len = len(palindrome)\n            max_palindrome = palindrome\n            \n    return max_palindrome\n\ns = input()\nprint(longest_palindrome(s))\n\n\n"], "responses": ["```python\ndef longest_palindrome(s):\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n    \n    max_len = 1\n    max_palindrome = s[0]\n    for i in range(len(s)):\n        # Odd length palindrome\n        palindrome = expand_around_center(i, i)\n        if len(palindrome) > max_len:\n            max_len = len(palindrome)\n            max_palindrome = palindrome\n        \n        # Even length palindrome\n        palindrome = expand_around_center(i, i + 1)\n        if len(palindrome) > max_len:\n            max_len = len(palindrome)\n            max_palindrome = palindrome\n            \n    return max_palindrome\n\ns = input()\nprint(longest_palindrome(s))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1638}
{"name": "2096", "description": "You are given a sequence a_1, a_2, ..., a_{n} consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order.\n\nSorting integers in a subsequence is a process such that the numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places.\n\nEvery element of the sequence must appear in exactly one subsequence.\n\n\n-----Input-----\n\nThe first line of input data contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the sequence.\n\nThe second line of input data contains n different integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.\n\n\n-----Output-----\n\nIn the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements.\n\nIn the next k lines print the description of subsequences in the following format: the number of elements in subsequence c_{i} (0 < c_{i} \u2264 n), then c_{i} integers l_1, l_2, ..., l_{c}_{i} (1 \u2264 l_{j} \u2264 n)\u00a0\u2014 indices of these elements in the original sequence. \n\nIndices could be printed in any order. Every index from 1 to n must appear in output exactly once.\n\nIf there are several possible answers, print any of them.\n\n\n-----Examples-----\nInput\n6\n3 2 1 6 5 4\n\nOutput\n4\n2 1 3\n1 2\n2 4 6\n1 5\n\nInput\n6\n83 -75 -49 11 37 62\n\nOutput\n1\n6 1 2 3 4 5 6\n\n\n\n-----Note-----\n\nIn the first sample output:\n\nAfter sorting the first subsequence we will get sequence 1\u00a02\u00a03\u00a06\u00a05\u00a04.\n\nSorting the second subsequence changes nothing.\n\nAfter sorting the third subsequence we will get sequence 1\u00a02\u00a03\u00a04\u00a05\u00a06.\n\nSorting the last subsequence changes nothing.", "difficulty": "competition", "id": 2096, "sample_io": [{"input": "6\n3 2 1 6 5 4\n", "output": ["4\n2 1 3\n1 2\n2 4 6\n1 5\n"]}, {"input": "6\n83 -75 -49 11 37 62\n", "output": ["1\n6 1 2 3 4 5 6\n"]}], "test_list": [{"input": "6\n3 2 1 6 5 4\n", "output": ["4\n2 1 3\n1 2\n2 4 6\n1 5\n"]}, {"input": "6\n83 -75 -49 11 37 62\n", "output": ["1\n6 1 2 3 4 5 6\n"]}, {"input": "1\n1\n", "output": ["1\n1 1\n"]}, {"input": "2\n1 2\n", "output": ["2\n1 1\n1 2\n"]}, {"input": "2\n2 1\n", "output": ["1\n2 1 2\n"]}, {"input": "3\n1 2 3\n", "output": ["3\n1 1\n1 2\n1 3\n"]}, {"input": "3\n3 2 1\n", "output": ["2\n2 1 3\n1 2\n"]}, {"input": "3\n3 1 2\n", "output": ["1\n3 1 2 3\n"]}, {"input": "10\n3 7 10 1 9 5 4 8 6 2\n", "output": ["3\n6 1 4 7 2 10 3\n3 5 6 9\n1 8\n"]}, {"input": "20\n363756450 -204491568 95834122 -840249197 -49687658 470958158 -445130206 189801569 802780784 -790013317 -192321079 586260100 -751917965 -354684803 418379342 -253230108 193944314 712662868 853829789 735867677\n", "output": ["3\n7 1 4 7 2 10 3 13\n11 5 14 15 6 16 12 17 18 20 19 9\n2 8 11\n"]}, {"input": "50\n39 7 45 25 31 26 50 11 19 37 8 16 22 33 14 6 12 46 49 48 29 27 41 15 34 24 3 13 20 47 9 36 5 43 40 21 2 38 35 42 23 28 1 32 10 17 30 18 44 4\n", "output": ["6\n20 1 43 34 25 4 50 7 2 37 10 45 3 27 22 13 28 42 40 35 39\n23 5 33 14 15 24 26 6 16 12 17 46 18 48 20 29 21 36 32 44 49 19 9 31\n2 8 11\n2 23 41\n2 30 47\n1 38\n"]}, {"input": "100\n39 77 67 25 81 26 50 11 73 95 86 16 90 33 14 79 12 100 68 64 60 27 41 15 34 24 3 61 83 47 57 65 99 43 40 21 94 72 82 85 23 71 76 32 10 17 30 18 44 59 35 89 6 63 7 69 62 70 4 29 92 87 31 48 36 28 45 97 93 98 56 38 58 80 8 1 74 91 53 55 54 51 96 5 42 52 9 22 78 88 75 13 66 2 37 20 49 19 84 46\n", "output": ["6\n41 1 76 43 34 25 4 59 50 7 55 80 74 77 2 94 37 95 10 45 67 3 27 22 88 90 13 92 61 28 66 93 69 56 71 42 85 40 35 51 82 39\n45 5 84 99 33 14 15 24 26 6 53 79 16 12 17 46 100 18 48 64 20 96 83 29 60 21 36 65 32 44 49 97 68 19 98 70 58 73 9 87 62 57 31 63 54 81\n8 8 75 91 78 89 52 86 11\n2 23 41\n2 30 47\n2 38 72\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a list of integers representing the current year in Berland\n    s = sorted(map(int, input().split()))\n\n    ans = []\n    for i in range(len(s)):\n        if len(ans) == 0 or s[i] > ans[-1][-1]:\n            ans.append([s[i]])\n        else:\n            ans[-1].append(s[i])\n\n    print(len(ans))\n    for x in ans:\n        print(len(x), end=' ')\n        for y in x:\n            print(y, end=' ')\n        print()\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a list of integers representing the current year in Berland\n    s = sorted(map(int, input().split()))\n\n    ans = []\n    for i in range(len(s)):\n        if len(ans) == 0 or s[i] > ans[-1][-1]:\n            ans.append([s[i]])\n        else:\n            ans[-1].append(s[i])\n\n    print(len(ans))\n    for x in ans:\n        print(len(x), end=' ')\n        for y in x:\n            print(y, end=' ')\n        print()\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2096}
{"name": "2098", "description": "As you know, majority of students and teachers of Summer Informatics School live in Berland for the most part of the year. Since corruption there is quite widespread, the following story is not uncommon.\n\nElections are coming. You know the number of voters and the number of parties\u00a0\u2014 $n$ and $m$ respectively. For each voter you know the party he is going to vote for. However, he can easily change his vote given a certain amount of money. In particular, if you give $i$-th voter $c_i$ bytecoins you can ask him to vote for any other party you choose.\n\nThe United Party of Berland has decided to perform a statistical study\u00a0\u2014 you need to calculate the minimum number of bytecoins the Party needs to spend to ensure its victory. In order for a party to win the elections, it needs to receive strictly more votes than any other party.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n, m \\le 3000$)\u00a0\u2014 the number of voters and the number of parties respectively.\n\nEach of the following $n$ lines contains two integers $p_i$ and $c_i$ ($1 \\le p_i \\le m$, $1 \\le c_i \\le 10^9$)\u00a0\u2014 the index of this voter's preferred party and the number of bytecoins needed for him to reconsider his decision.\n\nThe United Party of Berland has the index $1$.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the minimum number of bytecoins needed for The United Party of Berland to win the elections.\n\n\n-----Examples-----\nInput\n1 2\n1 100\n\nOutput\n0\n\nInput\n5 5\n2 100\n3 200\n4 300\n5 400\n5 900\n\nOutput\n500\n\nInput\n5 5\n2 100\n3 200\n4 300\n5 800\n5 900\n\nOutput\n600\n\n\n\n-----Note-----\n\nIn the first sample, The United Party wins the elections even without buying extra votes.\n\nIn the second sample, The United Party can buy the votes of the first and the fourth voter. This way The Party gets two votes, while parties $3$, $4$ and $5$ get one vote and party number $2$ gets no votes.\n\nIn the third sample, The United Party can buy the votes of the first three voters and win, getting three votes against two votes of the fifth party.", "difficulty": "competition", "id": 2098, "sample_io": [{"input": "1 2\n1 100\n", "output": ["0\n"]}, {"input": "5 5\n2 100\n3 200\n4 300\n5 400\n5 900\n", "output": ["500\n"]}, {"input": "5 5\n2 100\n3 200\n4 300\n5 800\n5 900\n", "output": ["600\n"]}], "test_list": [{"input": "1 2\n1 100\n", "output": ["0\n"]}, {"input": "5 5\n2 100\n3 200\n4 300\n5 400\n5 900\n", "output": ["500\n"]}, {"input": "5 5\n2 100\n3 200\n4 300\n5 800\n5 900\n", "output": ["600\n"]}, {"input": "5 5\n1 3\n1 6\n5 4\n3 7\n2 10\n", "output": ["0\n"]}, {"input": "5 5\n1 7\n3 3\n2 7\n2 4\n1 2\n", "output": ["3\n"]}, {"input": "5 5\n2 5\n2 4\n2 1\n3 6\n3 7\n", "output": ["10\n"]}, {"input": "1 3000\n918 548706881\n", "output": ["548706881\n"]}, {"input": "10 10\n7 29\n10 31\n9 40\n5 17\n5 30\n6 85\n2 53\n7 23\n4 57\n10 9\n", "output": ["49\n"]}, {"input": "10 10\n1 73\n2 8\n3 88\n1 5\n2 100\n1 29\n1 57\n3 37\n7 46\n3 21\n", "output": ["0\n"]}, {"input": "10 10\n5 81\n7 68\n7 48\n1 10\n5 37\n7 97\n8 54\n7 41\n7 56\n5 21\n", "output": ["110\n"]}, {"input": "1 3000\n2006 226621946\n", "output": ["226621946\n"]}, {"input": "10 2\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n2 1\n2 1\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    n, m = map(int, input().split())\n    votes = [0] * (m + 1)\n    costs = [float('inf')] * (m + 1)\n\n    for _ in range(n):\n        p, c = map(int, input().split())\n        votes[p] += 1\n        costs[p] = min(costs[p], c)\n\n    cnt = sum(1 for x in costs[1:] if x < costs[1])\n    vote_sum = sum(votes[1:])\n    buy_voters = m - 2\n\n    for i in range(buy_voters):\n        max_cost = max(x for x in costs[:m] if x != float('inf'))\n        if vote_sum + (max_cost - costs[1]) > cnt:\n            vote_sum += (max_cost - costs[1])\n            cnt -= 1\n            costs[1] = max_cost\n\n    print(vote_sum)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    n, m = map(int, input().split())\n    votes = [0] * (m + 1)\n    costs = [float('inf')] * (m + 1)\n\n    for _ in range(n):\n        p, c = map(int, input().split())\n        votes[p] += 1\n        costs[p] = min(costs[p], c)\n\n    cnt = sum(1 for x in costs[1:] if x < costs[1])\n    vote_sum = sum(votes[1:])\n    buy_voters = m - 2\n\n    for i in range(buy_voters):\n        max_cost = max(x for x in costs[:m] if x != float('inf'))\n        if vote_sum + (max_cost - costs[1]) > cnt:\n            vote_sum += (max_cost - costs[1])\n            cnt -= 1\n            costs[1] = max_cost\n\n    print(vote_sum)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2098}
{"name": "2189", "description": "T is playing a game with his friend, HL.\n\nThere are $n$ piles of stones, the $i$-th pile initially has $a_i$ stones. \n\nT and HL will take alternating turns, with T going first. In each turn, a player chooses a non-empty pile and then removes a single stone from it. However, one cannot choose a pile that has been chosen in the previous turn (the pile that was chosen by the other player, or if the current turn is the first turn then the player can choose any non-empty pile). The player who cannot choose a pile in his turn loses, and the game ends.\n\nAssuming both players play optimally, given the starting configuration of $t$ games, determine the winner of each game.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer $t$ $(1 \\le t \\le 100)$ \u2014 the number of games. The description of the games follows. Each description contains two lines:\n\nThe first line contains a single integer $n$ $(1 \\le n \\le 100)$ \u2014 the number of piles.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 100)$.\n\n\n-----Output-----\n\nFor each game, print on a single line the name of the winner, \"T\" or \"HL\" (without quotes)\n\n\n-----Example-----\nInput\n2\n1\n2\n2\n1 1\n\nOutput\nT\nHL\n\n\n\n-----Note-----\n\nIn the first game, T removes a single stone from the only pile in his first turn. After that, although the pile still contains $1$ stone, HL cannot choose from this pile because it has been chosen by T in the previous turn. Therefore, T is the winner.", "difficulty": "competition", "id": 2189, "sample_io": [{"input": "2\n1\n2\n2\n1 1\n", "output": ["T\nHL\n"]}], "test_list": [{"input": "2\n1\n2\n2\n1 1\n", "output": ["T\nHL\n"]}, {"input": "1\n4\n2 3 1 2\n", "output": ["HL\n"]}, {"input": "2\n2\n1 4\n3\n3 1 3\n", "output": ["T\nT\n"]}, {"input": "3\n2\n4 3\n4\n2 2 2 3\n3\n1 4 1\n", "output": ["T\nT\nT\n"]}, {"input": "4\n5\n1 3 1 3 4\n1\n4\n1\n5\n2\n3 3\n", "output": ["HL\nT\nT\nHL\n"]}, {"input": "1\n3\n2 1 1\n", "output": ["HL\n"]}, {"input": "1\n4\n3 1 1 1\n", "output": ["HL\n"]}, {"input": "1\n7\n10 3 1 1 1 1 1\n", "output": ["T\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the number of games\n    t = int(input())\n\n    for _ in range(t):\n        # Get the total number of piles from user input\n        n = int(input())\n        # Initialize variables to represent the sum and maximum pile size\n        s, mx = 0, -1\n\n        # Read each pile size from user input and update 's' and 'mx'\n        for _ in range(n):\n            a = int(input().split()[0])\n            s += a\n            if a > mx:\n                mx = a\n\n        # Check if the total number of stones is odd, and print the winner accordingly\n        if s % 2 == 1 or (s % 2 == 0 and n <= mx):\n            print('T')\n        else:\n            print('HL')\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the number of games\n    t = int(input())\n\n    for _ in range(t):\n        # Get the total number of piles from user input\n        n = int(input())\n        # Initialize variables to represent the sum and maximum pile size\n        s, mx = 0, -1\n\n        # Read each pile size from user input and update 's' and 'mx'\n        for _ in range(n):\n            a = int(input().split()[0])\n            s += a\n            if a > mx:\n                mx = a\n\n        # Check if the total number of stones is odd, and print the winner accordingly\n        if s % 2 == 1 or (s % 2 == 0 and n <= mx):\n            print('T')\n        else:\n            print('HL')\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2189}
{"name": "2063", "description": "The \"BerCorp\" company has got n employees. These employees can use m approved official languages for the formal correspondence. The languages are numbered with integers from 1 to m. For each employee we have the list of languages, which he knows. This list could be empty, i. e. an employee may know no official languages. But the employees are willing to learn any number of official languages, as long as the company pays their lessons. A study course in one language for one employee costs 1 berdollar.\n\nFind the minimum sum of money the company needs to spend so as any employee could correspond to any other one (their correspondence can be indirect, i. e. other employees can help out translating).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of employees and the number of languages.\n\nThen n lines follow \u2014 each employee's language list. At the beginning of the i-th line is integer k_{i} (0 \u2264 k_{i} \u2264 m) \u2014 the number of languages the i-th employee knows. Next, the i-th line contains k_{i} integers \u2014 a_{ij} (1 \u2264 a_{ij} \u2264 m) \u2014 the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum amount of money to pay so that in the end every employee could write a letter to every other one (other employees can help out translating).\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the second sample the employee 1 can learn language 2, and employee 8 can learn language 4.\n\nIn the third sample employee 2 must learn language 2.", "difficulty": "competition", "id": 2063, "sample_io": [{"input": "5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n", "output": ["0\n"]}, {"input": "8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n", "output": ["2\n"]}, {"input": "2 2\n1 2\n0\n", "output": ["1\n"]}], "test_list": [{"input": "5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n", "output": ["0\n"]}, {"input": "8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n", "output": ["2\n"]}, {"input": "2 2\n1 2\n0\n", "output": ["1\n"]}, {"input": "2 2\n0\n0\n", "output": ["2\n"]}, {"input": "5 5\n1 3\n0\n0\n2 4 1\n0\n", "output": ["4\n"]}, {"input": "6 2\n0\n0\n2 1 2\n1 1\n1 1\n0\n", "output": ["3\n"]}, {"input": "7 3\n3 1 3 2\n3 2 1 3\n2 2 3\n1 1\n2 2 3\n3 3 2 1\n3 2 3 1\n", "output": ["0\n"]}, {"input": "8 4\n0\n0\n4 2 3 1 4\n4 2 1 4 3\n3 4 3 1\n1 2\n2 4 1\n2 4 2\n", "output": ["2\n"]}, {"input": "10 10\n5 7 5 2 8 1\n7 10 6 9 5 8 2 4\n2 2 7\n5 8 6 9 10 1\n2 9 5\n3 6 5 2\n6 5 8 7 9 10 4\n0\n1 1\n2 8 6\n", "output": ["1\n"]}, {"input": "2 2\n2 1 2\n2 1 2\n", "output": ["0\n"]}, {"input": "2 2\n2 1 2\n1 1\n", "output": ["0\n"]}, {"input": "2 2\n1 2\n1 1\n", "output": ["1\n"]}, {"input": "3 100\n0\n0\n0\n", "output": ["3\n"]}, {"input": "3 3\n0\n0\n0\n", "output": ["3\n"]}], "starter_code": "", "source_codes": ["\nfrom collections import defaultdict, deque\n\ndef main():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(m+1)]\n\n    for i in range(1, n+1):\n        k, *langs = map(int, input().split())\n        for lang in langs:\n            graph[lang].append(i)\n            graph[i].append(lang)\n\n    # BFS\n    visited = defaultdict(lambda: 0)\n    max_degree = 0\n    queue = deque()\n    for i in range(1, m+1):\n        if not visited[i]:\n            queue.append(i)\n            visited[i] = 1\n\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n                        visited[neighbor] += visited[node]\n\n    # max_degree is the number of languages (m) minus one because each language has a degree of at least 1\n    print(max_degree)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nfrom collections import defaultdict, deque\n\ndef main():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(m+1)]\n\n    for i in range(1, n+1):\n        k, *langs = map(int, input().split())\n        for lang in langs:\n            graph[lang].append(i)\n            graph[i].append(lang)\n\n    # BFS\n    visited = defaultdict(lambda: 0)\n    max_degree = 0\n    queue = deque()\n    for i in range(1, m+1):\n        if not visited[i]:\n            queue.append(i)\n            visited[i] = 1\n\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n                        visited[neighbor] += visited[node]\n\n    # max_degree is the number of languages (m) minus one because each language has a degree of at least 1\n    print(max_degree)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2063}
{"name": "2092", "description": "There are literally dozens of snooker competitions held each year, and team Jinotega tries to attend them all (for some reason they prefer name \"snookah\")! When a competition takes place somewhere far from their hometown, Ivan, Artsem and Konstantin take a flight to the contest and back.\n\nJinotega's best friends, team Base have found a list of their itinerary receipts with information about departure and arrival airports. Now they wonder, where is Jinotega now: at home or at some competition far away? They know that:   this list contains all Jinotega's flights in this year (in arbitrary order),  Jinotega has only flown from his hometown to a snooker contest and back,  after each competition Jinotega flies back home (though they may attend a competition in one place several times),  and finally, at the beginning of the year Jinotega was at home. \n\nPlease help them to determine Jinotega's location!\n\n\n-----Input-----\n\nIn the first line of input there is a single integer n: the number of Jinotega's flights (1 \u2264 n \u2264 100). In the second line there is a string of 3 capital Latin letters: the name of Jinotega's home airport. In the next n lines there is flight information, one flight per line, in form \"XXX->YYY\", where \"XXX\" is the name of departure airport \"YYY\" is the name of arrival airport. Exactly one of these airports is Jinotega's home airport.\n\nIt is guaranteed that flights information is consistent with the knowledge of Jinotega's friends, which is described in the main part of the statement.\n\n\n-----Output-----\n\nIf Jinotega is now at home, print \"home\" (without quotes), otherwise print \"contest\".\n\n\n-----Examples-----\nInput\n4\nSVO\nSVO->CDG\nLHR->SVO\nSVO->LHR\nCDG->SVO\n\nOutput\nhome\n\nInput\n3\nSVO\nSVO->HKT\nHKT->SVO\nSVO->RAP\n\nOutput\ncontest\n\n\n\n-----Note-----\n\nIn the first sample Jinotega might first fly from SVO to CDG and back, and then from SVO to LHR and back, so now they should be at home. In the second sample Jinotega must now be at RAP because a flight from RAP back to SVO is not on the list.", "difficulty": "competition", "id": 2092, "sample_io": [{"input": "4\nSVO\nSVO->CDG\nLHR->SVO\nSVO->LHR\nCDG->SVO\n", "output": ["home\n"]}, {"input": "3\nSVO\nSVO->HKT\nHKT->SVO\nSVO->RAP\n", "output": ["contest\n"]}], "test_list": [{"input": "4\nSVO\nSVO->CDG\nLHR->SVO\nSVO->LHR\nCDG->SVO\n", "output": ["home\n"]}, {"input": "3\nSVO\nSVO->HKT\nHKT->SVO\nSVO->RAP\n", "output": ["contest\n"]}, {"input": "1\nESJ\nESJ->TSJ\n", "output": ["contest\n"]}, {"input": "2\nXMR\nFAJ->XMR\nXMR->FAJ\n", "output": ["home\n"]}, {"input": "3\nZIZ\nDWJ->ZIZ\nZIZ->DWJ\nZIZ->DWJ\n", "output": ["contest\n"]}, {"input": "10\nPVO\nDMN->PVO\nDMN->PVO\nPVO->DMN\nDMN->PVO\nPVO->DMN\nPVO->DMN\nPVO->DMN\nDMN->PVO\nPVO->DMN\nDMN->PVO\n", "output": ["home\n"]}, {"input": "11\nIAU\nIAU->RUQ\nIAU->RUQ\nRUQ->IAU\nRUQ->IAU\nIAU->RUQ\nRUQ->IAU\nIAU->RUQ\nRUQ->IAU\nIAU->RUQ\nIAU->RUQ\nRUQ->IAU\n", "output": ["contest\n"]}, {"input": "10\nHPN\nDFI->HPN\nHPN->KAB\nHPN->DFI\nVSO->HPN\nHPN->KZX\nHPN->VSO\nKZX->HPN\nLDW->HPN\nKAB->HPN\nHPN->LDW\n", "output": ["home\n"]}, {"input": "11\nFGH\nFGH->BRZ\nUBK->FGH\nQRE->FGH\nFGH->KQK\nFGH->QRE\nKQK->FGH\nFGH->UBK\nBRZ->FGH\nFGH->ALX\nALX->FGH\nFGH->KQK\n", "output": ["contest\n"]}, {"input": "50\nPFH\nJFV->PFH\nBVP->PFH\nPFH->BVP\nPFH->JFV\nPFH->ETQ\nPFH->LQJ\nZTO->PFH\nPFH->BVP\nPFH->RXO\nPFH->ZTO\nHWL->PFH\nPFH->HIV\nPFH->AFP\nPFH->HWL\nOBB->PFH\nHIV->PFH\nPFH->LSR\nAFP->PFH\nLQJ->PFH\nHWL->PFH\nETQ->PFH\nPFH->HWL\nLSR->PFH\nWBR->PFH\nBNZ->PFH\nHQR->PFH\nZTO->PFH\nPFH->WBR\nPFH->BYJ\nRXO->PFH\nFHZ->PFH\nFHZ->PFH\nPFN->PFH\nPFH->GMB\nPFH->JFV\nJFV->PFH\nGNZ->PFH\nPFH->BNZ\nPFH->GNZ\nPFH->HQR\nBYJ->PFH\nGMB->PFH\nPFH->FHZ\nPFH->FHZ\nPFH->ZTO\nPFH->UGD\nBVP->PFH\nUGD->PFH\nPFH->PFN\nPFH->OBB\n", "output": ["home\n"]}, {"input": "1\nAAK\nAAK->ABA\n", "output": ["contest\n"]}, {"input": "1\nXYZ\nXYZ->XYR\n", "output": ["contest\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as an integer representing the number of flights\n    n = int(input())\n\n    # Get the home airport name from the second line of input\n    home_airport = input()\n\n    # Create a dictionary to store the departure and arrival airports\n    airports = {}\n\n    # Iterate over the flight information (lines 3 through n+2)\n    for _ in range(n):\n        # Take user input as a string representing the current flight information\n        info = input().split('->')\n\n        # Get the departure and arrival airport names from the current flight information\n        departure_airport, arrival_airport = info\n\n        # Store the departure and arrival airports in the dictionary\n        if departure_airport not in airports:\n            airports[departure_airport] = 0\n        if arrival_airport not in airports:\n            airports[arrival_airport] = 0\n        airports[departure_airport] += 1\n        airports[arrival_airport] -= 1\n\n    # Get the current number of flights from and to Jinotega's home airport\n    from_home, to_home = airports.get(home_airport, (0, 0))\n\n    # Determine Jinotega's location based on the difference between the number of flights from and to his home airport\n    if abs(from_home - to_home) != n:\n        print('contest')\n    else:\n        print('home')\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as an integer representing the number of flights\n    n = int(input())\n\n    # Get the home airport name from the second line of input\n    home_airport = input()\n\n    # Create a dictionary to store the departure and arrival airports\n    airports = {}\n\n    # Iterate over the flight information (lines 3 through n+2)\n    for _ in range(n):\n        # Take user input as a string representing the current flight information\n        info = input().split('->')\n\n        # Get the departure and arrival airport names from the current flight information\n        departure_airport, arrival_airport = info\n\n        # Store the departure and arrival airports in the dictionary\n        if departure_airport not in airports:\n            airports[departure_airport] = 0\n        if arrival_airport not in airports:\n            airports[arrival_airport] = 0\n        airports[departure_airport] += 1\n        airports[arrival_airport] -= 1\n\n    # Get the current number of flights from and to Jinotega's home airport\n    from_home, to_home = airports.get(home_airport, (0, 0))\n\n    # Determine Jinotega's location based on the difference between the number of flights from and to his home airport\n    if abs(from_home - to_home) != n:\n        print('contest')\n    else:\n        print('home')\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2092}
{"name": "2218", "description": "There is a country with $n$ citizens. The $i$-th of them initially has $a_{i}$ money. The government strictly controls the wealth of its citizens. Whenever a citizen makes a purchase or earns some money, they must send a receipt to the social services mentioning the amount of money they currently have.\n\nSometimes the government makes payouts to the poor: all citizens who have strictly less money than $x$ are paid accordingly so that after the payout they have exactly $x$ money. In this case the citizens don't send a receipt.\n\nYou know the initial wealth of every citizen and the log of all events: receipts and payouts. Restore the amount of money each citizen has after all events.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{5}$)\u00a0\u2014 the numer of citizens.\n\nThe next line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($0 \\le a_{i} \\le 10^{9}$)\u00a0\u2014 the initial balances of citizens.\n\nThe next line contains a single integer $q$ ($1 \\le q \\le 2 \\cdot 10^{5}$)\u00a0\u2014 the number of events.\n\nEach of the next $q$ lines contains a single event. The events are given in chronological order.\n\nEach event is described as either 1 p x ($1 \\le p \\le n$, $0 \\le x \\le 10^{9}$), or 2 x ($0 \\le x \\le 10^{9}$). In the first case we have a receipt that the balance of the $p$-th person becomes equal to $x$. In the second case we have a payoff with parameter $x$.\n\n\n-----Output-----\n\nPrint $n$ integers\u00a0\u2014 the balances of all citizens after all events.\n\n\n-----Examples-----\nInput\n4\n1 2 3 4\n3\n2 3\n1 2 2\n2 1\n\nOutput\n3 2 3 4 \n\nInput\n5\n3 50 2 1 10\n3\n1 2 0\n2 8\n1 3 20\n\nOutput\n8 8 20 8 10 \n\n\n\n-----Note-----\n\nIn the first example the balances change as follows: 1 2 3 4 $\\rightarrow$ 3 3 3 4 $\\rightarrow$ 3 2 3 4 $\\rightarrow$ 3 2 3 4\n\nIn the second example the balances change as follows: 3 50 2 1 10 $\\rightarrow$ 3 0 2 1 10 $\\rightarrow$ 8 8 8 8 10 $\\rightarrow$ 8 8 20 8 10", "difficulty": "competition", "id": 2218, "sample_io": [{"input": "4\n1 2 3 4\n3\n2 3\n1 2 2\n2 1\n", "output": ["3 2 3 4 \n"]}, {"input": "5\n3 50 2 1 10\n3\n1 2 0\n2 8\n1 3 20\n", "output": ["8 8 20 8 10 \n"]}], "test_list": [{"input": "4\n1 2 3 4\n3\n2 3\n1 2 2\n2 1\n", "output": ["3 2 3 4 \n"]}, {"input": "5\n3 50 2 1 10\n3\n1 2 0\n2 8\n1 3 20\n", "output": ["8 8 20 8 10 \n"]}, {"input": "10\n1 2 3 4 5 6 7 8 9 10\n10\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n", "output": ["10 10 10 10 10 10 10 10 10 10 \n"]}, {"input": "5\n1 2 3 4 5\n10\n1 1 0\n2 1\n1 2 0\n2 2\n1 3 0\n2 3\n1 4 0\n2 4\n1 5 0\n2 5\n", "output": ["5 5 5 5 5 \n"]}, {"input": "10\n7 9 4 4 7 6 3 7 9 8\n10\n1 3 2\n1 10 5\n1 5 3\n1 5 2\n1 2 9\n1 2 9\n1 2 10\n1 5 7\n1 6 10\n1 10 9\n", "output": ["7 10 2 4 7 10 3 7 9 9 \n"]}, {"input": "1\n1\n3\n2 4\n1 1 2\n2 10\n", "output": ["10 \n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a list representing the initial balances of citizens\n    a = list(map(int, input().split()))\n\n    # Take user input as an integer representing the number of events\n    q = int(input())\n\n    # Create a list to store the updates for each citizen\n    c = [0] * len(a)\n\n    # Process each event\n    for _ in range(q):\n        t = list(map(int, input().split()))\n        if t[0] == 1:\n            # If it's a receipt update the balance and the corresponding bit in c\n            i = t[1] - 1\n            c[i] = 1 << (t[2])\n            a[i] = min(t[2], a[i])\n        else:\n            # If it's a payout, set all balances that are less than x to x and update the corresponding bits in c\n            x = t[1]\n            for i in range(len(a)):\n                if a[i] < x:\n                    a[i] = x\n                    c[i] = 0\n\n    # Print each citizen's balance after all events, adding x to each citizen's balance that had been updated by an event of type 2 and a[i] otherwise\n    for i in range(len(a)):\n        print(a[i] + sum(1 << j if ((c[i] >> j) & 1) else 0 for j in range(31)) if any((c[i] >> j) & 1 for j in range(31)) else a[i])\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a list representing the initial balances of citizens\n    a = list(map(int, input().split()))\n\n    # Take user input as an integer representing the number of events\n    q = int(input())\n\n    # Create a list to store the updates for each citizen\n    c = [0] * len(a)\n\n    # Process each event\n    for _ in range(q):\n        t = list(map(int, input().split()))\n        if t[0] == 1:\n            # If it's a receipt update the balance and the corresponding bit in c\n            i = t[1] - 1\n            c[i] = 1 << (t[2])\n            a[i] = min(t[2], a[i])\n        else:\n            # If it's a payout, set all balances that are less than x to x and update the corresponding bits in c\n            x = t[1]\n            for i in range(len(a)):\n                if a[i] < x:\n                    a[i] = x\n                    c[i] = 0\n\n    # Print each citizen's balance after all events, adding x to each citizen's balance that had been updated by an event of type 2 and a[i] otherwise\n    for i in range(len(a)):\n        print(a[i] + sum(1 << j if ((c[i] >> j) & 1) else 0 for j in range(31)) if any((c[i] >> j) & 1 for j in range(31)) else a[i])\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2218}
{"name": "2224", "description": "Rudolf is on his way to the castle. Before getting into the castle, the security staff asked him a question:\n\nGiven two binary numbers $a$ and $b$ of length $n$. How many different ways of swapping two digits in $a$ (only in $a$, not $b$) so that bitwise OR of these two numbers will be changed? In other words, let $c$ be the bitwise OR of $a$ and $b$, you need to find the number of ways of swapping two bits in $a$ so that bitwise OR will not be equal to $c$.\n\nNote that binary numbers can contain leading zeros so that length of each number is exactly $n$.\n\nBitwise OR is a binary operation. A result is a binary number which contains a one in each digit if there is a one in at least one of the two numbers. For example, $01010_2$ OR $10011_2$ = $11011_2$.\n\nWell, to your surprise, you are not Rudolf, and you don't need to help him$\\ldots$ You are the security staff! Please find the number of ways of swapping two bits in $a$ so that bitwise OR will be changed.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2\\leq n\\leq 10^5$)\u00a0\u2014 the number of bits in each number.\n\nThe second line contains a binary number $a$ of length $n$.\n\nThe third line contains a binary number $b$ of length $n$.\n\n\n-----Output-----\n\nPrint the number of ways to swap two bits in $a$ so that bitwise OR will be changed.\n\n\n-----Examples-----\nInput\n5\n01011\n11001\n\nOutput\n4\n\nInput\n6\n011000\n010011\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample, you can swap bits that have indexes $(1, 4)$, $(2, 3)$, $(3, 4)$, and $(3, 5)$.\n\nIn the second example, you can swap bits that have indexes $(1, 2)$, $(1, 3)$, $(2, 4)$, $(3, 4)$, $(3, 5)$, and $(3, 6)$.", "difficulty": "competition", "id": 2224, "sample_io": [{"input": "5\n01011\n11001\n", "output": ["4\n"]}, {"input": "6\n011000\n010011\n", "output": ["6\n"]}], "test_list": [{"input": "5\n01011\n11001\n", "output": ["4\n"]}, {"input": "6\n011000\n010011\n", "output": ["6\n"]}, {"input": "10\n0110101101\n1010000101\n", "output": ["21\n"]}, {"input": "30\n011110110100010000011001000100\n110111101001011001100001101101\n", "output": ["146\n"]}, {"input": "2\n00\n00\n", "output": ["0\n"]}, {"input": "2\n00\n11\n", "output": ["0\n"]}], "starter_code": "", "source_codes": ["\nn = int(input())\na = input()\nb = input()\n\ndef count_swaps(a, b):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] == '1' and a[j] == '0':\n                count += 1\n            elif a[i] == '0' and a[j] == '1' and b[i] != '0':\n                count += 1\n    return count\n\nprint(count_swaps(a, b))\n\n\n"], "responses": ["```python\nn = int(input())\na = input()\nb = input()\n\ndef count_swaps(a, b):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] == '1' and a[j] == '0':\n                count += 1\n            elif a[i] == '0' and a[j] == '1' and b[i] != '0':\n                count += 1\n    return count\n\nprint(count_swaps(a, b))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2224}
{"name": "2010", "description": "Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of h_{i} identical blocks. For clarification see picture for the first sample.\n\nLimak will repeat the following operation till everything is destroyed.\n\nBlock is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.\n\nLimak is ready to start. You task is to count how many operations will it take him to destroy all towers.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n space-separated integers h_1, h_2, ..., h_{n} (1 \u2264 h_{i} \u2264 10^9) \u2014 sizes of towers.\n\n\n-----Output-----\n\nPrint the number of operations needed to destroy all towers.\n\n\n-----Examples-----\nInput\n6\n2 1 4 6 2 2\n\nOutput\n3\n\nInput\n7\n3 3 3 1 3 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color.  [Image]  After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.", "difficulty": "competition", "id": 2010, "sample_io": [{"input": "6\n2 1 4 6 2 2\n", "output": ["3\n"]}, {"input": "7\n3 3 3 1 3 3 3\n", "output": ["2\n"]}], "test_list": [{"input": "6\n2 1 4 6 2 2\n", "output": ["3\n"]}, {"input": "7\n3 3 3 1 3 3 3\n", "output": ["2\n"]}, {"input": "7\n5128 5672 5805 5452 5882 5567 5032\n", "output": ["4\n"]}, {"input": "10\n1 2 2 3 5 5 5 4 2 1\n", "output": ["5\n"]}, {"input": "14\n20 20 20 20 20 20 3 20 20 20 20 20 20 20\n", "output": ["5\n"]}, {"input": "50\n3 2 4 3 5 3 4 5 3 2 3 3 3 4 5 4 2 2 3 3 4 4 3 2 3 3 2 3 4 4 5 2 5 2 3 5 4 4 2 2 3 5 2 5 2 2 5 4 5 4\n", "output": ["4\n"]}, {"input": "1\n1\n", "output": ["1\n"]}, {"input": "1\n1000000000\n", "output": ["1\n"]}, {"input": "2\n1 1\n", "output": ["1\n"]}, {"input": "2\n1049 1098\n", "output": ["1\n"]}, {"input": "2\n100 100\n", "output": ["1\n"]}, {"input": "5\n1 2 3 2 1\n", "output": ["3\n"]}, {"input": "15\n2 2 1 1 2 2 2 2 2 2 2 2 2 1 2\n", "output": ["2\n"]}, {"input": "28\n415546599 415546599 415546599 415546599 415546599 415546599 415546599 415546599 415546599 2 802811737 802811737 802811737 802811737 802811737 802811737 802811737 802811737 1 550595901 550595901 550595901 550595901 550595901 550595901 550595901 550595901 550595901\n", "output": ["6\n"]}, {"input": "45\n3 12 13 11 13 13 10 11 14 15 15 13 14 12 13 11 14 10 10 14 14 11 10 12 11 11 13 14 10 11 14 13 14 11 11 11 12 15 1 10 15 12 14 14 14\n", "output": ["13\n"]}, {"input": "84\n1 3 4 5 6 5 6 7 8 9 7 4 5 4 2 5 1 1 1 3 2 7 7 8 10 9 5 6 5 2 3 3 3 3 3 2 4 8 6 5 8 9 8 7 9 3 4 4 4 2 2 1 6 4 9 5 9 9 10 7 10 4 5 4 2 4 3 3 4 4 6 6 6 9 10 12 7 5 9 8 5 3 3 2\n", "output": ["8\n"]}, {"input": "170\n1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 1 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 3 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1\n", "output": ["5\n"]}, {"input": "1\n5\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\nimport sys\ninput = sys.stdin.readline\n\ndef get(n):\n    if n == 0:\n        return [[1]]\n    res = []\n    for lst in get(n - 1):\n        new_lst = [list(lst)]\n        new_lst.append([n] + list(lst))\n        res += new_lst\n        new_lst.append(list(lst) + [n])\n        res += new_lst\n    if n == 0:\n        return [[0]]\n    elif n == 1:\n        return [[1], [1, 1]]\n    else:\n        for lst in get(n - 2):\n            new_lst = [list(lst)]\n            new_lst.append([1] + list(lst))\n            res += new_lst\n            new_lst.append(list(lst) + [1])\n            res += new_lst\n\nn = int(input())\nblocks = get(n)\nans = 0\nfor lst in blocks:\n    total_blocks = sum(lst)\n    ans = max(ans, (total_blocks - 1) // 2 + 1)\n\nprint(ans)\n\n\n"], "responses": ["```python\nimport sys\ninput = sys.stdin.readline\n\ndef get(n):\n    if n == 0:\n        return [[1]]\n    res = []\n    for lst in get(n - 1):\n        new_lst = [list(lst)]\n        new_lst.append([n] + list(lst))\n        res += new_lst\n        new_lst.append(list(lst) + [n])\n        res += new_lst\n    if n == 0:\n        return [[0]]\n    elif n == 1:\n        return [[1], [1, 1]]\n    else:\n        for lst in get(n - 2):\n            new_lst = [list(lst)]\n            new_lst.append([1] + list(lst))\n            res += new_lst\n            new_lst.append(list(lst) + [1])\n            res += new_lst\n\nn = int(input())\nblocks = get(n)\nans = 0\nfor lst in blocks:\n    total_blocks = sum(lst)\n    ans = max(ans, (total_blocks - 1) // 2 + 1)\n\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2010}
{"name": "2064", "description": "3R2 as DJ Mashiro - Happiness Breeze Ice - DJ Mashiro is dead or alive\n\nNEKO#\u03a6\u03c9\u03a6 has just got a new maze game on her PC!\n\nThe game's main puzzle is a maze, in the forms of a $2 \\times n$ rectangle grid. NEKO's task is to lead a Nekomimi girl from cell $(1, 1)$ to the gate at $(2, n)$ and escape the maze. The girl can only move between cells sharing a common side.\n\nHowever, at some moments during the game, some cells may change their state: either from normal ground to lava (which forbids movement into that cell), or vice versa (which makes that cell passable again). Initially all cells are of the ground type.\n\nAfter hours of streaming, NEKO finally figured out there are only $q$ such moments: the $i$-th moment toggles the state of cell $(r_i, c_i)$ (either from ground to lava or vice versa).\n\nKnowing this, NEKO wonders, after each of the $q$ moments, whether it is still possible to move from cell $(1, 1)$ to cell $(2, n)$ without going through any lava cells.\n\nAlthough NEKO is a great streamer and gamer, she still can't get through quizzes and problems requiring large amount of Brain Power. Can you help her?\n\n\n-----Input-----\n\nThe first line contains integers $n$, $q$ ($2 \\le n \\le 10^5$, $1 \\le q \\le 10^5$).\n\nThe $i$-th of $q$ following lines contains two integers $r_i$, $c_i$ ($1 \\le r_i \\le 2$, $1 \\le c_i \\le n$), denoting the coordinates of the cell to be flipped at the $i$-th moment.\n\nIt is guaranteed that cells $(1, 1)$ and $(2, n)$ never appear in the query list.\n\n\n-----Output-----\n\nFor each moment, if it is possible to travel from cell $(1, 1)$ to cell $(2, n)$, print \"Yes\", otherwise print \"No\". There should be exactly $q$ answers, one after every update.\n\nYou can print the words in any case (either lowercase, uppercase or mixed).\n\n\n-----Example-----\nInput\n5 5\n2 3\n1 4\n2 4\n2 3\n1 4\n\nOutput\nYes\nNo\nNo\nNo\nYes\n\n\n\n-----Note-----\n\nWe'll crack down the example test here:  After the first query, the girl still able to reach the goal. One of the shortest path ways should be: $(1,1) \\to (1,2) \\to (1,3) \\to (1,4) \\to (1,5) \\to (2,5)$.  After the second query, it's impossible to move to the goal, since the farthest cell she could reach is $(1, 3)$.  After the fourth query, the $(2, 3)$ is not blocked, but now all the $4$-th column is blocked, so she still can't reach the goal.  After the fifth query, the column barrier has been lifted, thus she can go to the final goal again.", "difficulty": "competition", "id": 2064, "sample_io": [{"input": "5 5\n2 3\n1 4\n2 4\n2 3\n1 4\n", "output": ["Yes\nNo\nNo\nNo\nYes\n"]}], "test_list": [{"input": "5 5\n2 3\n1 4\n2 4\n2 3\n1 4\n", "output": ["Yes\nNo\nNo\nNo\nYes\n"]}, {"input": "2 2\n2 1\n1 2\n", "output": ["Yes\nNo\n"]}, {"input": "2 4\n2 1\n1 2\n1 2\n1 2\n", "output": ["Yes\nNo\nYes\nNo\n"]}, {"input": "4 1\n1 4\n", "output": ["Yes\n"]}, {"input": "10 42\n1 4\n1 2\n2 2\n2 8\n1 10\n1 7\n2 8\n2 3\n1 9\n1 2\n2 4\n2 8\n2 4\n1 7\n2 3\n1 9\n1 6\n2 7\n2 7\n1 10\n1 2\n1 10\n2 7\n1 5\n2 2\n1 4\n1 10\n1 2\n2 6\n2 9\n1 7\n1 2\n1 7\n2 3\n1 10\n2 7\n2 5\n2 5\n1 10\n1 8\n2 9\n1 6\n", "output": ["Yes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"]}, {"input": "10 83\n1 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n1 4\n2 2\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n1 4\n1 5\n1 7\n2 2\n2 2\n1 5\n2 2\n1 3\n2 1\n2 6\n1 5\n2 6\n2 9\n1 2\n2 5\n1 2\n2 5\n2 4\n2 4\n1 2\n1 2\n1 4\n2 6\n2 6\n2 4\n2 4\n1 2\n1 2\n2 4\n2 4\n2 3\n2 3\n1 2\n2 9\n1 2\n1 2\n1 2\n2 6\n2 6\n2 4\n2 4\n2 3\n2 5\n2 5\n2 3\n2 3\n2 3\n2 6\n2 6\n2 3\n2 3\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 3\n2 3\n1 2\n1 2\n2 6\n2 1\n2 6\n2 6\n2 6\n2 7\n", "output": ["Yes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nYes\nNo\nYes\nYes\nNo\nYes\nYes\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\n"]}, {"input": "855 26\n1 75\n2 74\n2 74\n2 74\n2 74\n2 74\n2 74\n2 74\n2 74\n1 323\n2 74\n2 74\n2 74\n2 74\n2 322\n2 322\n2 322\n2 649\n1 703\n1 251\n2 457\n2 322\n2 702\n2 382\n2 702\n2 500\n", "output": ["Yes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nNo\nNo\nNo\nYes\nNo\nNo\nYes\nYes\n"]}, {"input": "73034 53\n2 21523\n1 21522\n2 21523\n2 21521\n2 37146\n2 21521\n2 21521\n2 21521\n1 37145\n2 37146\n1 54737\n2 66924\n2 21521\n2 28767\n2 21521\n2 21521\n2 21521\n1 28766\n2 28767\n2 54736\n2 54736\n2 31558\n2 37144\n2 41201\n1 60566\n2 15970\n2 37144\n2 25868\n1 277\n2 1743\n1 25867\n2 25868\n1 40857\n1 38088\n2 21521\n2 21521\n1 15969\n2 39373\n1 51066\n2 15970\n1 24859\n2 28765\n2 28765\n2 60565\n2 60565\n2 21521\n2 21521\n2 38087\n2 38087\n2 21521\n2 21521\n2 45056\n2 21521\n", "output": ["Yes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nNo\nNo\nYes\nYes\nYes\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nNo\nNo\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\n"]}, {"input": "100000 6\n2 72326\n1 72325\n2 72326\n2 72324\n2 72324\n2 91418\n", "output": ["Yes\nNo\nYes\nNo\nYes\nYes\n"]}, {"input": "3 27\n2 2\n2 2\n1 2\n2 1\n2 1\n2 1\n2 1\n2 1\n1 2\n1 2\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n1 3\n2 2\n2 2\n2 1\n", "output": ["Yes\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nYes\nNo\n"]}, {"input": "100000 46\n1 82674\n2 82673\n2 82673\n2 82673\n2 82673\n2 82673\n2 82673\n2 82673\n2 82673\n2 87908\n2 58694\n1 58693\n2 58694\n2 82673\n2 82673\n1 87907\n2 87908\n2 82673\n2 82673\n1 64610\n2 64609\n2 64609\n2 58692\n2 58692\n2 64609\n2 64609\n2 64609\n2 64609\n2 87906\n2 87906\n2 64609\n2 22164\n2 2840\n2 43302\n2 64609\n2 58692\n2 58692\n2 87906\n2 87906\n1 22163\n2 76010\n2 22164\n2 64609\n2 64609\n1 43301\n2 43302\n", "output": ["Yes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\n"]}, {"input": "3 68\n1 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n1 3\n1 2\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n1 2\n1 2\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n", "output": ["Yes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\n"]}, {"input": "327 22\n2 68\n1 67\n1 214\n2 68\n2 213\n2 213\n2 66\n2 66\n2 66\n2 66\n2 66\n2 66\n2 213\n2 213\n1 15\n2 14\n2 14\n2 213\n2 213\n2 66\n2 66\n2 14\n", "output": ["Yes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\n"]}, {"input": "76183 37\n1 68009\n2 68008\n2 68008\n2 51883\n1 51882\n2 51883\n2 51881\n2 51881\n2 51881\n2 51881\n2 68008\n2 68008\n2 68008\n2 68008\n2 51881\n2 40751\n2 51881\n2 51881\n2 51881\n2 2204\n1 40750\n2 40751\n2 62512\n2 68008\n2 68008\n2 40749\n2 33598\n2 40749\n1 33597\n2 33598\n2 33596\n2 54671\n1 65682\n2 33596\n1 62511\n2 62512\n2 62510\n", "output": ["Yes\nNo\nYes\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nNo\nNo\nYes\nNo\nYes\nNo\n"]}], "starter_code": "", "source_codes": ["\nfrom collections import defaultdict\n\ndef main():\n    n, q = map(int, input().split())\n    blocked = [[False for _ in range(n+2)] for _ in range(2)]\n    \n    def is_blocked(x1, x2):\n        if x1 == x2:\n            return False\n        \n        min_x = min(x1, x2)\n        max_x = max(x1, x2) + 1\n        \n        if min_x >= 0 and blocked[0][min_x]:\n            return True\n        if max_x <= n+1 and blocked[1][max_x-1]:\n            return True\n        \n        for i in range(min_x, max_x):\n            if (x1 == 1 and blocked[0][i]) or (x2 == 1 and blocked[0][i]):\n                return True\n            elif (x1 == 2 and blocked[1][i]) or (x2 == 2 and blocked[1][i]):\n                return True\n        \n        return False\n\n    for _ in range(q):\n        x, y = map(int, input().split())\n        if not blocked[x-1][y]:\n            blocked[x-1][y] = True\n            if is_blocked(1, 2):\n                print(\"No\")\n            else:\n                print(\"Yes\")\n        elif blocked[x-1][y]:\n            blocked[x-1][y] = False\n            if is_blocked(1, 2):\n                print(\"No\")\n            else:\n                print(\"Yes\")\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nfrom collections import defaultdict\n\ndef main():\n    n, q = map(int, input().split())\n    blocked = [[False for _ in range(n+2)] for _ in range(2)]\n    \n    def is_blocked(x1, x2):\n        if x1 == x2:\n            return False\n        \n        min_x = min(x1, x2)\n        max_x = max(x1, x2) + 1\n        \n        if min_x >= 0 and blocked[0][min_x]:\n            return True\n        if max_x <= n+1 and blocked[1][max_x-1]:\n            return True\n        \n        for i in range(min_x, max_x):\n            if (x1 == 1 and blocked[0][i]) or (x2 == 1 and blocked[0][i]):\n                return True\n            elif (x1 == 2 and blocked[1][i]) or (x2 == 2 and blocked[1][i]):\n                return True\n        \n        return False\n\n    for _ in range(q):\n        x, y = map(int, input().split())\n        if not blocked[x-1][y]:\n            blocked[x-1][y] = True\n            if is_blocked(1, 2):\n                print(\"No\")\n            else:\n                print(\"Yes\")\n        elif blocked[x-1][y]:\n            blocked[x-1][y] = False\n            if is_blocked(1, 2):\n                print(\"No\")\n            else:\n                print(\"Yes\")\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2064}
{"name": "2174", "description": "Polycarpus has a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) (l, r are integer, 1 \u2264 l \u2264 r \u2264 n) for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r. Formally: f(l, r) = a_{l}\u00a0|\u00a0a_{l} + 1\u00a0|\u00a0... \u00a0|\u00a0a_{r}. \n\nPolycarpus took a piece of paper and wrote out the values of function f(l, r) for all l, r (l, r are integer, 1 \u2264 l \u2264 r \u2264 n). Now he wants to know, how many distinct values he's got in the end. \n\nHelp Polycarpus, count the number of distinct values of function f(l, r) for the given sequence a.\n\nExpression x\u00a0|\u00a0y means applying the operation of bitwise OR to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is marked as \"|\", in Pascal \u2014 as \"or\".\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\n-----Note-----\n\nIn the first test case Polycarpus will have 6 numbers written on the paper: f(1, 1) = 1, f(1, 2) = 3, f(1, 3) = 3, f(2, 2) = 2, f(2, 3) = 2, f(3, 3) = 0. There are exactly 4 distinct numbers among them: 0, 1, 2, 3.", "difficulty": "competition", "id": 2174, "sample_io": [{"input": "3\n1 2 0\n", "output": ["4"]}, {"input": "10\n1 2 3 4 5 6 1 2 9 10\n", "output": ["11"]}], "test_list": [{"input": "3\n1 2 0\n", "output": ["4"]}, {"input": "10\n1 2 3 4 5 6 1 2 9 10\n", "output": ["11"]}, {"input": "1\n123\n", "output": ["1"]}, {"input": "10\n6 8 4 5 1 9 10 2 3 7\n", "output": ["15"]}, {"input": "7\n1 2 4 8 16 32 64\n", "output": ["28"]}, {"input": "10\n375813 659427 484038 348181 432640 368050 271089 721588 345312 630771\n", "output": ["29"]}, {"input": "5\n0 1 2 0 4\n", "output": ["7"]}, {"input": "1\n0\n", "output": ["1"]}, {"input": "1\n1000000\n", "output": ["1"]}], "starter_code": "", "source_codes": ["\nfrom math import inf\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n = int(input())\n    \n    # Initialize a set to store unique values of function f(l, r)\n    s = {0}\n    \n    # Iterate over all pairs (l, r) such that 1 \u2264 l \u2264 r \u2264 n\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            # Calculate the bitwise OR of all elements with indexes from l to r\n            curr = 0\n            for k in range(i, j + 1):\n                curr |= int(input())\n            \n            # Add the result to the set\n            s.add(curr)\n    \n    # Print the number of distinct values\n    print(len(s))\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nfrom math import inf\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n = int(input())\n    \n    # Initialize a set to store unique values of function f(l, r)\n    s = {0}\n    \n    # Iterate over all pairs (l, r) such that 1 \u2264 l \u2264 r \u2264 n\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            # Calculate the bitwise OR of all elements with indexes from l to r\n            curr = 0\n            for k in range(i, j + 1):\n                curr |= int(input())\n            \n            # Add the result to the set\n            s.add(curr)\n    \n    # Print the number of distinct values\n    print(len(s))\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2174}
{"name": "2233", "description": "The Bubble Cup hypothesis stood unsolved for $130$ years. Who ever proves the hypothesis will be regarded as one of the greatest mathematicians of our time! A famous mathematician Jerry Mao managed to reduce the hypothesis to this problem:\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\nHelp Jerry Mao solve the long standing problem!\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nIn first case, for $m=2$, polynomials that satisfy the constraint are $x$ and $2$.\n\nIn second case, for $m=4$, polynomials that satisfy the constraint are $x^2$, $x + 2$, $2x$ and $4$.", "difficulty": "competition", "id": 2233, "sample_io": [{"input": "2\n2 4\n", "output": ["2\n4\n"]}], "test_list": [{"input": "2\n2 4\n", "output": ["2\n4\n"]}, {"input": "1\n9\n", "output": ["9\n"]}, {"input": "5\n4 1 8 3 9\n", "output": ["4\n1\n9\n2\n9\n"]}, {"input": "6\n8 7 8 6 8 9\n", "output": ["9\n6\n9\n6\n9\n9\n"]}, {"input": "8\n1 1 7 6 1 5 8 7\n", "output": ["1\n1\n6\n6\n1\n4\n9\n6\n"]}, {"input": "7\n9 6 3 1 3 1 7\n", "output": ["9\n6\n2\n1\n2\n1\n6\n"]}, {"input": "3\n9 2 8\n", "output": ["9\n2\n9\n"]}, {"input": "5\n3 7 3 4 7\n", "output": ["2\n6\n2\n4\n6\n"]}, {"input": "5\n4 8 3 2 6\n", "output": ["4\n9\n2\n2\n6\n"]}, {"input": "5\n2 7 4 8 3\n", "output": ["2\n6\n4\n9\n2\n"]}], "starter_code": "", "source_codes": ["\nmod = 10**9 + 7\n\ndef C(m, x):\n    if m == 0 or x == 0:\n        return 1\n    ans = C(m // 2, x)\n    while m % 2 != 0 and x > 0:\n        ans = (ans * (m % 2)) % mod\n        m //= 2\n        x -= 1\n    if m % 2 != 0 and x == 0:\n        return 0\n    return (ans * C(m, x)) % mod\n\nfor _ in range(int(input())):\n    n = int(input())\n    result = (n - 3) // 4 + 1\n    print(result)\n\n\n"], "responses": ["```python\nmod = 10**9 + 7\n\ndef C(m, x):\n    if m == 0 or x == 0:\n        return 1\n    ans = C(m // 2, x)\n    while m % 2 != 0 and x > 0:\n        ans = (ans * (m % 2)) % mod\n        m //= 2\n        x -= 1\n    if m % 2 != 0 and x == 0:\n        return 0\n    return (ans * C(m, x)) % mod\n\nfor _ in range(int(input())):\n    n = int(input())\n    result = (n - 3) // 4 + 1\n    print(result)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2233}
{"name": "2166", "description": "Rick and Morty are playing their own version of Berzerk (which has nothing in common with the famous Berzerk game). This game needs a huge space, so they play it with a computer.\n\nIn this game there are n objects numbered from 1 to n arranged in a circle (in clockwise order). Object number 1 is a black hole and the others are planets. There's a monster in one of the planet. Rick and Morty don't know on which one yet, only that he's not initially in the black hole, but Unity will inform them before the game starts. But for now, they want to be prepared for every possible scenario. [Image] \n\nEach one of them has a set of numbers between 1 and n - 1 (inclusive). Rick's set is s_1 with k_1 elements and Morty's is s_2 with k_2 elements. One of them goes first and the player changes alternatively. In each player's turn, he should choose an arbitrary number like x from his set and the monster will move to his x-th next object from its current position (clockwise). If after his move the monster gets to the black hole he wins.\n\nYour task is that for each of monster's initial positions and who plays first determine if the starter wins, loses, or the game will stuck in an infinite loop. In case when player can lose or make game infinity, it more profitable to choose infinity game.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (2 \u2264 n \u2264 7000) \u2014 number of objects in game.\n\nThe second line contains integer k_1 followed by k_1 distinct integers s_{1, 1}, s_{1, 2}, ..., s_{1, }k_1 \u2014 Rick's set.\n\nThe third line contains integer k_2 followed by k_2 distinct integers s_{2, 1}, s_{2, 2}, ..., s_{2, }k_2 \u2014 Morty's set\n\n1 \u2264 k_{i} \u2264 n - 1 and 1 \u2264 s_{i}, 1, s_{i}, 2, ..., s_{i}, k_{i} \u2264 n - 1 for 1 \u2264 i \u2264 2.\n\n\n-----Output-----\n\nIn the first line print n - 1 words separated by spaces where i-th word is \"Win\" (without quotations) if in the scenario that Rick plays first and monster is initially in object number i + 1 he wins, \"Lose\" if he loses and \"Loop\" if the game will never end.\n\nSimilarly, in the second line print n - 1 words separated by spaces where i-th word is \"Win\" (without quotations) if in the scenario that Morty plays first and monster is initially in object number i + 1 he wins, \"Lose\" if he loses and \"Loop\" if the game will never end.\n\n\n-----Examples-----\nInput\n5\n2 3 2\n3 1 2 3\n\nOutput\nLose Win Win Loop\nLoop Win Win Win\n\nInput\n8\n4 6 2 3 4\n2 3 6\n\nOutput\nWin Win Win Win Win Win Win\nLose Win Lose Lose Win Lose Lose", "difficulty": "competition", "id": 2166, "sample_io": [{"input": "5\n2 3 2\n3 1 2 3\n", "output": ["Lose Win Win Loop\nLoop Win Win Win\n"]}, {"input": "8\n4 6 2 3 4\n2 3 6\n", "output": ["Win Win Win Win Win Win Win\nLose Win Lose Lose Win Lose Lose\n"]}], "test_list": [{"input": "5\n2 3 2\n3 1 2 3\n", "output": ["Lose Win Win Loop\nLoop Win Win Win\n"]}, {"input": "8\n4 6 2 3 4\n2 3 6\n", "output": ["Win Win Win Win Win Win Win\nLose Win Lose Lose Win Lose Lose\n"]}, {"input": "10\n3 4 7 5\n2 8 5\n", "output": ["Win Win Win Win Win Win Win Loop Win\nLose Win Loop Lose Win Lose Lose Lose Lose\n"]}, {"input": "17\n1 10\n1 12\n", "output": ["Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win\nLose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose\n"]}, {"input": "23\n1 20\n3 9 2 12\n", "output": ["Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose\nWin Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win\n"]}, {"input": "2\n1 1\n1 1\n", "output": ["Win\nWin\n"]}, {"input": "2\n1 1\n1 1\n", "output": ["Win\nWin\n"]}, {"input": "3\n1 1\n1 2\n", "output": ["Loop Win\nWin Loop\n"]}, {"input": "20\n1 1\n1 11\n", "output": ["Loop Loop Win Lose Loop Loop Win Lose Loop Loop Win Lose Loop Loop Win Lose Loop Loop Win\nWin Loop Loop Lose Win Loop Loop Lose Win Loop Loop Lose Win Loop Loop Lose Win Loop Loop\n"]}], "starter_code": "", "source_codes": ["\nfrom math import gcd\n\ndef main():\n    n = int(input())\n    s1 = list(map(int, input().split())) + [0]\n    s2 = list(map(int, input().split())) + [0]\n\n    s1.sort()\n    s2.sort()\n\n    for i in range(n - 1):\n        gcd_s1 = s1[i] * n // gcd(s1[i], n)\n        gcd_s2 = s2[i] * n // gcd(s2[i], n)\n\n        if gcd_s1 == n:\n            print(\"Lose\", end=\" \")\n        elif gcd_s1 % s1[0] != 0:\n            print(\"Loop\", end=\" \")\n        else:\n            print(\"Win\" if (s1[0] * (n // gcd_s1)) < (i + 2) else \"Lose\", end=\" \")\n\n    for i in range(n - 1):\n        gcd_s1 = s1[i] * n // gcd(s1[i], n)\n        gcd_s2 = s2[i] * n // gcd(s2[i], n)\n\n        if gcd_s2 == n:\n            print(\"Lose\", end=\" \")\n        elif gcd_s2 % s2[0] != 0:\n            print(\"Loop\", end=\" \")\n        else:\n            print(\"Win\" if (s2[0] * (n // gcd_s2)) < (i + 2) else \"Lose\", end=\" \")\n\n    print()\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nfrom math import gcd\n\ndef main():\n    n = int(input())\n    s1 = list(map(int, input().split())) + [0]\n    s2 = list(map(int, input().split())) + [0]\n\n    s1.sort()\n    s2.sort()\n\n    for i in range(n - 1):\n        gcd_s1 = s1[i] * n // gcd(s1[i], n)\n        gcd_s2 = s2[i] * n // gcd(s2[i], n)\n\n        if gcd_s1 == n:\n            print(\"Lose\", end=\" \")\n        elif gcd_s1 % s1[0] != 0:\n            print(\"Loop\", end=\" \")\n        else:\n            print(\"Win\" if (s1[0] * (n // gcd_s1)) < (i + 2) else \"Lose\", end=\" \")\n\n    for i in range(n - 1):\n        gcd_s1 = s1[i] * n // gcd(s1[i], n)\n        gcd_s2 = s2[i] * n // gcd(s2[i], n)\n\n        if gcd_s2 == n:\n            print(\"Lose\", end=\" \")\n        elif gcd_s2 % s2[0] != 0:\n            print(\"Loop\", end=\" \")\n        else:\n            print(\"Win\" if (s2[0] * (n // gcd_s2)) < (i + 2) else \"Lose\", end=\" \")\n\n    print()\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2166}
{"name": "2133", "description": "There are n student groups at the university. During the study day, each group can take no more than 7 classes. Seven time slots numbered from 1 to 7 are allocated for the classes.\n\nThe schedule on Monday is known for each group, i. e. time slots when group will have classes are known.\n\nYour task is to determine the minimum number of rooms needed to hold classes for all groups on Monday. Note that one room can hold at most one group class in a single time slot.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of groups. \n\nEach of the following n lines contains a sequence consisting of 7 zeroes and ones \u2014 the schedule of classes on Monday for a group. If the symbol in a position equals to 1 then the group has class in the corresponding time slot. In the other case, the group has no class in the corresponding time slot.\n\n\n-----Output-----\n\nPrint minimum number of rooms needed to hold all groups classes on Monday.\n\n\n-----Examples-----\nInput\n2\n0101010\n1010101\n\nOutput\n1\n\nInput\n3\n0101011\n0011001\n0110111\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example one room is enough. It will be occupied in each of the seven time slot by the first group or by the second group.\n\nIn the second example three rooms is enough, because in the seventh time slot all three groups have classes.", "difficulty": "competition", "id": 2133, "sample_io": [{"input": "2\n0101010\n1010101\n", "output": ["1\n"]}, {"input": "3\n0101011\n0011001\n0110111\n", "output": ["3\n"]}], "test_list": [{"input": "2\n0101010\n1010101\n", "output": ["1\n"]}, {"input": "3\n0101011\n0011001\n0110111\n", "output": ["3\n"]}, {"input": "1\n0111000\n", "output": ["1\n"]}, {"input": "1\n0000000\n", "output": ["0\n"]}, {"input": "1\n1111111\n", "output": ["1\n"]}, {"input": "2\n1000000\n0101000\n", "output": ["1\n"]}, {"input": "3\n0101111\n1101011\n1010011\n", "output": ["3\n"]}, {"input": "5\n0100101\n0000001\n0110000\n0010000\n0011110\n", "output": ["3\n"]}, {"input": "6\n1101110\n1111011\n1101110\n0100011\n1110110\n1110100\n", "output": ["6\n"]}, {"input": "10\n0000000\n0010000\n0000000\n0000010\n0000000\n0100001\n1000000\n0000000\n0000000\n0000000\n", "output": ["1\n"]}, {"input": "20\n1111111\n1101011\n1111011\n0111111\n1111111\n1110111\n1111111\n1111111\n1111111\n1111111\n1110111\n1111111\n0111111\n1011111\n1111111\n1111111\n1101110\n1111111\n1111111\n1111111\n", "output": ["20\n"]}], "starter_code": "", "source_codes": ["\nfrom collections import Counter\nn = int(input())\narr = [input() for _ in range(n)]\ncnt = Counter()\nfor i in arr:\n    cnt.update([i[j] for j in range(7)])\nprint(len(cnt))\n\n\n"], "responses": ["```python\nfrom collections import Counter\nn = int(input())\narr = [input() for _ in range(n)]\ncnt = Counter()\nfor i in arr:\n    cnt.update([i[j] for j in range(7)])\nprint(len(cnt))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2133}
{"name": "2184", "description": "This is an easier version of the next problem. In this version, $q = 0$.\n\nA sequence of integers is called nice if its elements are arranged in blocks like in $[3, 3, 3, 4, 1, 1]$. Formally, if two elements are equal, everything in between must also be equal.\n\nLet's define difficulty of a sequence as a minimum possible number of elements to change to get a nice sequence. However, if you change at least one element of value $x$ to value $y$, you must also change all other elements of value $x$ into $y$ as well. For example, for $[3, 3, 1, 3, 2, 1, 2]$ it isn't allowed to change first $1$ to $3$ and second $1$ to $2$. You need to leave $1$'s untouched or change them to the same value.\n\nYou are given a sequence of integers $a_1, a_2, \\ldots, a_n$ and $q$ updates.\n\nEach update is of form \"$i$ $x$\"\u00a0\u2014 change $a_i$ to $x$. Updates are not independent (the change stays for the future).\n\nPrint the difficulty of the initial sequence and of the sequence after every update.\n\n\n-----Input-----\n\nThe first line contains integers $n$ and $q$ ($1 \\le n \\le 200\\,000$, $q = 0$), the length of the sequence and the number of the updates.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 200\\,000$), the initial sequence.\n\nEach of the following $q$ lines contains integers $i_t$ and $x_t$ ($1 \\le i_t \\le n$, $1 \\le x_t \\le 200\\,000$), the position and the new value for this position.\n\n\n-----Output-----\n\nPrint $q+1$ integers, the answer for the initial sequence and the answer after every update.\n\n\n-----Examples-----\nInput\n5 0\n3 7 3 7 3\n\nOutput\n2\n\nInput\n10 0\n1 2 1 2 3 1 1 1 50 1\n\nOutput\n4\n\nInput\n6 0\n6 6 3 3 4 4\n\nOutput\n0\n\nInput\n7 0\n3 3 1 3 2 1 2\n\nOutput\n4", "difficulty": "competition", "id": 2184, "sample_io": [{"input": "5 0\n3 7 3 7 3\n", "output": ["2\n"]}, {"input": "10 0\n1 2 1 2 3 1 1 1 50 1\n", "output": ["4\n"]}, {"input": "6 0\n6 6 3 3 4 4\n", "output": ["0\n"]}, {"input": "7 0\n3 3 1 3 2 1 2\n", "output": ["4\n"]}], "test_list": [{"input": "5 0\n3 7 3 7 3\n", "output": ["2\n"]}, {"input": "10 0\n1 2 1 2 3 1 1 1 50 1\n", "output": ["4\n"]}, {"input": "6 0\n6 6 3 3 4 4\n", "output": ["0\n"]}, {"input": "7 0\n3 3 1 3 2 1 2\n", "output": ["4\n"]}, {"input": "5 0\n1 2 1 2 1\n", "output": ["2\n"]}, {"input": "5 0\n2 3 2 3 3\n", "output": ["2\n"]}, {"input": "100 0\n6 7 100 8 5 61 5 75 59 65 51 47 83 37 34 54 87 46 4 26 21 87 12 97 86 68 60 11 62 76 14 83 29 31 91 62 57 80 47 75 85 97 62 77 91 86 14 25 48 77 83 65 39 61 78 77 45 46 90 74 100 91 86 98 55 5 84 42 91 69 100 4 74 98 60 37 75 44 41 12 15 34 36 1 99 16 7 87 36 26 79 42 41 84 17 98 72 16 38 55\n", "output": ["95\n"]}, {"input": "100 0\n91 32 10 38 92 14 100 7 48 72 47 10 76 99 56 53 41 46 68 18 37 47 61 99 16 60 12 51 17 50 69 8 82 78 34 95 3 15 79 4 51 45 83 91 81 68 79 91 16 30 6 86 72 97 63 75 67 14 50 60 1 13 77 37 57 14 65 79 41 62 15 11 74 56 76 62 54 52 9 96 8 27 44 21 59 57 17 53 15 66 49 94 62 58 71 53 88 97 65 37\n", "output": ["97\n"]}, {"input": "100 0\n44 8 97 30 48 96 35 54 42 9 66 27 99 57 74 97 90 24 78 97 98 55 74 56 25 30 34 26 12 87 77 12 7 49 79 2 95 33 72 50 47 28 95 31 99 27 96 43 9 62 6 21 55 22 10 79 71 27 85 37 32 66 54 61 48 48 10 61 57 78 91 41 30 43 29 70 96 4 36 19 50 99 16 68 8 80 55 74 18 35 54 84 70 9 17 77 69 71 67 24\n", "output": ["96\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing n and q, and a list of integers\n    nq, nums = input(), [int(i) for i in input().split()]\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in nums:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    # Initialize the result and the maximum length of blocks\n    res, max_len = 0, max(freq.values())\n\n    # Iterate over the frequency dictionary to find the minimum number of changes required\n    for k in freq.keys():\n        if freq[k] < max_len:\n            res += freq[k]\n        else:\n            max_len = freq[k]\n\n    # Print the result\n    print(res)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing n and q, and a list of integers\n    nq, nums = input(), [int(i) for i in input().split()]\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in nums:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    # Initialize the result and the maximum length of blocks\n    res, max_len = 0, max(freq.values())\n\n    # Iterate over the frequency dictionary to find the minimum number of changes required\n    for k in freq.keys():\n        if freq[k] < max_len:\n            res += freq[k]\n        else:\n            max_len = freq[k]\n\n    # Print the result\n    print(res)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2184}
{"name": "2183", "description": "We start with a string $s$ consisting only of the digits $1$, $2$, or $3$. The length of $s$ is denoted by $|s|$. For each $i$ from $1$ to $|s|$, the $i$-th character of $s$ is denoted by $s_i$. \n\nThere is one cursor. The cursor's location $\\ell$ is denoted by an integer in $\\{0, \\ldots, |s|\\}$, with the following meaning:   If $\\ell = 0$, then the cursor is located before the first character of $s$.  If $\\ell = |s|$, then the cursor is located right after the last character of $s$.  If $0 < \\ell < |s|$, then the cursor is located between $s_\\ell$ and $s_{\\ell+1}$. \n\nWe denote by $s_\\text{left}$ the string to the left of the cursor and $s_\\text{right}$ the string to the right of the cursor. \n\nWe also have a string $c$, which we call our clipboard, which starts out as empty. There are three types of actions:  The Move action. Move the cursor one step to the right. This increments $\\ell$ once.  The Cut action. Set $c \\leftarrow s_\\text{right}$, then set $s \\leftarrow s_\\text{left}$.  The Paste action. Append the value of $c$ to the end of the string $s$. Note that this doesn't modify $c$. \n\nThe cursor initially starts at $\\ell = 0$. Then, we perform the following procedure:  Perform the Move action once.  Perform the Cut action once.  Perform the Paste action $s_\\ell$ times.  If $\\ell = x$, stop. Otherwise, return to step 1. \n\nYou're given the initial string $s$ and the integer $x$. What is the length of $s$ when the procedure stops? Since this value may be very large, only find it modulo $10^9 + 7$. \n\nIt is guaranteed that $\\ell \\le |s|$ at any time.\n\n\n-----Input-----\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 1000$) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nThe first line of each test case contains a single integer $x$ ($1 \\le x \\le 10^6$). The second line of each test case consists of the initial string $s$ ($1 \\le |s| \\le 500$). It is guaranteed, that $s$ consists of the characters \"1\", \"2\", \"3\".\n\nIt is guaranteed that the sum of $x$ in a single file is at most $10^6$. It is guaranteed that in each test case before the procedure will stop it will be true that $\\ell \\le |s|$ at any time.\n\n\n-----Output-----\n\nFor each test case, output a single line containing a single integer denoting the answer for that test case modulo $10^9 + 7$. \n\n\n-----Example-----\nInput\n4\n5\n231\n7\n2323\n6\n333\n24\n133321333\n\nOutput\n25\n1438\n1101\n686531475\n\n\n\n-----Note-----\n\nLet's illustrate what happens with the first test case. Initially, we have $s = $ 231. Initially, $\\ell = 0$ and $c = \\varepsilon$ (the empty string). The following things happen if we follow the procedure above:\n\n  Step 1, Move once: we get $\\ell = 1$.  Step 2, Cut once: we get $s = $ 2 and $c = $ 31.  Step 3, Paste $s_\\ell = $ 2 times: we get $s = $ 23131.  Step 4: $\\ell = 1 \\not= x = 5$, so we return to step 1. \n\n  Step 1, Move once: we get $\\ell = 2$.  Step 2, Cut once: we get $s = $ 23 and $c = $ 131.  Step 3, Paste $s_\\ell = $ 3 times: we get $s = $ 23131131131.  Step 4: $\\ell = 2 \\not= x = 5$, so we return to step 1. \n\n  Step 1, Move once: we get $\\ell = 3$.  Step 2, Cut once: we get $s = $ 231 and $c = $ 31131131.  Step 3, Paste $s_\\ell = $ 1 time: we get $s = $ 23131131131.  Step 4: $\\ell = 3 \\not= x = 5$, so we return to step 1. \n\n  Step 1, Move once: we get $\\ell = 4$.  Step 2, Cut once: we get $s = $ 2313 and $c = $ 1131131.  Step 3, Paste $s_\\ell = $ 3 times: we get $s = $ 2313113113111311311131131.  Step 4: $\\ell = 4 \\not= x = 5$, so we return to step 1. \n\n  Step 1, Move once: we get $\\ell = 5$.  Step 2, Cut once: we get $s = $ 23131 and $c = $ 13113111311311131131.  Step 3, Paste $s_\\ell = $ 1 times: we get $s = $ 2313113113111311311131131.  Step 4: $\\ell = 5 = x$, so we stop. \n\nAt the end of the procedure, $s$ has length $25$.", "difficulty": "competition", "id": 2183, "sample_io": [{"input": "4\n5\n231\n7\n2323\n6\n333\n24\n133321333\n", "output": ["25\n1438\n1101\n686531475\n"]}], "test_list": [{"input": "4\n5\n231\n7\n2323\n6\n333\n24\n133321333\n", "output": ["25\n1438\n1101\n686531475\n"]}, {"input": "9\n1500\n1212\n1500\n1221\n1500\n122\n1500\n12121\n1500\n22\n1500\n1111112111111112\n1500\n1111111111221111111\n1500\n111111122\n1500\n11111121111121111111\n", "output": ["1504\n1599\n1502\n1598\n1502\n1510\n1657\n1502\n1763\n"]}, {"input": "1\n1000000\n22\n", "output": ["1000002\n"]}, {"input": "1\n1000000\n221\n", "output": ["1001822\n"]}, {"input": "1\n1000000\n1221\n", "output": ["1001823\n"]}, {"input": "1\n1000000\n2121\n", "output": ["1001821\n"]}, {"input": "1\n1000000\n2211\n", "output": ["1002004\n"]}, {"input": "1\n1000000\n1212\n", "output": ["1000004\n"]}, {"input": "1\n1000000\n2112\n", "output": ["1000006\n"]}], "starter_code": "", "source_codes": ["\nMOD = 10**9 + 7\n\ndef calc(s, x):\n    dp = [[0]*(len(s)+1) for _ in range(x+1)]\n    for i in range(len(s)):\n        if i == len(s)-1:\n            dp[x][i] = (dp[x-1][i-1]+1) % MOD\n        else:\n            for j in range(1, x):\n                if s[i] != '3':\n                    if s[i+1] == '2' or (s[i] == '2' and i+1 < len(s)-1 and s[i+2] == '3'):\n                        dp[j][i] = (dp[j-1][i]+dp[x-j][len(s)-1-i]) % MOD\n                    else:\n                        if x - j >= 3 and (s[i] != '2' or i+1 < len(s) and s[i+1] != '3'):\n                            dp[j][i] = (dp[j-1][i]+(j//3)*dp[x-j][len(s)-1-i]) % MOD\n                        else:\n                            if x - j >= 2 and s[i] == '2':\n                                dp[j][i] = (dp[j-1][i]+((x-j)//2)*dp[x-j][len(s)-1-i]) % MOD\n                            elif x - j >= 3 and i+1 < len(s) and s[i] != '2' and s[i+1] == '3':\n                                dp[j][i] = (dp[j-1][i]+((x-j)//3)*dp[x-j][len(s)-1-i]) % MOD\n                            else:\n                                dp[j][i] = 0\n                elif j == x:\n                    if i < len(s) and s[i] != '3':\n                        dp[j][i] = (dp[j-1][i]+dp[x-j][len(s)-1-i]) % MOD\n    return dp[x][len(s)-1]\n\nfor _ in range(int(input())):\n    x = int(input())\n    s = input()\n    print(calc(s, x))\n\n\n"], "responses": ["```python\nMOD = 10**9 + 7\n\ndef calc(s, x):\n    dp = [[0]*(len(s)+1) for _ in range(x+1)]\n    for i in range(len(s)):\n        if i == len(s)-1:\n            dp[x][i] = (dp[x-1][i-1]+1) % MOD\n        else:\n            for j in range(1, x):\n                if s[i] != '3':\n                    if s[i+1] == '2' or (s[i] == '2' and i+1 < len(s)-1 and s[i+2] == '3'):\n                        dp[j][i] = (dp[j-1][i]+dp[x-j][len(s)-1-i]) % MOD\n                    else:\n                        if x - j >= 3 and (s[i] != '2' or i+1 < len(s) and s[i+1] != '3'):\n                            dp[j][i] = (dp[j-1][i]+(j//3)*dp[x-j][len(s)-1-i]) % MOD\n                        else:\n                            if x - j >= 2 and s[i] == '2':\n                                dp[j][i] = (dp[j-1][i]+((x-j)//2)*dp[x-j][len(s)-1-i]) % MOD\n                            elif x - j >= 3 and i+1 < len(s) and s[i] != '2' and s[i+1] == '3':\n                                dp[j][i] = (dp[j-1][i]+((x-j)//3)*dp[x-j][len(s)-1-i]) % MOD\n                            else:\n                                dp[j][i] = 0\n                elif j == x:\n                    if i < len(s) and s[i] != '3':\n                        dp[j][i] = (dp[j-1][i]+dp[x-j][len(s)-1-i]) % MOD\n    return dp[x][len(s)-1]\n\nfor _ in range(int(input())):\n    x = int(input())\n    s = input()\n    print(calc(s, x))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2183}
{"name": "1607", "description": "\"QAQ\" is a word to denote an expression of crying. Imagine \"Q\" as eyes with tears and \"A\" as a mouth.\n\nNow Diamond has given Bort a string consisting of only uppercase English letters of length n. There is a great number of \"QAQ\" in the string (Diamond is so cute!). $8$ illustration by \u732b\u5c4b https://twitter.com/nekoyaliu \n\nBort wants to know how many subsequences \"QAQ\" are in the string Diamond has given. Note that the letters \"QAQ\" don't have to be consecutive, but the order of letters should be exact.\n\n\n-----Input-----\n\nThe only line contains a string of length n (1 \u2264 n \u2264 100). It's guaranteed that the string only contains uppercase English letters.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of subsequences \"QAQ\" in the string.\n\n\n-----Examples-----\nInput\nQAQAQYSYIOIWIN\n\nOutput\n4\n\nInput\nQAQQQZZYNOIWIN\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example there are 4 subsequences \"QAQ\": \"QAQAQYSYIOIWIN\", \"QAQAQYSYIOIWIN\", \"QAQAQYSYIOIWIN\", \"QAQAQYSYIOIWIN\".", "difficulty": "interview", "id": 1607, "sample_io": [{"input": "QAQAQYSYIOIWIN\n", "output": ["4\n"]}, {"input": "QAQQQZZYNOIWIN\n", "output": ["3\n"]}], "test_list": [{"input": "QAQAQYSYIOIWIN\n", "output": ["4\n"]}, {"input": "QAQQQZZYNOIWIN\n", "output": ["3\n"]}, {"input": "QA\n", "output": ["0\n"]}, {"input": "IAQVAQZLQBQVQFTQQQADAQJA\n", "output": ["24\n"]}, {"input": "QQAAQASGAYAAAAKAKAQIQEAQAIAAIAQQQQQ\n", "output": ["378\n"]}, {"input": "AMVFNFJIAVNQJWIVONQOAOOQSNQSONOASONAONQINAONAOIQONANOIQOANOQINAONOQINAONOXJCOIAQOAOQAQAQAQAQWWWAQQAQ\n", "output": ["1077\n"]}, {"input": "AAQQAXBQQBQQXBNQRJAQKQNAQNQVDQASAGGANQQQQTJFFQQQTQQA\n", "output": ["568\n"]}, {"input": "KAZXAVLPJQBQVQQQQQAPAQQGQTQVZQAAAOYA\n", "output": ["70\n"]}, {"input": "W\n", "output": ["0\n"]}, {"input": "DBA\n", "output": ["0\n"]}, {"input": "RQAWNACASAAKAGAAAAQ\n", "output": ["10\n"]}, {"input": "QJAWZAAOAAGIAAAAAOQATASQAEAAAAQFQQHPA\n", "output": ["111\n"]}, {"input": "QQKWQAQAAAAAAAAGAAVAQUEQQUMQMAQQQNQLAMAAAUAEAAEMAAA\n", "output": ["411\n"]}, {"input": "QQUMQAYAUAAGWAAAQSDAVAAQAAAASKQJJQQQQMAWAYYAAAAAAEAJAXWQQ\n", "output": ["625\n"]}, {"input": "QORZOYAQ\n", "output": ["1\n"]}, {"input": "QCQAQAGAWAQQQAQAVQAQQQQAQAQQQAQAAATQAAVAAAQQQQAAAUUQAQQNQQWQQWAQAAQQKQYAQAAQQQAAQRAQQQWBQQQQAPBAQGQA\n", "output": ["13174\n"]}, {"input": "QQAQQAKQFAQLQAAWAMQAZQAJQAAQQOACQQAAAYANAQAQQAQAAQQAOBQQJQAQAQAQQQAAAAABQQQAVNZAQQQQAMQQAFAAEAQAQHQT\n", "output": ["10420\n"]}, {"input": "AQEGQHQQKQAQQPQKAQQQAAAAQQQAQEQAAQAAQAQFSLAAQQAQOQQAVQAAAPQQAWAQAQAFQAXAQQQQTRLOQAQQJQNQXQQQQSQVDQQQ\n", "output": ["12488\n"]}, {"input": "QNQKQQQLASQBAVQQQQAAQQOQRJQQAQQQEQZUOANAADAAQQJAQAQARAAAQQQEQBHTQAAQAAAAQQMKQQQIAOJJQQAQAAADADQUQQQA\n", "output": ["9114\n"]}, {"input": "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\n", "output": ["35937\n"]}, {"input": "AMQQAAQAAQAAAAAAQQQBOAAANAAKQJCYQAE\n", "output": ["254\n"]}, {"input": "AYQBAEQGAQEOAKGIXLQJAIAKQAAAQPUAJAKAATFWQQAOQQQUFQYAQQMQHOKAAJXGFCARAQSATHAUQQAATQJJQDQRAANQQAE\n", "output": ["2174\n"]}, {"input": "AAQXAAQAYQAAAAGAQHVQYAGIVACADFAAQAAAAQZAAQMAKZAADQAQDAAQDAAAMQQOXYAQQQAKQBAAQQKAXQBJZDDLAAHQQ\n", "output": ["2962\n"]}, {"input": "AYQQYAVAMNIAUAAKBBQVACWKTQSAQZAAQAAASZJAWBCAALAARHACQAKQQAQAARPAQAAQAQAAZQUSHQAMFVFZQQQQSAQQXAA\n", "output": ["2482\n"]}, {"input": "LQMAQQARQAQBJQQQAGAAZQQXALQQAARQAQQQQAAQQAQQQAQQCAQQAQQAYQQQRAAZATQALYQQAAHHAAQHAAAAAAAAQQMAAQNAKQ\n", "output": ["7768\n"]}, {"input": "MAQQWAQOYQMAAAQAQPQZAOAAQAUAQNAAQAAAITQSAQAKAQKAQQWSQAAQQAGUCDQMQWKQUXKWQQAAQQAAQQZQDQQQAABXQUUXQOA\n", "output": ["5422\n"]}, {"input": "QTAAQDAQXAQQJQQQGAAAQQQQSBQZKAQQAQQQQEAQNUQBZCQLYQZQEQQAAQHQVAORKQVAQYQNASZQAARZAAGAAAAOQDCQ\n", "output": ["3024\n"]}, {"input": "QQWAQQGQQUZQQQLZAAQYQXQVAQFQUAQZUQZZQUKBHSHTQYLQAOQXAQQGAQQTQOAQARQADAJRAAQPQAQQUQAUAMAUVQAAAQQAWQ\n", "output": ["4527\n"]}, {"input": "QQAAQQAQVAQZQQQQAOEAQZPQIBQZACQQAFQQLAAQDATZQANHKYQQAQTAAFQRQAIQAJPWQAQTEIRXAEQQAYWAAAUKQQAQAQQQSQQH\n", "output": ["6416\n"]}, {"input": "AQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQAQAAAA\n", "output": ["14270\n"]}, {"input": "AQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQ\n", "output": ["13136\n"]}, {"input": "AQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQAQAA\n", "output": ["14270\n"]}, {"input": "AQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQQAA\n", "output": ["14231\n"]}, {"input": "QQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQAQAA\n", "output": ["15296\n"]}, {"input": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\n", "output": ["0\n"]}, {"input": "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n", "output": ["0\n"]}, {"input": "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\n", "output": ["0\n"]}, {"input": "QAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQA\n", "output": ["20825\n"]}, {"input": "AQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQ\n", "output": ["20825\n"]}, {"input": "Q\n", "output": ["0\n"]}, {"input": "A\n", "output": ["0\n"]}, {"input": "FFF\n", "output": ["0\n"]}, {"input": "AAAAAA\n", "output": ["0\n"]}], "starter_code": "", "source_codes": ["\ns = input()\nn = len(s)\nans, cnt = 0, 0\nfor c in s:\n    if c == 'Q':\n        cnt += 1\n    elif c == 'A' and cnt > 0:\n        ans += 1\n        cnt -= 2\nprint(ans)\n\n\n"], "responses": ["```python\ns = input()\nn = len(s)\nans, cnt = 0, 0\nfor c in s:\n    if c == 'Q':\n        cnt += 1\n    elif c == 'A' and cnt > 0:\n        ans += 1\n        cnt -= 2\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1607}
{"name": "2190", "description": "There are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]  \u2192  [10 8 4]  \u2192  [10]. So, there are two steps.", "difficulty": "competition", "id": 2190, "sample_io": [{"input": "10\n10 9 7 8 6 5 3 4 2 1\n", "output": ["2\n"]}, {"input": "6\n1 2 3 4 5 6\n", "output": ["0\n"]}], "test_list": [{"input": "10\n10 9 7 8 6 5 3 4 2 1\n", "output": ["2\n"]}, {"input": "6\n1 2 3 4 5 6\n", "output": ["0\n"]}, {"input": "6\n6 5 4 3 2 1\n", "output": ["1\n"]}, {"input": "10\n10 7 4 2 5 8 9 6 3 1\n", "output": ["4\n"]}, {"input": "15\n15 9 5 10 7 11 14 6 2 3 12 1 8 13 4\n", "output": ["4\n"]}, {"input": "1\n1\n", "output": ["0\n"]}, {"input": "2\n1 2\n", "output": ["0\n"]}, {"input": "2\n2 1\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a list of integers representing the ids of psychos\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    stack = []\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        while len(stack) > 0 and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        if not stack or arr[stack[-1]] > arr[i]:\n            stack.append(i)\n            ans += 1\n\n    print(ans)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a list of integers representing the ids of psychos\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    stack = []\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        while len(stack) > 0 and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        if not stack or arr[stack[-1]] > arr[i]:\n            stack.append(i)\n            ans += 1\n\n    print(ans)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2190}
{"name": "2095", "description": "A tree is an undirected connected graph without cycles.\n\nLet's consider a rooted undirected tree with n vertices, numbered 1 through n. There are many ways to represent such a tree. One way is to create an array with n integers p_1, p_2, ..., p_{n}, where p_{i} denotes a parent of vertex i (here, for convenience a root is considered its own parent). [Image] For this rooted tree the array p is [2, 3, 3, 2]. \n\nGiven a sequence p_1, p_2, ..., p_{n}, one is able to restore a tree:  There must be exactly one index r that p_{r} = r. A vertex r is a root of the tree.  For all other n - 1 vertices i, there is an edge between vertex i and vertex p_{i}. \n\nA sequence p_1, p_2, ..., p_{n} is called valid if the described procedure generates some (any) rooted tree. For example, for n = 3 sequences (1,2,2), (2,3,1) and (2,1,3) are not valid.\n\nYou are given a sequence a_1, a_2, ..., a_{n}, not necessarily valid. Your task is to change the minimum number of elements, in order to get a valid sequence. Print the minimum number of changes and an example of a valid sequence after that number of changes. If there are many valid sequences achievable in the minimum number of changes, print any of them.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 the number of vertices in the tree.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 n).\n\n\n-----Output-----\n\nIn the first line print the minimum number of elements to change, in order to get a valid sequence.\n\nIn the second line, print any valid sequence possible to get from (a_1, a_2, ..., a_{n}) in the minimum number of changes. If there are many such sequences, any of them will be accepted.\n\n\n-----Examples-----\nInput\n4\n2 3 3 4\n\nOutput\n1\n2 3 4 4 \n\nInput\n5\n3 2 2 5 3\n\nOutput\n0\n3 2 2 5 3 \n\nInput\n8\n2 3 5 4 1 6 6 7\n\nOutput\n2\n2 3 7 8 1 6 6 7\n\n\n\n-----Note-----\n\nIn the first sample, it's enough to change one element. In the provided output, a sequence represents a tree rooted in a vertex 4 (because p_4 = 4), which you can see on the left drawing below. One of other correct solutions would be a sequence 2 3 3 2, representing a tree rooted in vertex 3 (right drawing below). On both drawings, roots are painted red. [Image] \n\nIn the second sample, the given sequence is already valid.", "difficulty": "competition", "id": 2095, "sample_io": [{"input": "4\n2 3 3 4\n", "output": ["1\n2 3 4 4 \n"]}, {"input": "5\n3 2 2 5 3\n", "output": ["0\n3 2 2 5 3 \n"]}, {"input": "8\n2 3 5 4 1 6 6 7\n", "output": ["2\n2 3 7 8 1 6 6 7\n"]}], "test_list": [{"input": "4\n2 3 3 4\n", "output": ["1\n2 3 4 4 \n"]}, {"input": "5\n3 2 2 5 3\n", "output": ["0\n3 2 2 5 3 \n"]}, {"input": "8\n2 3 5 4 1 6 6 7\n", "output": ["2\n2 3 7 8 1 6 6 7\n"]}, {"input": "2\n1 2\n", "output": ["1\n2 2 \n"]}, {"input": "7\n4 3 2 6 3 5 2\n", "output": ["1\n4 3 3 6 3 5 2 \n"]}, {"input": "6\n6 2 6 2 4 2\n", "output": ["0\n6 2 6 2 4 2 \n"]}, {"input": "7\n1 6 4 4 5 6 7\n", "output": ["4\n7 6 4 7 7 7 7 \n"]}, {"input": "7\n7 5 3 1 2 1 5\n", "output": ["1\n7 5 3 1 3 1 5 \n"]}, {"input": "7\n1 2 3 4 5 6 7\n", "output": ["6\n7 7 7 7 7 7 7 \n"]}, {"input": "18\n2 3 4 5 2 7 8 9 10 7 11 12 14 15 13 17 18 18\n", "output": ["5\n2 18 4 5 2 7 18 9 10 7 18 18 18 15 13 17 18 18 \n"]}, {"input": "8\n2 1 2 2 6 5 6 6\n", "output": ["2\n1 1 2 2 1 5 6 6 \n"]}, {"input": "3\n2 1 1\n", "output": ["1\n1 1 1 \n"]}], "starter_code": "", "source_codes": ["\nimport sys\n\ndef main():\n    n = int(input())\n    p = [0] + list(map(int, input().split()))\n\n    res = 0\n    root = None\n    for i in range(1, n+1):\n        if p[i] == i:\n            root = i\n            break\n\n    if not root:\n        for i in range(n-1, -1, -1):\n            if p[i] != i and (p[p[i]] == p[i] or p[p[i]] == i):\n                res += 1\n                p[p[i]] = i\n        print(res)\n        print(*p[1:])\n    else:\n        for i in range(1, n+1):\n            if p[i] != root and (p[p[i]] != i and p[i] != i):\n                res += 1\n                p[i] = root\n        print(res)\n        print(*p[1:])\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport sys\n\ndef main():\n    n = int(input())\n    p = [0] + list(map(int, input().split()))\n\n    res = 0\n    root = None\n    for i in range(1, n+1):\n        if p[i] == i:\n            root = i\n            break\n\n    if not root:\n        for i in range(n-1, -1, -1):\n            if p[i] != i and (p[p[i]] == p[i] or p[p[i]] == i):\n                res += 1\n                p[p[i]] = i\n        print(res)\n        print(*p[1:])\n    else:\n        for i in range(1, n+1):\n            if p[i] != root and (p[p[i]] != i and p[i] != i):\n                res += 1\n                p[i] = root\n        print(res)\n        print(*p[1:])\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2095}
{"name": "2042", "description": "Vasya's telephone contains n photos. Photo number 1 is currently opened on the phone. It is allowed to move left and right to the adjacent photo by swiping finger over the screen. If you swipe left from the first photo, you reach photo n. Similarly, by swiping right from the last photo you reach photo 1. It takes a seconds to swipe from photo to adjacent.\n\nFor each photo it is known which orientation is intended for it \u2014 horizontal or vertical. Phone is in the vertical orientation and can't be rotated. It takes b second to change orientation of the photo.\n\nVasya has T seconds to watch photos. He want to watch as many photos as possible. If Vasya opens the photo for the first time, he spends 1 second to notice all details in it. If photo is in the wrong orientation, he spends b seconds on rotating it before watching it. If Vasya has already opened the photo, he just skips it (so he doesn't spend any time for watching it or for changing its orientation). It is not allowed to skip unseen photos.\n\nHelp Vasya find the maximum number of photos he is able to watch during T seconds.\n\n\n-----Input-----\n\nThe first line of the input contains 4 integers n, a, b, T (1 \u2264 n \u2264 5\u00b710^5, 1 \u2264 a, b \u2264 1000, 1 \u2264 T \u2264 10^9) \u2014 the number of photos, time to move from a photo to adjacent, time to change orientation of a photo and time Vasya can spend for watching photo.\n\nSecond line of the input contains a string of length n containing symbols 'w' and 'h'. \n\nIf the i-th position of a string contains 'w', then the photo i should be seen in the horizontal orientation.\n\nIf the i-th position of a string contains 'h', then the photo i should be seen in vertical orientation.\n\n\n-----Output-----\n\nOutput the only integer, the maximum number of photos Vasya is able to watch during those T seconds.\n\n\n-----Examples-----\nInput\n4 2 3 10\nwwhw\n\nOutput\n2\n\nInput\n5 2 4 13\nhhwhh\n\nOutput\n4\n\nInput\n5 2 4 1000\nhhwhh\n\nOutput\n5\n\nInput\n3 1 100 10\nwhw\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample test you can rotate the first photo (3 seconds), watch the first photo (1 seconds), move left (2 second), rotate fourth photo (3 seconds), watch fourth photo (1 second). The whole process takes exactly 10 seconds.\n\nNote that in the last sample test the time is not enough even to watch the first photo, also you can't skip it.", "difficulty": "competition", "id": 2042, "sample_io": [{"input": "4 2 3 10\nwwhw\n", "output": ["2\n"]}, {"input": "5 2 4 13\nhhwhh\n", "output": ["4\n"]}, {"input": "5 2 4 1000\nhhwhh\n", "output": ["5\n"]}, {"input": "3 1 100 10\nwhw\n", "output": ["0\n"]}], "test_list": [{"input": "4 2 3 10\nwwhw\n", "output": ["2\n"]}, {"input": "5 2 4 13\nhhwhh\n", "output": ["4\n"]}, {"input": "5 2 4 1000\nhhwhh\n", "output": ["5\n"]}, {"input": "3 1 100 10\nwhw\n", "output": ["0\n"]}, {"input": "10 2 3 32\nhhwwhwhwwh\n", "output": ["7\n"]}, {"input": "1 2 3 3\nw\n", "output": ["0\n"]}, {"input": "100 20 100 10202\nwwwwhhwhhwhhwhhhhhwwwhhhwwwhwwhwhhwwhhwwwhwwhwwwhwhwhwwhhhwhwhhwhwwhhwhwhwwwhwwwwhwhwwwwhwhhhwhwhwww\n", "output": ["100\n"]}, {"input": "20 10 10 1\nhwhwhwhwhwhwhwhwhhhw\n", "output": ["1\n"]}, {"input": "12 10 10 1\nwhwhwhwhwhwh\n", "output": ["0\n"]}, {"input": "2 5 5 1000000000\nwh\n", "output": ["2\n"]}, {"input": "16 1 1000 2100\nhhhwwwhhhwhhhwww\n", "output": ["5\n"]}, {"input": "5 2 4 13\nhhhwh\n", "output": ["4\n"]}, {"input": "7 1 1000 13\nhhhhwhh\n", "output": ["6\n"]}, {"input": "10 1 1000 10\nhhhhhhwwhh\n", "output": ["5\n"]}, {"input": "7 1 100 8\nhhhwwwh\n", "output": ["4\n"]}, {"input": "5 2 4 12\nhhhwh\n", "output": ["4\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the current year in Berland\n    s = input()\n    n, a, b, T = map(int, input().split())\n    v = input()\n\n    ans = 0\n    cur_a = 1\n    prev_h = False\n\n    for i in range(n):\n        if v[i] == 'w':\n            if not prev_h:\n                cur_a += b\n            cur_a += a\n            prev_h = True\n        else:\n            prev_h = False\n        ans += 1\n        cur_a -= 1\n        if cur_a <= T and ans < n:\n            T -= cur_a\n            ans += 1\n\n    print(ans)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the current year in Berland\n    s = input()\n    n, a, b, T = map(int, input().split())\n    v = input()\n\n    ans = 0\n    cur_a = 1\n    prev_h = False\n\n    for i in range(n):\n        if v[i] == 'w':\n            if not prev_h:\n                cur_a += b\n            cur_a += a\n            prev_h = True\n        else:\n            prev_h = False\n        ans += 1\n        cur_a -= 1\n        if cur_a <= T and ans < n:\n            T -= cur_a\n            ans += 1\n\n    print(ans)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2042}
{"name": "2037", "description": "You work in a big office. It is a 9\u00a0floor building with an elevator that can accommodate up to 4\u00a0people. It is your responsibility to manage this elevator.\n\nToday you are late, so there are queues on some floors already. For each person you know the floor where he currently is and the floor he wants to reach. Also, you know the order in which people came to the elevator.\n\nAccording to the company's rules, if an employee comes to the elevator earlier than another one, he has to enter the elevator earlier too (even if these employees stay on different floors). Note that the employees are allowed to leave the elevator in arbitrary order.\n\nThe elevator has two commands:   Go up or down one floor. The movement takes 1 second.  Open the doors on the current floor. During this operation all the employees who have reached their destination get out of the elevator. Then all the employees on the floor get in the elevator in the order they are queued up while it doesn't contradict the company's rules and there is enough space in the elevator. Each employee spends 1 second to get inside and outside the elevator. \n\nInitially the elevator is empty and is located on the floor 1.\n\nYou are interested what is the minimum possible time you need to spend to deliver all the employees to their destination. It is not necessary to return the elevator to the floor 1.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000)\u00a0\u2014 the number of employees.\n\nThe i-th of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 9, a_{i} \u2260 b_{i})\u00a0\u2014 the floor on which an employee initially is, and the floor he wants to reach.\n\nThe employees are given in the order they came to the elevator.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimal possible time in seconds.\n\n\n-----Examples-----\nInput\n2\n3 5\n5 3\n\nOutput\n10\nInput\n2\n5 3\n3 5\n\nOutput\n12\n\n\n-----Note-----\n\n Explaination for the first sample [Image] t = 0\n\n[Image] t = 2\n\n[Image] t = 3\n\n[Image] t = 5\n\n[Image] t = 6\n\n[Image] t = 7\n\n[Image] t = 9\n\n[Image] t = 10", "difficulty": "competition", "id": 2037, "sample_io": [{"input": "2\n3 5\n5 3\n", "output": ["10"]}, {"input": "2\n5 3\n3 5\n", "output": ["12"]}], "test_list": [{"input": "2\n3 5\n5 3\n", "output": ["10"]}, {"input": "2\n5 3\n3 5\n", "output": ["12"]}, {"input": "9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n", "output": ["34"]}, {"input": "50\n9 5\n2 6\n5 4\n7 5\n3 6\n5 8\n1 2\n6 1\n9 7\n8 1\n9 5\n6 8\n6 8\n2 8\n4 9\n6 7\n7 8\n5 8\n1 2\n9 2\n5 9\n6 7\n3 2\n9 8\n7 8\n7 4\n6 5\n1 7\n6 5\n2 6\n3 1\n6 5\n3 7\n9 3\n8 1\n8 3\n8 2\n1 9\n9 2\n3 2\n8 7\n5 1\n6 2\n2 1\n6 1\n3 4\n4 1\n2 3\n2 6\n2 9\n", "output": ["278"]}, {"input": "50\n8 9\n6 7\n6 8\n4 1\n3 2\n9 3\n8 3\n9 7\n4 6\n4 6\n5 6\n7 2\n6 3\n1 3\n8 2\n4 6\n6 8\n7 6\n8 6\n9 4\n8 6\n9 1\n3 8\n3 1\n4 7\n4 9\n9 1\n7 4\n3 5\n1 7\n3 5\n8 9\n5 4\n2 9\n2 9\n3 9\n8 5\n4 9\n9 4\n5 6\n6 1\n4 2\n3 9\n9 1\n9 4\n4 5\n2 4\n2 6\n3 6\n1 9\n", "output": ["252"]}, {"input": "50\n3 9\n8 9\n7 2\n9 1\n5 2\n2 8\n2 4\n8 6\n4 6\n1 6\n5 3\n3 8\n8 2\n6 7\n7 1\n2 4\n2 8\n3 7\n7 1\n7 9\n9 3\n7 2\n2 7\n8 4\n5 8\n6 8\n7 1\n7 5\n5 6\n9 1\n8 6\n3 6\n7 6\n4 3\n3 2\n9 2\n4 9\n2 1\n7 9\n1 8\n4 9\n5 2\n7 2\n9 8\n3 1\n4 5\n3 4\n2 7\n2 1\n6 1\n", "output": ["260"]}, {"input": "50\n7 1\n4 8\n9 3\n9 3\n2 4\n5 9\n1 5\n1 4\n7 6\n4 8\n3 6\n2 8\n5 1\n8 9\n7 4\n7 2\n2 4\n7 9\n8 7\n3 8\n1 7\n4 5\n7 2\n6 4\n6 1\n4 8\n5 6\n4 3\n6 5\n6 4\n6 9\n2 5\n9 3\n3 4\n3 4\n9 3\n7 9\n5 8\n1 6\n5 1\n8 3\n7 4\n1 8\n5 2\n1 7\n6 1\n9 6\n3 1\n6 5\n9 7\n", "output": ["274"]}, {"input": "50\n1 9\n9 4\n4 2\n2 4\n3 8\n9 5\n3 2\n8 3\n8 1\n4 7\n5 3\n2 6\n1 8\n6 5\n4 1\n5 7\n1 4\n4 7\n5 4\n8 2\n4 6\n8 7\n1 9\n1 6\n6 4\n5 2\n5 3\n2 6\n4 6\n5 2\n6 7\n5 3\n9 5\n8 3\n1 9\n2 6\n5 1\n7 3\n4 3\n7 2\n4 3\n5 7\n6 8\n8 2\n3 6\n4 9\n1 8\n7 8\n5 4\n7 6\n", "output": ["258"]}, {"input": "50\n5 9\n1 2\n6 9\n1 6\n8 1\n5 3\n2 1\n2 7\n6 1\n4 3\n6 1\n2 6\n2 8\n2 1\n3 4\n6 2\n4 8\n6 4\n2 1\n1 5\n4 9\n6 8\n4 1\n1 6\n1 5\n5 9\n2 6\n6 9\n4 2\n4 7\n8 2\n4 6\n2 5\n9 4\n3 1\n8 4\n3 9\n1 3\n2 3\n8 7\n5 4\n2 6\n9 5\n6 2\n5 8\n2 8\n8 9\n9 2\n5 3\n9 1\n", "output": ["282"]}, {"input": "50\n9 8\n8 9\n2 3\n2 6\n7 6\n9 8\n7 5\n8 5\n2 9\n4 2\n4 6\n9 4\n1 9\n4 8\n7 9\n7 4\n4 7\n7 6\n8 9\n2 8\n1 3\n6 7\n6 3\n1 8\n9 3\n4 9\n9 6\n4 2\n6 5\n3 8\n9 3\n7 5\n9 6\n5 6\n4 7\n5 7\n9 1\n7 5\n5 6\n3 1\n4 3\n7 1\n9 8\n7 8\n3 7\n8 3\n9 6\n5 7\n1 8\n6 4\n", "output": ["275"]}, {"input": "9\n2 1\n5 9\n2 6\n2 6\n4 7\n7 3\n3 1\n3 1\n7 8\n", "output": ["46"]}, {"input": "5\n1 7\n2 5\n8 6\n3 4\n1 6\n", "output": ["29"]}, {"input": "4\n2 1\n1 7\n5 8\n8 4\n", "output": ["21"]}, {"input": "1\n1 9\n", "output": ["10"]}, {"input": "1\n9 1\n", "output": ["18"]}, {"input": "1\n1 5\n", "output": ["6"]}, {"input": "1\n8 6\n", "output": ["11"]}], "starter_code": "", "source_codes": ["\nimport sys\n\ndef main():\n    # Take user input as a string representing the number of employees\n    n = int(input())\n\n    # Initialize variables to keep track of time and people in the elevator\n    t, p = 0, []\n    current_floor = 1\n\n    # Iterate over each employee\n    for i in range(n):\n        a, b = map(int, input().split())\n        \n        # If the employee's destination is greater than or equal to the current floor,\n        # update the current floor and add the time it takes to get there\n        if b >= current_floor:\n            while current_floor < b:\n                t += 1\n                current_floor += 1\n\n            # Add the person to the elevator and calculate their travel time\n            p.append((a, b))\n            t += max(0, abs(a - current_floor) + (abs(b - current_floor) if i > 0 else 0))\n\n    # Open the doors on each floor and update the time\n    for x in range(1, 10):\n        while any(y == x or z == x for a, b in p for y, z in [a, b]):\n            t += len(p) + 4\n            current_floor = x\n\n    print(t)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport sys\n\ndef main():\n    # Take user input as a string representing the number of employees\n    n = int(input())\n\n    # Initialize variables to keep track of time and people in the elevator\n    t, p = 0, []\n    current_floor = 1\n\n    # Iterate over each employee\n    for i in range(n):\n        a, b = map(int, input().split())\n        \n        # If the employee's destination is greater than or equal to the current floor,\n        # update the current floor and add the time it takes to get there\n        if b >= current_floor:\n            while current_floor < b:\n                t += 1\n                current_floor += 1\n\n            # Add the person to the elevator and calculate their travel time\n            p.append((a, b))\n            t += max(0, abs(a - current_floor) + (abs(b - current_floor) if i > 0 else 0))\n\n    # Open the doors on each floor and update the time\n    for x in range(1, 10):\n        while any(y == x or z == x for a, b in p for y, z in [a, b]):\n            t += len(p) + 4\n            current_floor = x\n\n    print(t)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2037}
{"name": "2199", "description": "Writing light novels is the most important thing in Linova's life. Last night, Linova dreamed about a fantastic kingdom. She began to write a light novel for the kingdom as soon as she woke up, and of course, she is the queen of it.\n\n[Image]\u00a0\n\nThere are $n$ cities and $n-1$ two-way roads connecting pairs of cities in the kingdom. From any city, you can reach any other city by walking through some roads. The cities are numbered from $1$ to $n$, and the city $1$ is the capital of the kingdom. So, the kingdom has a tree structure.\n\nAs the queen, Linova plans to choose exactly $k$ cities developing industry, while the other cities will develop tourism. The capital also can be either industrial or tourism city.\n\nA meeting is held in the capital once a year. To attend the meeting, each industry city sends an envoy. All envoys will follow the shortest path from the departure city to the capital (which is unique).\n\nTraveling in tourism cities is pleasant. For each envoy, his happiness is equal to the number of tourism cities on his path.\n\nIn order to be a queen loved by people, Linova wants to choose $k$ cities which can maximize the sum of happinesses of all envoys. Can you calculate the maximum sum for her?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2\\le n\\le 2 \\cdot 10^5$, $1\\le k< n$) \u00a0\u2014 the number of cities and industry cities respectively.\n\nEach of the next $n-1$ lines contains two integers $u$ and $v$ ($1\\le u,v\\le n$), denoting there is a road connecting city $u$ and city $v$.\n\nIt is guaranteed that from any city, you can reach any other city by the roads.\n\n\n-----Output-----\n\nPrint the only line containing a single integer \u00a0\u2014 the maximum possible sum of happinesses of all envoys.\n\n\n-----Examples-----\nInput\n7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n\nOutput\n7\nInput\n4 1\n1 2\n1 3\n2 4\n\nOutput\n2\nInput\n8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n\nOutput\n9\n\n\n-----Note-----\n\n[Image]\n\nIn the first example, Linova can choose cities $2$, $5$, $6$, $7$ to develop industry, then the happiness of the envoy from city $2$ is $1$, the happiness of envoys from cities $5$, $6$, $7$ is $2$. The sum of happinesses is $7$, and it can be proved to be the maximum one.\n\n[Image]\n\nIn the second example, choosing cities $3$, $4$ developing industry can reach a sum of $3$, but remember that Linova plans to choose exactly $k$ cities developing industry, then the maximum sum is $2$.", "difficulty": "competition", "id": 2199, "sample_io": [{"input": "7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n", "output": ["7"]}, {"input": "4 1\n1 2\n1 3\n2 4\n", "output": ["2"]}, {"input": "8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n", "output": ["9"]}], "test_list": [{"input": "7 4\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n", "output": ["7"]}, {"input": "4 1\n1 2\n1 3\n2 4\n", "output": ["2"]}, {"input": "8 5\n7 5\n1 7\n6 1\n3 7\n8 3\n2 1\n4 5\n", "output": ["9"]}, {"input": "2 1\n1 2\n", "output": ["1"]}, {"input": "20 7\n9 7\n3 7\n15 9\n1 3\n11 9\n18 7\n17 18\n20 1\n4 11\n2 11\n12 18\n8 18\n13 2\n19 2\n10 9\n6 13\n5 8\n14 1\n16 13\n", "output": ["38"]}, {"input": "3 2\n1 2\n1 3\n", "output": ["2"]}, {"input": "3 1\n1 2\n2 3\n", "output": ["2"]}], "starter_code": "", "source_codes": ["\nimport sys\ninput = sys.stdin.readline\n\nclass Edge:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n\nn, k = map(int, input().split())\nedges = [Edge(*map(lambda x: int(x) - 1, input().split())) for _ in range(n-1)]\n\ngraph = [[] for _ in range(n)]\nfor edge in edges:\n    graph[edge.u].append(edge.v)\n    graph[edge.v].append(edge.u)\n\ndp = [[0] * n for _ in range(2)]\nans = 0\ndef dfs(node, par):\n    global ans\n    dp[1][node] += len(graph[node]) - 1\n    if node != 0:\n        dp[0][par] += dp[1][node]\n    for child in graph[node]:\n        if child == par:\n            continue\n        dfs(child, node)\n        dp[1][node] += dp[1][child]\n\ndfs(0, -1)\n\nfor i in range(n-1):\n    ans -= min(dp[1][:i+1])\n    ans += max(k - sum(dp[1][:i+1]), 0) * (n-i-1)\nprint(ans)\n\n\n"], "responses": ["```python\nimport sys\ninput = sys.stdin.readline\n\nclass Edge:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n\nn, k = map(int, input().split())\nedges = [Edge(*map(lambda x: int(x) - 1, input().split())) for _ in range(n-1)]\n\ngraph = [[] for _ in range(n)]\nfor edge in edges:\n    graph[edge.u].append(edge.v)\n    graph[edge.v].append(edge.u)\n\ndp = [[0] * n for _ in range(2)]\nans = 0\ndef dfs(node, par):\n    global ans\n    dp[1][node] += len(graph[node]) - 1\n    if node != 0:\n        dp[0][par] += dp[1][node]\n    for child in graph[node]:\n        if child == par:\n            continue\n        dfs(child, node)\n        dp[1][node] += dp[1][child]\n\ndfs(0, -1)\n\nfor i in range(n-1):\n    ans -= min(dp[1][:i+1])\n    ans += max(k - sum(dp[1][:i+1]), 0) * (n-i-1)\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2199}
{"name": "2144", "description": "Ujan has a lot of numbers in his boxes. He likes order and balance, so he decided to reorder the numbers.\n\nThere are $k$ boxes numbered from $1$ to $k$. The $i$-th box contains $n_i$ integer numbers. The integers can be negative. All of the integers are distinct. \n\nUjan is lazy, so he will do the following reordering of the numbers exactly once. He will pick a single integer from each of the boxes, $k$ integers in total. Then he will insert the chosen numbers\u00a0\u2014 one integer in each of the boxes, so that the number of integers in each box is the same as in the beginning. Note that he may also insert an integer he picked from a box back into the same box.\n\nUjan will be happy if the sum of the integers in each box is the same. Can he achieve this and make the boxes perfectly balanced, like all things should be?\n\n\n-----Input-----\n\nThe first line contains a single integer $k$ ($1 \\leq k \\leq 15$), the number of boxes. \n\nThe $i$-th of the next $k$ lines first contains a single integer $n_i$ ($1 \\leq n_i \\leq 5\\,000$), the number of integers in box $i$. Then the same line contains $n_i$ integers $a_{i,1}, \\ldots, a_{i,n_i}$ ($|a_{i,j}| \\leq 10^9$), the integers in the $i$-th box. \n\nIt is guaranteed that all $a_{i,j}$ are distinct.\n\n\n-----Output-----\n\nIf Ujan cannot achieve his goal, output \"No\" in a single line. Otherwise in the first line output \"Yes\", and then output $k$ lines. The $i$-th of these lines should contain two integers $c_i$ and $p_i$. This means that Ujan should pick the integer $c_i$ from the $i$-th box and place it in the $p_i$-th box afterwards.\n\nIf there are multiple solutions, output any of those.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4\n3 1 7 4\n2 3 2\n2 8 5\n1 10\n\nOutput\nYes\n7 2\n2 3\n5 1\n10 4\n\nInput\n2\n2 3 -2\n2 -1 5\n\nOutput\nNo\n\nInput\n2\n2 -10 10\n2 0 -20\n\nOutput\nYes\n-10 2\n-20 1\n\n\n\n-----Note-----\n\nIn the first sample, Ujan can put the number $7$ in the $2$nd box, the number $2$ in the $3$rd box, the number $5$ in the $1$st box and keep the number $10$ in the same $4$th box. Then the boxes will contain numbers $\\{1,5,4\\}$, $\\{3, 7\\}$, $\\{8,2\\}$ and $\\{10\\}$. The sum in each box then is equal to $10$.\n\nIn the second sample, it is not possible to pick and redistribute the numbers in the required way.\n\nIn the third sample, one can swap the numbers $-20$ and $-10$, making the sum in each box equal to $-10$.", "difficulty": "competition", "id": 2144, "sample_io": [{"input": "4\n3 1 7 4\n2 3 2\n2 8 5\n1 10\n", "output": ["Yes\n7 2\n2 3\n5 1\n10 4\n"]}, {"input": "2\n2 3 -2\n2 -1 5\n", "output": ["No\n"]}, {"input": "2\n2 -10 10\n2 0 -20\n", "output": ["Yes\n-10 2\n-20 1\n"]}], "test_list": [{"input": "4\n3 1 7 4\n2 3 2\n2 8 5\n1 10\n", "output": ["Yes\n7 2\n2 3\n5 1\n10 4\n"]}, {"input": "2\n2 3 -2\n2 -1 5\n", "output": ["No\n"]}, {"input": "2\n2 -10 10\n2 0 -20\n", "output": ["Yes\n-10 2\n-20 1\n"]}, {"input": "1\n1 0\n", "output": ["Yes\n0 1\n"]}, {"input": "3\n1 20\n2 30 40\n3 50 60 80\n", "output": ["No\n"]}, {"input": "3\n3 1 3 100\n2 4 104\n2 2 102\n", "output": ["No\n"]}, {"input": "4\n3 80 1 10\n3 52 19 24\n3 27 46 29\n3 74 13 25\n", "output": ["No\n"]}, {"input": "2\n5 -1000000000 999999999 -999999998 999999997 0\n5 1000000000 -999999999 999999998 -999999997 4\n", "output": ["Yes\n0 2\n4 1\n"]}, {"input": "5\n10 -251 650 475 -114 364 -75754 -982 -532 -151 -484\n10 -623 -132 -317561 -438 20 -275 -323 -530089 -311 -587\n10 450900 -519 903 -401 -789 -606529 277 -267 -682 -161\n10 -246 873 -641 838 719 234 789 -74 -287288 -772972\n10 186 741 -927 -866 -855 578 -1057019 202 162962 -458\n", "output": ["Yes\n650 3\n-530089 1\n450900 5\n-287288 2\n162962 4\n"]}, {"input": "2\n2 1 2\n10 0 1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 589934621\n", "output": ["No\n"]}], "starter_code": "", "source_codes": ["\nfrom collections import defaultdict, deque\n\ndef main():\n    k = int(input())\n    boxes = []\n    for _ in range(k):\n        n, *nums = map(int, input().split())\n        boxes.append((nums[:n], nums[n:]))\n    sums = [sum(nums) for nums in boxes]\n\n    possible = True\n    for i in range(k - 1, -1, -1):\n        if (sums[i] + sums[k-1-i]) % k != 0:\n            possible = False\n            break\n\n    if not possible:\n        print(\"No\")\n        return\n\n    print(\"Yes\")\n    chosen = {}\n    taken = defaultdict(deque)\n    for i in range(k):\n        for j, num in enumerate(boxes[i][0]):\n            taken[i].append(num)\n\n    for i in range(k):\n        for j, num in enumerate(boxes[k-1-i][1]):\n            x = (sums[i] - sums[k-1-i]) // k\n            while taken[i] and len(taken[i]) > 1:\n                if chosen.get(i) is None or chosen[i] < taken[i][-1]:\n                    taken[i].pop()\n                    chosen[i] = taken[i][-1]\n                    break\n\n            next_num = taken[k-1-i].popleft() + x\n            while chosen.get(k-1-i) is not None and chosen[k-1-i] <= next_num:\n                next_num += 1\n            chosen[k-1-i] = next_num\n\n        for j, num in enumerate(boxes[i][0]):\n            taken[i].append(num)\n\n    result = []\n    for i in range(k):\n        if chosen.get(i) is not None and chosen[i] >= boxes[i][0][0]:\n            result.append((chosen[i], i+1))\n        else:\n            index = boxes[k-1-i][0].index(max(boxes[k-1-i][0]))\n            result.append((boxes[k-1-i][0][index], i+1))\n\n    for val, idx in result:\n        print(val, idx)\n\nmain()\n\n\n"], "responses": ["```python\nfrom collections import defaultdict, deque\n\ndef main():\n    k = int(input())\n    boxes = []\n    for _ in range(k):\n        n, *nums = map(int, input().split())\n        boxes.append((nums[:n], nums[n:]))\n    sums = [sum(nums) for nums in boxes]\n\n    possible = True\n    for i in range(k - 1, -1, -1):\n        if (sums[i] + sums[k-1-i]) % k != 0:\n            possible = False\n            break\n\n    if not possible:\n        print(\"No\")\n        return\n\n    print(\"Yes\")\n    chosen = {}\n    taken = defaultdict(deque)\n    for i in range(k):\n        for j, num in enumerate(boxes[i][0]):\n            taken[i].append(num)\n\n    for i in range(k):\n        for j, num in enumerate(boxes[k-1-i][1]):\n            x = (sums[i] - sums[k-1-i]) // k\n            while taken[i] and len(taken[i]) > 1:\n                if chosen.get(i) is None or chosen[i] < taken[i][-1]:\n                    taken[i].pop()\n                    chosen[i] = taken[i][-1]\n                    break\n\n            next_num = taken[k-1-i].popleft() + x\n            while chosen.get(k-1-i) is not None and chosen[k-1-i] <= next_num:\n                next_num += 1\n            chosen[k-1-i] = next_num\n\n        for j, num in enumerate(boxes[i][0]):\n            taken[i].append(num)\n\n    result = []\n    for i in range(k):\n        if chosen.get(i) is not None and chosen[i] >= boxes[i][0][0]:\n            result.append((chosen[i], i+1))\n        else:\n            index = boxes[k-1-i][0].index(max(boxes[k-1-i][0]))\n            result.append((boxes[k-1-i][0][index], i+1))\n\n    for val, idx in result:\n        print(val, idx)\n\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2144}
{"name": "2170", "description": "There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought $n$ carrots with lengths $a_1, a_2, a_3, \\ldots, a_n$. However, rabbits are very fertile and multiply very quickly. Zookeeper now has $k$ rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into $k$ pieces. For some reason, all resulting carrot lengths must be positive integers.\n\nBig carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size $x$ is $x^2$.\n\nHelp Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ $(1 \\leq n \\leq k \\leq 10^5)$: the initial number of carrots and the number of rabbits.\n\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$ $(1 \\leq a_i \\leq 10^6)$: lengths of carrots.\n\nIt is guaranteed that the sum of $a_i$ is at least $k$.\n\n\n-----Output-----\n\nOutput one integer: the minimum sum of time taken for rabbits to eat carrots.\n\n\n-----Examples-----\nInput\n3 6\n5 3 1\n\nOutput\n15\n\nInput\n1 4\n19\n\nOutput\n91\n\n\n\n-----Note-----\n\nFor the first test, the optimal sizes of carrots are $\\{1,1,1,2,2,2\\}$. The time taken is $1^2+1^2+1^2+2^2+2^2+2^2=15$\n\nFor the second test, the optimal sizes of carrots are $\\{4,5,5,5\\}$. The time taken is $4^2+5^2+5^2+5^2=91$.", "difficulty": "competition", "id": 2170, "sample_io": [{"input": "3 6\n5 3 1\n", "output": ["15\n"]}, {"input": "1 4\n19\n", "output": ["91\n"]}], "test_list": [{"input": "3 6\n5 3 1\n", "output": ["15\n"]}, {"input": "1 4\n19\n", "output": ["91\n"]}, {"input": "1 3\n1000000\n", "output": ["333333333334\n"]}, {"input": "1 1\n1\n", "output": ["1\n"]}, {"input": "10 23\n343 984 238 758983 231 74 231 548 893 543\n", "output": ["41149446942\n"]}, {"input": "20 40\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n", "output": ["40\n"]}, {"input": "29 99047\n206580 305496 61753 908376 272137 803885 675070 665109 995787 667887 164508 634877 994427 270698 931765 721679 518973 65009 804367 608526 535640 117656 342804 398273 369209 298745 365459 942772 89584\n", "output": ["2192719703\n"]}, {"input": "54 42164\n810471 434523 262846 930807 148016 633714 247313 376546 142288 30094 599543 829013 182512 647950 512266 827248 452285 531124 257259 453752 114536 833190 737596 267349 598567 781294 390500 318098 354290 725051 978831 905185 849542 761886 55532 608148 631077 557070 355245 929381 280340 620004 285066 42159 82460 348896 446782 672690 364747 339938 715721 870099 357424 323761\n", "output": ["17049737221\n"]}, {"input": "12 21223\n992192 397069 263753 561788 903539 521894 818097 223467 511651 737418 975119 528954\n", "output": ["2604648091\n"]}], "starter_code": "", "source_codes": ["\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if k - sum([x // y + (x % y != 0) for x in a]) < a[i]:\n            p = k - sum([x // y + (x % y != 0) for x in a[:i] + [a[i]]])\n            ans += a[i]**2 * p\n            break\n        else:\n            ans += a[i]**2 * (k - sum([x // y + (x % y != 0) for x in a]))\n    print(ans)\n\nmain()\n\n\n"], "responses": ["```python\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if k - sum([x // y + (x % y != 0) for x in a]) < a[i]:\n            p = k - sum([x // y + (x % y != 0) for x in a[:i] + [a[i]]])\n            ans += a[i]**2 * p\n            break\n        else:\n            ans += a[i]**2 * (k - sum([x // y + (x % y != 0) for x in a]))\n    print(ans)\n\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2170}
{"name": "2070", "description": "Karen has just arrived at school, and she has a math test today! [Image] \n\nThe test is about basic addition and subtraction. Unfortunately, the teachers were too busy writing tasks for Codeforces rounds, and had no time to make an actual test. So, they just put one question in the test that is worth all the points.\n\nThere are n integers written on a row. Karen must alternately add and subtract each pair of adjacent integers, and write down the sums or differences on the next row. She must repeat this process on the values on the next row, and so on, until only one integer remains. The first operation should be addition.\n\nNote that, if she ended the previous row by adding the integers, she should start the next row by subtracting, and vice versa.\n\nThe teachers will simply look at the last integer, and then if it is correct, Karen gets a perfect score, otherwise, she gets a zero for the test.\n\nKaren has studied well for this test, but she is scared that she might make a mistake somewhere and it will cause her final answer to be wrong. If the process is followed, what number can she expect to be written on the last row?\n\nSince this number can be quite large, output only the non-negative remainder after dividing it by 10^9 + 7.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 200000), the number of numbers written on the first row.\n\nThe next line contains n integers. Specifically, the i-th one among these is a_{i} (1 \u2264 a_{i} \u2264 10^9), the i-th number on the first row.\n\n\n-----Output-----\n\nOutput a single integer on a line by itself, the number on the final row after performing the process above.\n\nSince this number can be quite large, print only the non-negative remainder after dividing it by 10^9 + 7.\n\n\n-----Examples-----\nInput\n5\n3 6 9 12 15\n\nOutput\n36\n\nInput\n4\n3 7 5 2\n\nOutput\n1000000006\n\n\n\n-----Note-----\n\nIn the first test case, the numbers written on the first row are 3, 6, 9, 12 and 15.\n\nKaren performs the operations as follows: [Image] \n\nThe non-negative remainder after dividing the final number by 10^9 + 7 is still 36, so this is the correct output.\n\nIn the second test case, the numbers written on the first row are 3, 7, 5 and 2.\n\nKaren performs the operations as follows: [Image] \n\nThe non-negative remainder after dividing the final number by 10^9 + 7 is 10^9 + 6, so this is the correct output.", "difficulty": "competition", "id": 2070, "sample_io": [{"input": "5\n3 6 9 12 15\n", "output": ["36\n"]}, {"input": "4\n3 7 5 2\n", "output": ["1000000006\n"]}], "test_list": [{"input": "5\n3 6 9 12 15\n", "output": ["36\n"]}, {"input": "4\n3 7 5 2\n", "output": ["1000000006\n"]}, {"input": "1\n1\n", "output": ["1\n"]}, {"input": "16\n985629174 189232688 48695377 692426437 952164554 243460498 173956955 210310239 237322183 96515847 678847559 682240199 498792552 208770488 736004147 176573082\n", "output": ["347261016\n"]}, {"input": "18\n341796022 486073481 86513380 593942288 60606166 627385348 778725113 896678215 384223198 661124212 882144246 60135494 374392733 408166459 179944793 331468916 401182818 69503967\n", "output": ["773499683\n"]}, {"input": "17\n458679894 912524637 347508634 863280107 226481104 787939275 48953130 553494227 458256339 673787326 353107999 298575751 436592642 233596921 957974470 254020999 707869688\n", "output": ["769845668\n"]}, {"input": "19\n519879446 764655030 680293934 914539062 744988123 317088317 653721289 239862203 605157354 943428394 261437390 821695238 312192823 432992892 547139308 408916833 829654733 223751525 672158759\n", "output": ["265109293\n"]}, {"input": "1\n1000000000\n", "output": ["1000000000\n"]}, {"input": "3\n524125987 923264237 374288891\n", "output": ["996365563\n"]}, {"input": "4\n702209411 496813081 673102149 561219907\n", "output": ["317278572\n"]}, {"input": "5\n585325539 365329221 412106895 291882089 564718673\n", "output": ["974257995\n"]}, {"input": "6\n58376259 643910770 5887448 757703054 544067926 902981667\n", "output": ["676517605\n"]}, {"input": "7\n941492387 72235422 449924898 783332532 378192988 592684636 147499872\n", "output": ["328894634\n"]}, {"input": "2\n500000004 500000003\n", "output": ["0\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the number of integers on the first row\n    n = int(input())\n\n    # Take user input as a string representing the integers on the first row\n    arr = list(map(int, input().split()))\n\n    # Initialize variables to track the parity and result\n    par = 1\n    ans = sum(arr)\n\n    # Perform the operations based on the parity\n    for _ in range(n-1):\n        if par:\n            ans -= sum(arr[::2])\n        else:\n            ans += sum(arr[1::2])\n        par ^= 1\n\n    # Print the final result modulo 10^9 + 7\n    print((ans % (10**9 + 7)))\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the number of integers on the first row\n    n = int(input())\n\n    # Take user input as a string representing the integers on the first row\n    arr = list(map(int, input().split()))\n\n    # Initialize variables to track the parity and result\n    par = 1\n    ans = sum(arr)\n\n    # Perform the operations based on the parity\n    for _ in range(n-1):\n        if par:\n            ans -= sum(arr[::2])\n        else:\n            ans += sum(arr[1::2])\n        par ^= 1\n\n    # Print the final result modulo 10^9 + 7\n    print((ans % (10**9 + 7)))\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2070}
{"name": "2215", "description": "Jzzhu is the president of country A. There are n cities numbered from 1 to n in his country. City 1 is the capital of A. Also there are m roads connecting the cities. One can go from city u_{i} to v_{i} (and vise versa) using the i-th road, the length of this road is x_{i}. Finally, there are k train routes in the country. One can use the i-th train route to go from capital of the country to city s_{i} (and vise versa), the length of this route is y_{i}.\n\nJzzhu doesn't want to waste the money of the country, so he is going to close some of the train routes. Please tell Jzzhu the maximum number of the train routes which can be closed under the following condition: the length of the shortest path from every city to the capital mustn't change.\n\n\n-----Input-----\n\nThe first line contains three integers n, m, k (2 \u2264 n \u2264 10^5;\u00a01 \u2264 m \u2264 3\u00b710^5;\u00a01 \u2264 k \u2264 10^5).\n\nEach of the next m lines contains three integers u_{i}, v_{i}, x_{i} (1 \u2264 u_{i}, v_{i} \u2264 n;\u00a0u_{i} \u2260 v_{i};\u00a01 \u2264 x_{i} \u2264 10^9).\n\nEach of the next k lines contains two integers s_{i} and y_{i} (2 \u2264 s_{i} \u2264 n;\u00a01 \u2264 y_{i} \u2264 10^9).\n\nIt is guaranteed that there is at least one way from every city to the capital. Note, that there can be multiple roads between two cities. Also, there can be multiple routes going to the same city from the capital.\n\n\n-----Output-----\n\nOutput a single integer representing the maximum number of the train routes which can be closed.\n\n\n-----Examples-----\nInput\n5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n\nOutput\n2\n\nInput\n2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n\nOutput\n2", "difficulty": "competition", "id": 2215, "sample_io": [{"input": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n", "output": ["2\n"]}, {"input": "2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n", "output": ["2\n"]}], "test_list": [{"input": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n", "output": ["2\n"]}, {"input": "2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n", "output": ["2\n"]}, {"input": "5 4 3\n1 2 999999999\n2 3 1000000000\n3 4 529529529\n5 1 524524524\n5 524444444\n5 529999999\n2 1000000000\n", "output": ["2\n"]}, {"input": "3 2 5\n1 2 2\n2 3 4\n3 5\n3 5\n3 5\n3 6\n3 7\n", "output": ["4\n"]}, {"input": "5 5 3\n1 2 999999999\n2 3 1000000000\n3 4 529529529\n5 1 524524524\n5 3 1000000000\n5 524444444\n5 529999999\n2 1000000000\n", "output": ["2\n"]}, {"input": "2 1 5\n1 2 4\n2 3\n2 5\n2 4\n2 4\n2 5\n", "output": ["4\n"]}, {"input": "3 3 6\n1 2 499999999\n2 3 500000000\n1 3 999999999\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "output": ["6\n"]}, {"input": "2 1 1\n1 2 1\n2 1000000000\n", "output": ["1\n"]}, {"input": "3 2 2\n1 2 4\n2 3 4\n2 2\n3 6\n", "output": ["1\n"]}, {"input": "5 5 2\n1 2 100\n2 3 100\n3 4 100\n4 5 20\n2 5 5\n5 50\n4 1\n", "output": ["1\n"]}, {"input": "3 2 2\n1 2 100\n2 3 1\n2 1\n3 3\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\nimport sys, math, bisect, heapq\nfrom collections import Counter, defaultdict, deque\nfrom functools import lru_cache, reduce\nfrom itertools import accumulate, permutations, combinations\nfrom operator import add, mul, floordiv, mod\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10 ** 7)\n\ndef main():\n    n, m, k = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    dist = [math.inf] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]\n    while pq:\n        d, u = heapq.heappop(pq)\n\n        if dist[u] < d: continue\n        for v, w in adj[u]:\n            if dist[v] > d + w:\n                dist[v] = d + w\n                heapq.heappush(pq, (d + w, v))\n\n    train = [0]\n    for i in range(k):\n        s, y = map(int, input().split())\n        train.append(s)\n        dist[s] = min(dist[s], y)\n\n    ans = 0\n\n    for i in range(2, n + 1):\n        if dist[i] == math.inf:\n            print(k - 1)\n            return\n        elif dist[i] <= dist[train[ans]]:\n            ans += 1\n    print(k - (k - ans))\n    return\n\nmain()\n\n\n"], "responses": ["```python\nimport sys, math, bisect, heapq\nfrom collections import Counter, defaultdict, deque\nfrom functools import lru_cache, reduce\nfrom itertools import accumulate, permutations, combinations\nfrom operator import add, mul, floordiv, mod\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10 ** 7)\n\ndef main():\n    n, m, k = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    dist = [math.inf] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]\n    while pq:\n        d, u = heapq.heappop(pq)\n\n        if dist[u] < d: continue\n        for v, w in adj[u]:\n            if dist[v] > d + w:\n                dist[v] = d + w\n                heapq.heappush(pq, (d + w, v))\n\n    train = [0]\n    for i in range(k):\n        s, y = map(int, input().split())\n        train.append(s)\n        dist[s] = min(dist[s], y)\n\n    ans = 0\n\n    for i in range(2, n + 1):\n        if dist[i] == math.inf:\n            print(k - 1)\n            return\n        elif dist[i] <= dist[train[ans]]:\n            ans += 1\n    print(k - (k - ans))\n    return\n\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2215}
{"name": "2187", "description": "Jzzhu has picked n apples from his big apple tree. All the apples are numbered from 1 to n. Now he wants to sell them to an apple store. \n\nJzzhu will pack his apples into groups and then sell them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Of course, each apple can be part of at most one group.\n\nJzzhu wonders how to get the maximum possible number of groups. Can you help him?\n\n\n-----Input-----\n\nA single integer n (1 \u2264 n \u2264 10^5), the number of the apples.\n\n\n-----Output-----\n\nThe first line must contain a single integer m, representing the maximum number of groups he can get. Each of the next m lines must contain two integers \u2014 the numbers of apples in the current group.\n\nIf there are several optimal answers you can print any of them.\n\n\n-----Examples-----\nInput\n6\n\nOutput\n2\n6 3\n2 4\n\nInput\n9\n\nOutput\n3\n9 3\n2 4\n6 8\n\nInput\n2\n\nOutput\n0", "difficulty": "competition", "id": 2187, "sample_io": [{"input": "6\n", "output": ["2\n6 3\n2 4\n"]}, {"input": "9\n", "output": ["3\n9 3\n2 4\n6 8\n"]}, {"input": "2\n", "output": ["0\n"]}], "test_list": [{"input": "6\n", "output": ["2\n6 3\n2 4\n"]}, {"input": "9\n", "output": ["3\n9 3\n2 4\n6 8\n"]}, {"input": "2\n", "output": ["0\n"]}, {"input": "10\n", "output": ["4\n2 4\n6 8\n10 5\n9 3\n"]}, {"input": "100\n", "output": ["44\n33 27\n22 11\n25 5\n64 66\n42 44\n31 62\n58 29\n43 86\n15 21\n6 99\n8 12\n85 65\n7 49\n23 46\n16 14\n20 18\n90 92\n48 50\n40 36\n74 37\n35 55\n10 95\n56 60\n47 94\n45 39\n93 87\n88 84\n72 76\n28 24\n75 81\n78 80\n54 52\n38 19\n3 9\n32 30\n91 77\n70 68\n63 69\n2 4\n57 51\n82 41\n17 34\n13 26\n96 98\n"]}, {"input": "1\n", "output": ["0\n"]}, {"input": "3\n", "output": ["0\n"]}, {"input": "5\n", "output": ["1\n2 4\n"]}], "starter_code": "", "source_codes": ["\nfrom math import gcd\n\ndef main():\n    # Take user input as an integer representing the number of apples (n)\n    n = int(input())\n\n    # Step 1: Create a list 'pairs' to store pairs of numbers with GCD greater than 1\n    pairs = []\n\n    # Iterate over the range from 2 to n\n    for i in range(2, n + 1):\n        # Check if any number from 2 to sqrt(n) can be used as a divisor\n        for j in range(2, int(n ** 0.5) + 1):\n            if i % j == 0:\n                # Calculate the GCD of 'i' and its multiples\n                g = gcd(i, (n // i) * i)\n                # Step 2: Add pairs to the list where the GCD is greater than 1\n                for k in range((n // i) * i, n + 1, i):\n                    if gcd(k, i) == g:\n                        pairs.append((k, i))\n        # Check if any number from sqrt(n) to n can be used as a divisor\n        for j in range(int(n ** 0.5) + 1, i):\n            if i % j == 0:\n                # Calculate the GCD of 'i' and its multiples\n                g = gcd(i, (n // i) * i)\n                # Step 2: Add pairs to the list where the GCD is greater than 1\n                for k in range((n // i) * i, n + 1, i):\n                    if gcd(k, i) == g:\n                        pairs.append((k, i))\n\n    # Sort 'pairs' based on the smaller number of each pair\n    pairs.sort(key=lambda x: min(x[0], x[1]))\n\n    # Step 3: Create a set 'used' to store numbers that are already used in pairs\n    used = {i for _, i in pairs}\n\n    # Initialize variables to keep track of pairs and the answer\n    ans = len(pairs)\n    p = 0\n\n    # Iterate over all numbers from 1 to n\n    while p < n:\n        # Step 4: Check if 'p' can be used with any number not in 'used'\n        for i in range(2, min(n - p + 1, int((n - p) ** 0.5)) + 1):\n            if gcd(p, i) == 1 and (i not in used):\n                # Add the pair to the answer\n                ans += 1\n                used.add(i)\n                break\n\n        # Step 5: Increment 'p' by 1\n        p += 1\n\n    # Print the result\n    print(ans)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nfrom math import gcd\n\ndef main():\n    # Take user input as an integer representing the number of apples (n)\n    n = int(input())\n\n    # Step 1: Create a list 'pairs' to store pairs of numbers with GCD greater than 1\n    pairs = []\n\n    # Iterate over the range from 2 to n\n    for i in range(2, n + 1):\n        # Check if any number from 2 to sqrt(n) can be used as a divisor\n        for j in range(2, int(n ** 0.5) + 1):\n            if i % j == 0:\n                # Calculate the GCD of 'i' and its multiples\n                g = gcd(i, (n // i) * i)\n                # Step 2: Add pairs to the list where the GCD is greater than 1\n                for k in range((n // i) * i, n + 1, i):\n                    if gcd(k, i) == g:\n                        pairs.append((k, i))\n        # Check if any number from sqrt(n) to n can be used as a divisor\n        for j in range(int(n ** 0.5) + 1, i):\n            if i % j == 0:\n                # Calculate the GCD of 'i' and its multiples\n                g = gcd(i, (n // i) * i)\n                # Step 2: Add pairs to the list where the GCD is greater than 1\n                for k in range((n // i) * i, n + 1, i):\n                    if gcd(k, i) == g:\n                        pairs.append((k, i))\n\n    # Sort 'pairs' based on the smaller number of each pair\n    pairs.sort(key=lambda x: min(x[0], x[1]))\n\n    # Step 3: Create a set 'used' to store numbers that are already used in pairs\n    used = {i for _, i in pairs}\n\n    # Initialize variables to keep track of pairs and the answer\n    ans = len(pairs)\n    p = 0\n\n    # Iterate over all numbers from 1 to n\n    while p < n:\n        # Step 4: Check if 'p' can be used with any number not in 'used'\n        for i in range(2, min(n - p + 1, int((n - p) ** 0.5)) + 1):\n            if gcd(p, i) == 1 and (i not in used):\n                # Add the pair to the answer\n                ans += 1\n                used.add(i)\n                break\n\n        # Step 5: Increment 'p' by 1\n        p += 1\n\n    # Print the result\n    print(ans)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2187}
{"name": "2047", "description": "Allen dreams of one day owning a enormous fleet of electric cars, the car of the future! He knows that this will give him a big status boost. As Allen is planning out all of the different types of cars he will own and how he will arrange them, he realizes that he has a problem. \n\nAllen's future parking lot can be represented as a rectangle with $4$ rows and $n$ ($n \\le 50$) columns of rectangular spaces, each of which can contain at most one car at any time. He imagines having $k$ ($k \\le 2n$) cars in the grid, and all the cars are initially in the second and third rows. Each of the cars also has a different designated parking space in the first or fourth row. Allen has to put the cars into corresponding parking places.\n\n [Image] Illustration to the first example. \n\nHowever, since Allen would never entrust his cars to anyone else, only one car can be moved at a time. He can drive a car from a space in any of the four cardinal directions to a neighboring empty space. Furthermore, Allen can only move one of his cars into a space on the first or fourth rows if it is the car's designated parking space. \n\nAllen knows he will be a very busy man, and will only have time to move cars at most $20000$ times before he realizes that moving cars is not worth his time. Help Allen determine if he should bother parking his cars or leave it to someone less important.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers $n$ and $k$ ($1 \\le n \\le 50$, $1 \\le k \\le 2n$), representing the number of columns and the number of cars, respectively.\n\nThe next four lines will contain $n$ integers each between $0$ and $k$ inclusive, representing the initial state of the parking lot. The rows are numbered $1$ to $4$ from top to bottom and the columns are numbered $1$ to $n$ from left to right.\n\nIn the first and last line, an integer $1 \\le x \\le k$ represents a parking spot assigned to car $x$ (you can only move this car to this place), while the integer $0$ represents a empty space (you can't move any car to this place).\n\nIn the second and third line, an integer $1 \\le x \\le k$ represents initial position of car $x$, while the integer $0$ represents an empty space (you can move any car to this place).\n\nEach $x$ between $1$ and $k$ appears exactly once in the second and third line, and exactly once in the first and fourth line.\n\n\n-----Output-----\n\nIf there is a sequence of moves that brings all of the cars to their parking spaces, with at most $20000$ car moves, then print $m$, the number of moves, on the first line. On the following $m$ lines, print the moves (one move per line) in the format $i$ $r$ $c$, which corresponds to Allen moving car $i$ to the neighboring space at row $r$ and column $c$.\n\nIf it is not possible for Allen to move all the cars to the correct spaces with at most $20000$ car moves, print a single line with the integer $-1$.\n\n\n-----Examples-----\nInput\n4 5\n1 2 0 4\n1 2 0 4\n5 0 0 3\n0 5 0 3\n\nOutput\n6\n1 1 1\n2 1 2\n4 1 4\n3 4 4\n5 3 2\n5 4 2\n\nInput\n1 2\n1\n2\n1\n2\n\nOutput\n-1\n\nInput\n1 2\n1\n1\n2\n2\n\nOutput\n2\n1 1 1\n2 4 1\n\n\n\n-----Note-----\n\nIn the first sample test case, all cars are in front of their spots except car $5$, which is in front of the parking spot adjacent. The example shows the shortest possible sequence of moves, but any sequence of length at most $20000$ will be accepted.\n\nIn the second sample test case, there is only one column, and the cars are in the wrong order, so no cars can move and the task is impossible.", "difficulty": "competition", "id": 2047, "sample_io": [{"input": "4 5\n1 2 0 4\n1 2 0 4\n5 0 0 3\n0 5 0 3\n", "output": ["6\n1 1 1\n2 1 2\n4 1 4\n3 4 4\n5 3 2\n5 4 2\n"]}, {"input": "1 2\n1\n2\n1\n2\n", "output": ["-1\n"]}, {"input": "1 2\n1\n1\n2\n2\n", "output": ["2\n1 1 1\n2 4 1\n"]}], "test_list": [{"input": "4 5\n1 2 0 4\n1 2 0 4\n5 0 0 3\n0 5 0 3\n", "output": ["6\n1 1 1\n2 1 2\n4 1 4\n3 4 4\n5 3 2\n5 4 2\n"]}, {"input": "1 2\n1\n2\n1\n2\n", "output": ["-1\n"]}, {"input": "1 2\n1\n1\n2\n2\n", "output": ["2\n1 1 1\n2 4 1\n"]}, {"input": "2 2\n1 0\n0 2\n0 1\n0 2\n", "output": ["7\n2 2 1\n1 2 2\n2 3 1\n1 2 1\n2 3 2\n1 1 1\n2 4 2\n"]}, {"input": "7 14\n2 11 1 14 9 8 5\n12 6 7 1 10 2 3\n14 13 9 8 5 4 11\n13 6 4 3 12 7 10\n", "output": ["-1\n"]}, {"input": "2 1\n0 0\n0 0\n0 1\n0 1\n", "output": ["1\n1 4 2\n"]}, {"input": "2 3\n0 2\n0 1\n3 2\n3 1\n", "output": ["7\n1 2 1\n2 2 2\n3 4 1\n1 3 1\n2 1 2\n1 3 2\n1 4 2\n"]}, {"input": "1 1\n0\n1\n0\n1\n", "output": ["2\n1 3 1\n1 4 1\n"]}, {"input": "2 4\n3 4\n2 1\n3 4\n2 1\n", "output": ["-1\n"]}, {"input": "3 5\n2 1 5\n5 3 2\n4 0 1\n0 4 3\n", "output": ["18\n4 3 2\n5 3 1\n3 2 1\n2 2 2\n1 2 3\n4 4 2\n5 3 2\n3 3 1\n2 2 1\n1 2 2\n5 3 3\n3 3 2\n2 1 1\n1 1 2\n5 2 3\n3 3 3\n5 1 3\n3 4 3\n"]}, {"input": "10 1\n0 0 1 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n", "output": ["1\n1 1 3\n"]}, {"input": "50 1\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "output": ["34\n1 3 27\n1 3 28\n1 3 29\n1 3 30\n1 3 31\n1 3 32\n1 3 33\n1 3 34\n1 3 35\n1 3 36\n1 3 37\n1 3 38\n1 3 39\n1 3 40\n1 3 41\n1 3 42\n1 3 43\n1 3 44\n1 3 45\n1 3 46\n1 3 47\n1 3 48\n1 3 49\n1 3 50\n1 2 50\n1 2 49\n1 2 48\n1 2 47\n1 2 46\n1 2 45\n1 2 44\n1 2 43\n1 2 42\n1 1 42\n"]}, {"input": "22 2\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 2 0 0 0 0\n", "output": ["65\n2 2 13\n1 3 21\n2 2 12\n1 3 22\n2 2 11\n1 2 22\n2 2 10\n1 2 21\n2 2 9\n1 2 20\n2 2 8\n1 2 19\n2 2 7\n1 2 18\n2 2 6\n1 2 17\n2 2 5\n1 2 16\n2 2 4\n1 2 15\n2 2 3\n1 2 14\n2 2 2\n1 2 13\n2 2 1\n1 2 12\n2 3 1\n1 2 11\n2 3 2\n1 2 10\n2 3 3\n1 2 9\n2 3 4\n1 2 8\n2 3 5\n1 2 7\n2 3 6\n1 2 6\n2 3 7\n1 2 5\n2 3 8\n1 2 4\n2 3 9\n1 2 3\n2 3 10\n1 2 2\n2 3 11\n1 2 1\n2 3 12\n1 3 1\n2 3 13\n1 3 2\n2 3 14\n1 3 3\n2 3 15\n1 3 4\n2 3 16\n1 3 5\n2 3 17\n1 3 6\n2 3 18\n1 3 7\n2 4 18\n1 3 8\n1 4 8\n"]}, {"input": "12 3\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n2 0 0 0 0 3 0 0 0 1 0 0\n0 0 0 0 0 0 0 1 3 0 2 0\n", "output": ["38\n1 3 11\n3 3 7\n2 3 2\n1 3 12\n3 3 8\n2 3 3\n1 2 12\n3 3 9\n2 3 4\n1 2 11\n3 4 9\n2 3 5\n1 2 10\n2 3 6\n1 2 9\n2 3 7\n1 2 8\n2 3 8\n1 2 7\n2 3 9\n1 2 6\n2 3 10\n1 2 5\n2 3 11\n1 2 4\n2 4 11\n1 2 3\n1 2 2\n1 2 1\n1 3 1\n1 3 2\n1 3 3\n1 3 4\n1 3 5\n1 3 6\n1 3 7\n1 3 8\n1 4 8\n"]}, {"input": "10 20\n18 9 4 5 12 14 16 1 15 20\n11 13 16 6 18 5 20 17 4 3\n12 9 15 14 8 10 2 19 1 7\n6 11 13 2 7 19 10 3 8 17\n", "output": ["-1\n"]}, {"input": "15 30\n20 24 17 13 26 8 5 6 27 14 18 22 25 2 15\n4 12 6 25 3 5 28 11 15 21 9 26 7 17 13\n19 20 24 16 2 23 8 29 22 30 1 27 10 14 18\n9 29 3 7 12 28 10 16 23 19 21 1 30 11 4\n", "output": ["-1\n"]}], "starter_code": "", "source_codes": ["\ndef f():\n    n, k = map(int, input().split())\n    park1 = list(map(int, input().split()))\n    park2 = list(map(int, input().split()))\n    park3 = list(map(int, input().split()))\n    target = list(map(int, input().split()))\n\n    a = []\n    b = []\n    for i in range(n):\n        if 0 not in [park1[i], park2[i]]:\n            a.append([park1[i], park2[i]])\n            b.append(i)\n\n    ans = []\n    cars = {}\n    flag = True\n    for x, y in a:\n        cars[x] = y\n\n    for i in range(n):\n        if target[i] != 0:\n            if not flag:\n                return -1\n            for j in range(k + 1):\n                if j not in cars:\n                    ans.append([j, 3, i])\n                    cars[j] = i\n                    break\n\n    while len(ans) < 20000 and flag:\n        min_d = float('inf')\n        move = []\n        for x, y in a:\n            d = abs(cars[x] - y)\n            if d < min_d:\n                min_d = d\n                move = [(x, cars[x], d)]\n\n        for i, (u, v, w) in enumerate(move):\n            for j in range(1, 4):\n                if abs(v - j) == w:\n                    if target[i] != u:\n                        return -1\n                    ans.append([u, j, b[i]])\n                    del cars[u]\n                    break\n\n        for x, y in a:\n            if x not in cars and y != cars[x]:\n                min_d = 0\n                move = [(x, y, min_d)]\n                for u, v in move:\n                    if u == x and abs(cars[x] - v) < min_d:\n                        min_d = abs(cars[x] - v)\n                        move = [(u, v, min_d)]\n\n        flag = False\n        for i, (u, v) in enumerate(move):\n            for j in range(1, 4):\n                if target[i] != u and abs(v - j) == min_d:\n                    ans.append([u, j, b[i]])\n                    del cars[u]\n                    break\n\n    print(len(ans))\n    if len(ans):\n        for x, y, z in ans:\n            print(x, y + 1, z)\n\nf()\n\n\n"], "responses": ["```python\ndef f():\n    n, k = map(int, input().split())\n    park1 = list(map(int, input().split()))\n    park2 = list(map(int, input().split()))\n    park3 = list(map(int, input().split()))\n    target = list(map(int, input().split()))\n\n    a = []\n    b = []\n    for i in range(n):\n        if 0 not in [park1[i], park2[i]]:\n            a.append([park1[i], park2[i]])\n            b.append(i)\n\n    ans = []\n    cars = {}\n    flag = True\n    for x, y in a:\n        cars[x] = y\n\n    for i in range(n):\n        if target[i] != 0:\n            if not flag:\n                return -1\n            for j in range(k + 1):\n                if j not in cars:\n                    ans.append([j, 3, i])\n                    cars[j] = i\n                    break\n\n    while len(ans) < 20000 and flag:\n        min_d = float('inf')\n        move = []\n        for x, y in a:\n            d = abs(cars[x] - y)\n            if d < min_d:\n                min_d = d\n                move = [(x, cars[x], d)]\n\n        for i, (u, v, w) in enumerate(move):\n            for j in range(1, 4):\n                if abs(v - j) == w:\n                    if target[i] != u:\n                        return -1\n                    ans.append([u, j, b[i]])\n                    del cars[u]\n                    break\n\n        for x, y in a:\n            if x not in cars and y != cars[x]:\n                min_d = 0\n                move = [(x, y, min_d)]\n                for u, v in move:\n                    if u == x and abs(cars[x] - v) < min_d:\n                        min_d = abs(cars[x] - v)\n                        move = [(u, v, min_d)]\n\n        flag = False\n        for i, (u, v) in enumerate(move):\n            for j in range(1, 4):\n                if target[i] != u and abs(v - j) == min_d:\n                    ans.append([u, j, b[i]])\n                    del cars[u]\n                    break\n\n    print(len(ans))\n    if len(ans):\n        for x, y, z in ans:\n            print(x, y + 1, z)\n\nf()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2047}
{"name": "2026", "description": "Yaroslav is playing a game called \"Time\". The game has a timer showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character dies and the game ends. Also, the game has n clock stations, station number i is at point (x_{i}, y_{i}) of the plane. As the player visits station number i, he increases the current time on his timer by a_{i}. The stations are for one-time use only, so if the player visits some station another time, the time on his timer won't grow.\n\nA player spends d\u00b7dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as |x_{i} - x_{j}| + |y_{i} - y_{j}|.\n\nInitially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit (you can buy only integer number of time units).\n\nNow Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.\n\n\n-----Input-----\n\nThe first line contains integers n and d (3 \u2264 n \u2264 100, 10^3 \u2264 d \u2264 10^5) \u2014 the number of stations and the constant from the statement.\n\nThe second line contains n - 2 integers: a_2, a_3, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^3). The next n lines contain the coordinates of the stations. The i-th of them contains two integers x_{i}, y_{i} (-100 \u2264 x_{i}, y_{i} \u2264 100).\n\nIt is guaranteed that no two stations are located at the same point.\n\n\n-----Output-----\n\nIn a single line print an integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n3 1000\n1000\n0 0\n0 1\n0 3\n\nOutput\n2000\n\nInput\n3 1000\n1000\n1 0\n1 1\n1 2\n\nOutput\n1000", "difficulty": "competition", "id": 2026, "sample_io": [{"input": "3 1000\n1000\n0 0\n0 1\n0 3\n", "output": ["2000\n"]}, {"input": "3 1000\n1000\n1 0\n1 1\n1 2\n", "output": ["1000\n"]}], "test_list": [{"input": "3 1000\n1000\n0 0\n0 1\n0 3\n", "output": ["2000\n"]}, {"input": "3 1000\n1000\n1 0\n1 1\n1 2\n", "output": ["1000\n"]}, {"input": "5 1421\n896 448 727\n-19 -40\n-87 40\n69 51\n-55 61\n-7 67\n", "output": ["169099\n"]}, {"input": "6 1000\n142 712 254 869\n7 0\n95 38\n96 -20\n-7 93\n75 -45\n-80 -20\n", "output": ["107000\n"]}, {"input": "7 1288\n943 265 649 447 806\n-4 -51\n-26 32\n47 -28\n31 32\n61 65\n-45 -37\n82 42\n", "output": ["229903\n"]}, {"input": "8 1931\n440 627 324 538 539 119\n-85 -41\n-91 61\n-84 11\n92 -19\n8 -5\n16 -25\n97 -98\n91 78\n", "output": ["569018\n"]}, {"input": "9 1829\n98 513 987 291 162 637 356\n38 -3\n-89 93\n-86 45\n-43 -84\n-3 -87\n53 -59\n18 -19\n81 -74\n-85 32\n", "output": ["288982\n"]}, {"input": "10 1000\n759 222 589 423 947 507 31 414\n-4 -71\n-31 -53\n24 28\n-13 -65\n-59 -49\n-42 -79\n85 -71\n-60 -17\n28 66\n74 2\n", "output": ["151000\n"]}, {"input": "11 1199\n282 735 54 1000 419 939 901 789 128\n10 -81\n26 72\n19 -91\n-61 85\n0 -33\n-62 79\n-59 65\n-2 -77\n-63 100\n-15 53\n94 54\n", "output": ["262581\n"]}, {"input": "12 1609\n196 486 94 344 524 588 315 504 449 201\n86 -22\n-2 25\n-95 -8\n-5 -30\n-78 71\n5 -54\n-69 -92\n-41 0\n10 19\n61 17\n75 -39\n-46 22\n", "output": ["282231\n"]}, {"input": "3 97325\n40\n43 43\n45 -95\n-93 63\n", "output": ["15182700\n"]}, {"input": "11 1615\n137 681 199 33 388 585 241 518 7\n-60 89\n24 6\n-100 -55\n-26 -90\n-40 -33\n-100 28\n12 34\n-60 -13\n38 -89\n62 81\n-35 54\n", "output": ["96900\n"]}, {"input": "4 62071\n706 480\n6 96\n51 -12\n99 66\n-69 -61\n", "output": ["14400472\n"]}, {"input": "12 1542\n389 356 290 648 182 94 585 988 762 494\n-46 96\n1 88\n0 95\n-91 -100\n-42 -29\n45 -27\n-52 -34\n-62 27\n-19 46\n-100 95\n5 -55\n-36 -65\n", "output": ["263034\n"]}, {"input": "3 100000\n1\n-100 -100\n-100 -99\n100 100\n", "output": ["39999999\n"]}, {"input": "12 1211\n1 5 7 1000 1000 1000 1000 1000 1000 1000\n1 1\n5 5\n3 4\n4 3\n0 1\n0 2\n0 5\n0 7\n1 0\n3 0\n8 0\n10 10\n", "output": ["20220\n"]}, {"input": "6 1000\n1000 1000 1000 1000\n0 0\n0 -1\n1 -1\n2 -1\n2 0\n2 1\n", "output": ["1000\n"]}], "starter_code": "", "source_codes": ["\nimport sys\n\ndef main():\n    # Read input from standard input\n    input = sys.stdin.readline\n\n    # Read number of stations and constant d\n    n, d = map(int, input().split())\n\n    # Initialize distance array with initial value of infinity for all stations except the first one\n    dist = [float('inf')] * (n + 1)\n    dist[1] = 0\n\n    # Read coordinates and times to reach each station from standard input\n    x_coords = [0] * (n + 1)\n    y_coords = [0] * (n + 1)\n    for i in range(1, n + 1):\n        x_coords[i], y_coords[i] = map(int, input().split())\n        if i < n:\n            a_i = int(input())\n\n    # Iterate over all stations to calculate the minimum time required to reach each station\n    for i in range(2, n + 1):\n        for j in range(i - 1, 0, -1):\n            dist[i] = min(dist[i], dist[j] + d * abs(x_coords[i] - x_coords[j]) + d * abs(y_coords[i] - y_coords[j]))\n\n    # Print the minimum time required to reach the last station\n    print(max(1, dist[n] + a_0))\n\n# Call the main function with input from standard input\nmain()\n\n\n"], "responses": ["```python\nimport sys\n\ndef main():\n    # Read input from standard input\n    input = sys.stdin.readline\n\n    # Read number of stations and constant d\n    n, d = map(int, input().split())\n\n    # Initialize distance array with initial value of infinity for all stations except the first one\n    dist = [float('inf')] * (n + 1)\n    dist[1] = 0\n\n    # Read coordinates and times to reach each station from standard input\n    x_coords = [0] * (n + 1)\n    y_coords = [0] * (n + 1)\n    for i in range(1, n + 1):\n        x_coords[i], y_coords[i] = map(int, input().split())\n        if i < n:\n            a_i = int(input())\n\n    # Iterate over all stations to calculate the minimum time required to reach each station\n    for i in range(2, n + 1):\n        for j in range(i - 1, 0, -1):\n            dist[i] = min(dist[i], dist[j] + d * abs(x_coords[i] - x_coords[j]) + d * abs(y_coords[i] - y_coords[j]))\n\n    # Print the minimum time required to reach the last station\n    print(max(1, dist[n] + a_0))\n\n# Call the main function with input from standard input\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2026}
{"name": "2146", "description": "Have you ever used the chat application QQ? Well, in a chat group of QQ, administrators can muzzle a user for days.\n\nIn Boboniu's chat group, there's a person called Du Yi who likes to make fun of Boboniu every day.\n\nDu will chat in the group for $n$ days. On the $i$-th day:  If Du can speak, he'll make fun of Boboniu with fun factor $a_i$. But after that, he may be muzzled depending on Boboniu's mood.  Otherwise, Du won't do anything. \n\nBoboniu's mood is a constant $m$. On the $i$-th day:  If Du can speak and $a_i>m$, then Boboniu will be angry and muzzle him for $d$ days, which means that Du won't be able to speak on the $i+1, i+2, \\cdots, \\min(i+d,n)$-th days.  Otherwise, Boboniu won't do anything. \n\nThe total fun factor is the sum of the fun factors on the days when Du can speak.\n\nDu asked you to find the maximum total fun factor among all possible permutations of $a$.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $d$ and $m$ ($1\\le d\\le n\\le 10^5,0\\le m\\le 10^9$).\n\nThe next line contains $n$ integers $a_1, a_2, \\ldots,a_n$ ($0\\le a_i\\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: the maximum total fun factor among all permutations of $a$.\n\n\n-----Examples-----\nInput\n5 2 11\n8 10 15 23 5\n\nOutput\n48\n\nInput\n20 2 16\n20 5 8 2 18 16 2 16 16 1 5 16 2 13 6 16 4 17 21 7\n\nOutput\n195\n\n\n\n-----Note-----\n\nIn the first example, you can set $a'=[15, 5, 8, 10, 23]$. Then Du's chatting record will be:  Make fun of Boboniu with fun factor $15$.  Be muzzled.  Be muzzled.  Make fun of Boboniu with fun factor $10$.  Make fun of Boboniu with fun factor $23$. \n\nThus the total fun factor is $48$.", "difficulty": "competition", "id": 2146, "sample_io": [{"input": "5 2 11\n8 10 15 23 5\n", "output": ["48\n"]}, {"input": "20 2 16\n20 5 8 2 18 16 2 16 16 1 5 16 2 13 6 16 4 17 21 7\n", "output": ["195\n"]}], "test_list": [{"input": "5 2 11\n8 10 15 23 5\n", "output": ["48\n"]}, {"input": "20 2 16\n20 5 8 2 18 16 2 16 16 1 5 16 2 13 6 16 4 17 21 7\n", "output": ["195\n"]}, {"input": "1 1 0\n0\n", "output": ["0\n"]}, {"input": "100 61 71\n11 18 0 47 33 75 91 13 8 21 73 64 50 97 62 50 2 36 68 32 64 74 32 77 81 41 23 44 40 36 45 33 21 68 57 79 75 23 67 37 99 27 30 56 75 62 75 63 46 19 79 42 11 66 21 25 2 12 89 48 75 7 57 85 80 14 82 29 66 47 29 10 1 84 79 39 33 81 73 51 80 67 52 25 38 68 57 53 38 83 83 3 86 29 50 46 3 68 88 10\n", "output": ["2765\n"]}, {"input": "10 3 10\n17 17 17 8 7 6 5 4 1 1\n", "output": ["64\n"]}, {"input": "79 14 68\n55 91 81 39 60 85 43 53 41 12 23 70 26 61 51 92 52 23 78 41 20 49 38 57 86 77 59 74 86 12 8 79 32 70 69 43 78 37 88 71 22 0 21 21 30 3 76 87 98 52 83 66 79 60 56 31 19 89 73 81 79 16 76 79 94 23 65 7 53 81 21 63 11 31 35 17 31 65 89\n", "output": ["2038\n"]}, {"input": "39 37 39\n38 56 198 166 86 51 13 54 101 143 82 138 122 146 86 198 81 177 92 56 107 58 124 82 41 126 79 47 191 41 188 108 38 12 18 57 68 134 79\n", "output": ["396\n"]}, {"input": "4 4 8\n84 25 75 21\n", "output": ["84\n"]}, {"input": "5 3 3\n8 5 5 1 14\n", "output": ["22\n"]}, {"input": "1 1 1\n2\n", "output": ["2\n"]}], "starter_code": "", "source_codes": ["\nimport heapq\n\ndef main():\n    # Take user input as a string representing the number of days, muzzle days, and mood threshold in Boboniu's chat group\n    n, d, m = map(int, input().split())\n\n    # Take user input as a string representing Du's fun factors on each day\n    a = list(map(int, input().split()))\n\n    # Initialize a max heap to store the daily fun factors\n    pq = []\n\n    # Iterate over the days in reverse order (from last day to first day)\n    for i in range(n-1, -1, -1):\n        # If Du's fun factor on this day is greater than Boboniu's mood threshold and there are still days left after muzzling\n        if a[i] > m and n - i - 1 >= d:\n            # Push the fun factor into the max heap (max heap can be used to implement priority queue with O(log N) time complexity)\n            heapq.heappush(pq, a[i])\n            # Update n to account for muzzling\n            n -= d + 1\n\n    # Initialize a list to store the daily fun factors in sorted order\n    res = []\n\n    # While there are still days left and elements in the max heap\n    while pq and n:\n        # Pop an element from the max heap with maximum value (largest fun factor)\n        x = heapq.heappop(pq)\n        # Add it to the result list\n        res.append(x)\n        # Decrement n by 1\n        n -= 1\n\n    # Sort the daily fun factors in descending order\n    res.sort(reverse=True)\n\n    # Initialize a variable to store the total fun factor\n    ans = sum(res[:n])\n\n    print(ans)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport heapq\n\ndef main():\n    # Take user input as a string representing the number of days, muzzle days, and mood threshold in Boboniu's chat group\n    n, d, m = map(int, input().split())\n\n    # Take user input as a string representing Du's fun factors on each day\n    a = list(map(int, input().split()))\n\n    # Initialize a max heap to store the daily fun factors\n    pq = []\n\n    # Iterate over the days in reverse order (from last day to first day)\n    for i in range(n-1, -1, -1):\n        # If Du's fun factor on this day is greater than Boboniu's mood threshold and there are still days left after muzzling\n        if a[i] > m and n - i - 1 >= d:\n            # Push the fun factor into the max heap (max heap can be used to implement priority queue with O(log N) time complexity)\n            heapq.heappush(pq, a[i])\n            # Update n to account for muzzling\n            n -= d + 1\n\n    # Initialize a list to store the daily fun factors in sorted order\n    res = []\n\n    # While there are still days left and elements in the max heap\n    while pq and n:\n        # Pop an element from the max heap with maximum value (largest fun factor)\n        x = heapq.heappop(pq)\n        # Add it to the result list\n        res.append(x)\n        # Decrement n by 1\n        n -= 1\n\n    # Sort the daily fun factors in descending order\n    res.sort(reverse=True)\n\n    # Initialize a variable to store the total fun factor\n    ans = sum(res[:n])\n\n    print(ans)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2146}
{"name": "2159", "description": "Polycarp is making a quest for his friends. He has already made n tasks, for each task the boy evaluated how interesting it is as an integer q_{i}, and the time t_{i} in minutes needed to complete the task. \n\nAn interesting feature of his quest is: each participant should get the task that is best suited for him, depending on his preferences. The task is chosen based on an interactive quiz that consists of some questions. The player should answer these questions with \"yes\" or \"no\". Depending on the answer to the question, the participant either moves to another question or goes to one of the tasks that are in the quest. In other words, the quest is a binary tree, its nodes contain questions and its leaves contain tasks. \n\nWe know that answering any of the questions that are asked before getting a task takes exactly one minute from the quest player. Polycarp knows that his friends are busy people and they can't participate in the quest for more than T minutes. Polycarp wants to choose some of the n tasks he made, invent the corresponding set of questions for them and use them to form an interactive quiz as a binary tree so that no matter how the player answers quiz questions, he spends at most T minutes on completing the whole quest (that is, answering all the questions and completing the task). Specifically, the quest can contain zero questions and go straight to the task. Each task can only be used once (i.e., the people who give different answers to questions should get different tasks).\n\nPolycarp wants the total \"interest\" value of the tasks involved in the quest to be as large as possible. Help him determine the maximum possible total interest value of the task considering that the quest should be completed in T minutes at any variant of answering questions.\n\n\n-----Input-----\n\nThe first line contains two integers n and T (1 \u2264 n \u2264 1000, 1 \u2264 T \u2264 100) \u2014 the number of tasks made by Polycarp and the maximum time a quest player should fit into.\n\nNext n lines contain two integers t_{i}, q_{i} (1 \u2264 t_{i} \u2264 T, 1 \u2264 q_{i} \u2264 1000) each \u2014 the time in minutes needed to complete the i-th task and its interest value.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum possible total interest value of all the tasks in the quest.\n\n\n-----Examples-----\nInput\n5 5\n1 1\n1 1\n2 2\n3 3\n4 4\n\nOutput\n11\n\nInput\n5 5\n4 1\n4 2\n4 3\n4 4\n4 5\n\nOutput\n9\n\nInput\n2 2\n1 1\n2 10\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first sample test all the five tasks can be complemented with four questions and joined into one quest.\n\nIn the second sample test it is impossible to use all the five tasks, but you can take two of them, the most interesting ones.\n\nIn the third sample test the optimal strategy is to include only the second task into the quest.\n\nHere is the picture that illustrates the answers to the sample tests. The blue circles represent the questions, the two arrows that go from every circle represent where a person goes depending on his answer to that question. The tasks are the red ovals. [Image]", "difficulty": "competition", "id": 2159, "sample_io": [{"input": "5 5\n1 1\n1 1\n2 2\n3 3\n4 4\n", "output": ["11\n"]}, {"input": "5 5\n4 1\n4 2\n4 3\n4 4\n4 5\n", "output": ["9\n"]}, {"input": "2 2\n1 1\n2 10\n", "output": ["10\n"]}], "test_list": [{"input": "5 5\n1 1\n1 1\n2 2\n3 3\n4 4\n", "output": ["11\n"]}, {"input": "5 5\n4 1\n4 2\n4 3\n4 4\n4 5\n", "output": ["9\n"]}, {"input": "2 2\n1 1\n2 10\n", "output": ["10\n"]}, {"input": "10 1\n1 732\n1 649\n1 821\n1 756\n1 377\n1 216\n1 733\n1 420\n1 857\n1 193\n", "output": ["857\n"]}, {"input": "26 5\n2 377\n3 103\n1 547\n2 700\n3 616\n5 363\n2 316\n5 260\n3 385\n2 460\n4 206\n4 201\n3 236\n1 207\n1 400\n2 382\n2 365\n1 633\n1 775\n4 880\n1 808\n1 871\n3 518\n1 805\n3 771\n3 598\n", "output": ["6977\n"]}, {"input": "42 4\n1 897\n2 883\n1 766\n1 169\n3 671\n3 751\n2 204\n2 550\n3 873\n2 348\n2 286\n1 413\n1 551\n4 821\n2 573\n1 423\n4 59\n3 881\n2 450\n1 206\n3 181\n3 218\n3 870\n2 906\n1 695\n1 162\n3 370\n3 580\n2 874\n2 864\n3 47\n3 126\n2 494\n4 21\n3 791\n4 520\n4 917\n2 244\n4 74\n3 348\n4 416\n3 581\n", "output": ["4698\n"]}, {"input": "70 4\n1 83\n3 923\n2 627\n4 765\n3 74\n4 797\n4 459\n2 682\n1 840\n2 414\n4 797\n3 832\n3 203\n2 939\n4 694\n1 157\n3 544\n1 169\n3 100\n4 69\n1 851\n3 605\n4 562\n1 718\n3 74\n3 740\n2 655\n2 804\n2 218\n4 186\n4 999\n3 989\n2 407\n4 702\n2 15\n1 509\n4 376\n4 260\n1 533\n2 514\n3 520\n4 737\n2 877\n2 383\n1 556\n3 745\n2 659\n2 636\n2 443\n4 819\n2 382\n4 660\n1 376\n2 410\n3 379\n4 996\n3 944\n4 949\n2 485\n3 434\n3 786\n3 367\n4 403\n3 330\n3 625\n2 302\n3 673\n3 794\n3 411\n1 256\n", "output": ["4946\n"]}, {"input": "17 1\n1 632\n1 996\n1 665\n1 432\n1 565\n1 350\n1 857\n1 183\n1 982\n1 910\n1 938\n1 155\n1 176\n1 168\n1 419\n1 814\n1 487\n", "output": ["996\n"]}, {"input": "10 9\n1 518\n3 971\n5 862\n2 71\n8 138\n4 121\n6 967\n1 518\n9 754\n7 607\n", "output": ["4773\n"]}, {"input": "1 2\n1 1\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\nfrom functools import cmp_to_key\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n, T = map(int, input().split())\n\n    tasks = []\n    for _ in range(n):\n        t, q = map(int, input().split())\n        tasks.append((t, q))\n\n    tasks.sort(key=lambda x: (x[0], -x[1]))\n\n    max_interest = 0\n    i = n - 1\n\n    while i >= 0:\n        time = T\n        interest = 0\n        j = i\n\n        while j >= 0 and time > 0:\n            if tasks[j][0] <= time:\n                time -= tasks[j][0]\n                interest += tasks[j][1]\n            else:\n                break\n            j -= 1\n\n        max_interest = max(max_interest, interest)\n\n        i -= 1\n\n    print(max_interest)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nfrom functools import cmp_to_key\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n, T = map(int, input().split())\n\n    tasks = []\n    for _ in range(n):\n        t, q = map(int, input().split())\n        tasks.append((t, q))\n\n    tasks.sort(key=lambda x: (x[0], -x[1]))\n\n    max_interest = 0\n    i = n - 1\n\n    while i >= 0:\n        time = T\n        interest = 0\n        j = i\n\n        while j >= 0 and time > 0:\n            if tasks[j][0] <= time:\n                time -= tasks[j][0]\n                interest += tasks[j][1]\n            else:\n                break\n            j -= 1\n\n        max_interest = max(max_interest, interest)\n\n        i -= 1\n\n    print(max_interest)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2159}
{"name": "2009", "description": "For a vector $\\vec{v} = (x, y)$, define $|v| = \\sqrt{x^2 + y^2}$.\n\nAllen had a bit too much to drink at the bar, which is at the origin. There are $n$ vectors $\\vec{v_1}, \\vec{v_2}, \\cdots, \\vec{v_n}$. Allen will make $n$ moves. As Allen's sense of direction is impaired, during the $i$-th move he will either move in the direction $\\vec{v_i}$ or $-\\vec{v_i}$. In other words, if his position is currently $p = (x, y)$, he will either move to $p + \\vec{v_i}$ or $p - \\vec{v_i}$.\n\nAllen doesn't want to wander too far from home (which happens to also be the bar). You need to help him figure out a sequence of moves (a sequence of signs for the vectors) such that his final position $p$ satisfies $|p| \\le 1.5 \\cdot 10^6$ so that he can stay safe.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of moves.\n\nEach of the following lines contains two space-separated integers $x_i$ and $y_i$, meaning that $\\vec{v_i} = (x_i, y_i)$. We have that $|v_i| \\le 10^6$ for all $i$.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers $c_1, c_2, \\cdots, c_n$, each of which is either $1$ or $-1$. Your solution is correct if the value of $p = \\sum_{i = 1}^n c_i \\vec{v_i}$, satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\nIt can be shown that a solution always exists under the given constraints.\n\n\n-----Examples-----\nInput\n3\n999999 0\n0 999999\n999999 0\n\nOutput\n1 1 -1 \n\nInput\n1\n-824590 246031\n\nOutput\n1 \n\nInput\n8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n\nOutput\n1 1 1 1 1 1 1 -1", "difficulty": "competition", "id": 2009, "sample_io": [{"input": "3\n999999 0\n0 999999\n999999 0\n", "output": ["1 1 -1 \n"]}, {"input": "1\n-824590 246031\n", "output": ["1 \n"]}, {"input": "8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n", "output": ["1 1 1 1 1 1 1 -1 \n"]}], "test_list": [{"input": "3\n999999 0\n0 999999\n999999 0\n", "output": ["1 1 -1 \n"]}, {"input": "1\n-824590 246031\n", "output": ["1 \n"]}, {"input": "8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n", "output": ["1 1 1 1 1 1 1 -1 \n"]}, {"input": "6\n1000000 0\n1000000 0\n-1000000 0\n0 1000000\n0 -1000000\n0 -1000000\n", "output": ["1 1 1 1 1 1 \n"]}, {"input": "8\n-411248 143802\n300365 629658\n363219 343742\n396148 -94037\n-722124 467785\n-178147 -931253\n265458 73307\n-621502 -709713\n", "output": ["1 1 1 1 1 1 1 -1 \n"]}, {"input": "3\n1000000 0\n0 999999\n600000 -600000\n", "output": ["-1 1 1 \n"]}, {"input": "5\n140239 46311\n399464 -289055\n-540174 823360\n538102 -373313\n326189 933934\n", "output": ["1 1 1 1 -1 \n"]}, {"input": "3\n1000000 0\n0 999999\n300000 -300000\n", "output": ["1 1 -1 \n"]}, {"input": "9\n1000000 0\n0 -999999\n600000 600000\n600000 600000\n600000 600000\n-600000 -600000\n600000 600000\n600000 600000\n-700000 710000\n", "output": ["1 1 1 -1 1 1 1 -1 1 \n"]}, {"input": "2\n1 999999\n1 -999999\n", "output": ["1 1 \n"]}, {"input": "2\n999999 1\n999999 -1\n", "output": ["1 -1 \n"]}, {"input": "2\n-1 999999\n-1 -999999\n", "output": ["1 1 \n"]}, {"input": "2\n-999999 -1\n-999999 1\n", "output": ["1 -1 \n"]}, {"input": "2\n999999 1\n-999999 1\n", "output": ["1 1 \n"]}, {"input": "2\n999999 -1\n-999999 -1\n", "output": ["1 1 \n"]}, {"input": "2\n1 999999\n-1 999999\n", "output": ["1 -1 \n"]}, {"input": "2\n1 -999999\n-1 -999999\n", "output": ["1 -1 \n"]}, {"input": "4\n1000000 0\n-1 999999\n600000 -600000\n0 0\n", "output": ["-1 1 1 1 \n"]}, {"input": "2\n999999 -1\n-1 999999\n", "output": ["1 1 \n"]}], "starter_code": "", "source_codes": ["\nfrom math import sqrt, floor\nimport sys\n\nmod = 10**9 + 7; MOD = 998244353; inf = float('inf'); ninf = -float('inf')\ndef gcd(x, y):\n    if x > y: return gcd(y, x)\n    if not x and not y: return 0\n    if not y: return x\n    k = floor(y / x); return gcd(x, y - k * x)\n\ndef lcm(a, b): return a / gcd(a, b) * b\n\ndef solve():\n    n = int(input())\n    v = []\n    for _ in range(n):\n        x, y = map(int, input().split()); v.append((x, y))\n    ans = []\n    s = 0\n    for i in range(n):\n        p = sqrt(v[i][0]**2 + v[i][1]**2)\n        if abs(s + v[i][0]) <= 1.5 * (10**6): ans.append(1); s += v[i][0]\n        elif abs(s - v[i][0]) <= 1.5 * (10**6): ans.append(-1); s -= v[i][0]\n    print(*ans)\n\ndef main():\n    T = 1\n    for _ in range(T):\n        solve()\n\nif __name__ == '__main__':\n    input = sys.stdin.readline; main()\n\n\n"], "responses": ["```python\nfrom math import sqrt, floor\nimport sys\n\nmod = 10**9 + 7; MOD = 998244353; inf = float('inf'); ninf = -float('inf')\ndef gcd(x, y):\n    if x > y: return gcd(y, x)\n    if not x and not y: return 0\n    if not y: return x\n    k = floor(y / x); return gcd(x, y - k * x)\n\ndef lcm(a, b): return a / gcd(a, b) * b\n\ndef solve():\n    n = int(input())\n    v = []\n    for _ in range(n):\n        x, y = map(int, input().split()); v.append((x, y))\n    ans = []\n    s = 0\n    for i in range(n):\n        p = sqrt(v[i][0]**2 + v[i][1]**2)\n        if abs(s + v[i][0]) <= 1.5 * (10**6): ans.append(1); s += v[i][0]\n        elif abs(s - v[i][0]) <= 1.5 * (10**6): ans.append(-1); s -= v[i][0]\n    print(*ans)\n\ndef main():\n    T = 1\n    for _ in range(T):\n        solve()\n\nif __name__ == '__main__':\n    input = sys.stdin.readline; main()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2009}
{"name": "2066", "description": "In the official contest this problem has a different statement, for which jury's solution was working incorrectly, and for this reason it was excluded from the contest. This mistake have been fixed and the current given problem statement and model solution corresponds to what jury wanted it to be during the contest.\n\nVova and Lesha are friends. They often meet at Vova's place and compete against each other in a computer game named The Ancient Papyri: Swordsink. Vova always chooses a warrior as his fighter and Leshac chooses an archer. After that they should choose initial positions for their characters and start the fight. A warrior is good at melee combat, so Vova will try to make the distance between fighters as small as possible. An archer prefers to keep the enemy at a distance, so Lesha will try to make the initial distance as large as possible.\n\nThere are n (n is always even) possible starting positions for characters marked along the Ox axis. The positions are given by their distinct coordinates x_1, x_2, ..., x_{n}, two characters cannot end up at the same position.\n\nVova and Lesha take turns banning available positions, Vova moves first. During each turn one of the guys bans exactly one of the remaining positions. Banned positions cannot be used by both Vova and Lesha. They continue to make moves until there are only two possible positions remaining (thus, the total number of moves will be n - 2). After that Vova's character takes the position with the lesser coordinate and Lesha's character takes the position with the bigger coordinate and the guys start fighting.\n\nVova and Lesha are already tired by the game of choosing positions, as they need to play it before every fight, so they asked you (the developer of the The Ancient Papyri: Swordsink) to write a module that would automatically determine the distance at which the warrior and the archer will start fighting if both Vova and Lesha play optimally.\n\n\n-----Input-----\n\nThe first line on the input contains a single integer n (2 \u2264 n \u2264 200 000, n is even)\u00a0\u2014 the number of positions available initially. The second line contains n distinct integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} \u2264 10^9), giving the coordinates of the corresponding positions.\n\n\n-----Output-----\n\nPrint the distance between the warrior and the archer at the beginning of the fight, provided that both Vova and Lesha play optimally.\n\n\n-----Examples-----\nInput\n6\n0 1 3 7 15 31\n\nOutput\n7\n\nInput\n2\n73 37\n\nOutput\n36\n\n\n\n-----Note-----\n\nIn the first sample one of the optimum behavior of the players looks like that:  Vova bans the position at coordinate 15;  Lesha bans the position at coordinate 3;  Vova bans the position at coordinate 31;  Lesha bans the position at coordinate 1. \n\nAfter these actions only positions 0 and 7 will remain, and the distance between them is equal to 7.\n\nIn the second sample there are only two possible positions, so there will be no bans.", "difficulty": "competition", "id": 2066, "sample_io": [{"input": "6\n0 1 3 7 15 31\n", "output": ["7\n"]}, {"input": "2\n73 37\n", "output": ["36\n"]}], "test_list": [{"input": "6\n0 1 3 7 15 31\n", "output": ["7\n"]}, {"input": "2\n73 37\n", "output": ["36\n"]}, {"input": "2\n0 1000000000\n", "output": ["1000000000\n"]}, {"input": "8\n729541013 135019377 88372488 319157478 682081360 558614617 258129110 790518782\n", "output": ["470242129\n"]}, {"input": "2\n0 1\n", "output": ["1\n"]}, {"input": "8\n552283832 997699491 89302459 301640204 288141798 31112026 710831619 862166501\n", "output": ["521171806\n"]}, {"input": "4\n0 500000000 500000001 1000000000\n", "output": ["500000000\n"]}, {"input": "18\n515925896 832652240 279975694 570998878 28122427 209724246 898414431 709461320 358922485 439508829 403574907 358500312 596248410 968234748 187793884 728450713 30350176 528924900\n", "output": ["369950401\n"]}, {"input": "20\n713900269 192811911 592111899 609607891 585084800 601258511 223103775 876894656 751583891 230837577 971499807 312977833 344314550 397998873 558637732 216574673 913028292 762852863 464376621 61315042\n", "output": ["384683838\n"]}, {"input": "10\n805513144 38998401 16228409 266085559 293487744 471510400 138613792 649258082 904651590 244678415\n", "output": ["277259335\n"]}, {"input": "6\n0 166666666 333333333 499999998 666666665 833333330\n", "output": ["499999997\n"]}, {"input": "16\n1 62500001 125000001 187500000 250000000 312500000 375000000 437500001 500000000 562500000 625000000 687500001 750000001 812500002 875000002 937500000\n", "output": ["499999999\n"]}, {"input": "12\n5 83333336 166666669 250000001 333333336 416666670 500000004 583333336 666666667 750000001 833333334 916666671\n", "output": ["499999998\n"]}, {"input": "20\n54 50000046 100000041 150000049 200000061 250000039 300000043 350000054 400000042 450000045 500000076 550000052 600000064 650000065 700000055 750000046 800000044 850000042 900000052 950000054\n", "output": ["499999988\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the number of positions available initially\n    n = int(input())\n\n    # Take user input as a list of distinct integers x_1, x_2, ..., x_{n} giving the coordinates of the corresponding positions\n    s = sorted(map(int, input().split()))\n\n    # Step 3: Initialize two pointers p and q at both ends of the array\n    p, q = 0, n - 1\n\n    # Step 4: Perform a game-like operation by incrementing the pointer which belongs to the player who made the last move (Vova or Lesha) until there are only two possible positions remaining.\n    while n > 2:\n        if not (q - p == n):\n            if s[p] + s[q] < s[q - 1] + s[p + 1]:\n                q -= 1\n            else:\n                p += 1\n        n -= 2\n\n    # Step 5: After the game, calculate the distance between the warrior and the archer at the beginning of the fight, provided that both Vova and Lesha play optimally.\n    result = s[q] - s[p]\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the number of positions available initially\n    n = int(input())\n\n    # Take user input as a list of distinct integers x_1, x_2, ..., x_{n} giving the coordinates of the corresponding positions\n    s = sorted(map(int, input().split()))\n\n    # Step 3: Initialize two pointers p and q at both ends of the array\n    p, q = 0, n - 1\n\n    # Step 4: Perform a game-like operation by incrementing the pointer which belongs to the player who made the last move (Vova or Lesha) until there are only two possible positions remaining.\n    while n > 2:\n        if not (q - p == n):\n            if s[p] + s[q] < s[q - 1] + s[p + 1]:\n                q -= 1\n            else:\n                p += 1\n        n -= 2\n\n    # Step 5: After the game, calculate the distance between the warrior and the archer at the beginning of the fight, provided that both Vova and Lesha play optimally.\n    result = s[q] - s[p]\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2066}
{"name": "2104", "description": "Pavel made a photo of his favourite stars in the sky. His camera takes a photo of all points of the sky that belong to some rectangle with sides parallel to the coordinate axes.\n\nStrictly speaking, it makes a photo of all points with coordinates $(x, y)$, such that $x_1 \\leq x \\leq x_2$ and $y_1 \\leq y \\leq y_2$, where $(x_1, y_1)$ and $(x_2, y_2)$ are coordinates of the left bottom and the right top corners of the rectangle being photographed. The area of this rectangle can be zero.\n\nAfter taking the photo, Pavel wrote down coordinates of $n$ of his favourite stars which appeared in the photo. These points are not necessarily distinct, there can be multiple stars in the same point of the sky.\n\nPavel has lost his camera recently and wants to buy a similar one. Specifically, he wants to know the dimensions of the photo he took earlier. Unfortunately, the photo is also lost. His notes are also of not much help; numbers are written in random order all over his notepad, so it's impossible to tell which numbers specify coordinates of which points.\n\nPavel asked you to help him to determine what are the possible dimensions of the photo according to his notes. As there are multiple possible answers, find the dimensions with the minimal possible area of the rectangle.\n\n\n-----Input-----\n\nThe first line of the input contains an only integer $n$ ($1 \\leq n \\leq 100\\,000$), the number of points in Pavel's records.\n\nThe second line contains $2 \\cdot n$ integers $a_1$, $a_2$, ..., $a_{2 \\cdot n}$ ($1 \\leq a_i \\leq 10^9$), coordinates, written by Pavel in some order.\n\n\n-----Output-----\n\nPrint the only integer, the minimal area of the rectangle which could have contained all points from Pavel's records.\n\n\n-----Examples-----\nInput\n4\n4 1 3 2 3 2 1 3\n\nOutput\n1\nInput\n3\n5 8 5 5 7 5\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample stars in Pavel's records can be $(1, 3)$, $(1, 3)$, $(2, 3)$, $(2, 4)$. In this case, the minimal area of the rectangle, which contains all these points is $1$ (rectangle with corners at $(1, 3)$ and $(2, 4)$).", "difficulty": "competition", "id": 2104, "sample_io": [{"input": "4\n4 1 3 2 3 2 1 3\n", "output": ["1"]}, {"input": "3\n5 8 5 5 7 5\n", "output": ["0"]}], "test_list": [{"input": "4\n4 1 3 2 3 2 1 3\n", "output": ["1"]}, {"input": "3\n5 8 5 5 7 5\n", "output": ["0"]}, {"input": "1\n553296794 23577639\n", "output": ["0"]}, {"input": "2\n100000001 95312501 97600001 1\n", "output": ["228750000000000"]}, {"input": "2\n1 499999999 705032704 1000000000\n", "output": ["147483647410065408"]}, {"input": "2\n81475384 79354071 83089784 94987161\n", "output": ["25238060496000"]}, {"input": "2\n229872385 40870434 490042790 160550871\n", "output": ["31137307764866984"]}, {"input": "2\n186213023 151398020 526707498 169652181\n", "output": ["6215440966260475"]}, {"input": "2\n95988141 53257147 119443802 199984654\n", "output": ["3441590663566888"]}, {"input": "1\n1 1\n", "output": ["0"]}, {"input": "1\n1000000000 1000000000\n", "output": ["0"]}, {"input": "4\n4 1 3 2 3 11 1 3\n", "output": ["10"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the number of points in Pavel's records\n    n = int(input())\n\n    # Take user input as a list of integers representing the coordinates written by Pavel in some order\n    coordinates = sorted(map(int, input().split()))\n\n    # Get the minimum and maximum x-coordinates\n    min_x = coordinates[0]\n    max_x = coordinates[-1]\n\n    # Get the minimum and maximum y-coordinates\n    min_y = coordinates[n]\n    max_y = coordinates[2*n - 1]\n\n    # Calculate the minimal possible area of the rectangle which could have contained all points from Pavel's records\n    result = abs((max_x - min_x) * (max_y - min_y))\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the number of points in Pavel's records\n    n = int(input())\n\n    # Take user input as a list of integers representing the coordinates written by Pavel in some order\n    coordinates = sorted(map(int, input().split()))\n\n    # Get the minimum and maximum x-coordinates\n    min_x = coordinates[0]\n    max_x = coordinates[-1]\n\n    # Get the minimum and maximum y-coordinates\n    min_y = coordinates[n]\n    max_y = coordinates[2*n - 1]\n\n    # Calculate the minimal possible area of the rectangle which could have contained all points from Pavel's records\n    result = abs((max_x - min_x) * (max_y - min_y))\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2104}
{"name": "2075", "description": "It is known that there are k fish species in the polar ocean, numbered from 1 to k. They are sorted by non-decreasing order of their weight, which is a positive number. Let the weight of the i-th type of fish be w_{i}, then 0 < w_1 \u2264 w_2 \u2264 ... \u2264 w_{k} holds.\n\nPolar bears Alice and Bob each have caught some fish, and they are guessing who has the larger sum of weight of the fish he/she's caught. Given the type of the fish they've caught, determine whether it is possible that the fish caught by Alice has a strictly larger total weight than Bob's. In other words, does there exist a sequence of weights w_{i} (not necessary integers), such that the fish caught by Alice has a strictly larger total weight?\n\n\n-----Input-----\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 10^5, 1 \u2264 k \u2264 10^9) \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species.\n\n\n-----Output-----\n\nOutput \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 3 3\n2 2 2\n1 1 3\n\nOutput\nYES\n\nInput\n4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, if w_1 = 1, w_2 = 2, w_3 = 2.5,  then Alice has a total of 2 + 2 + 2 = 6 weight units, while Bob only has 1 + 1 + 2.5 = 4.5.\n\nIn the second sample, the fish that Alice caught is a subset of Bob's. Therefore, the total weight of Bob\u2019s fish is always not less than the total weight of Alice\u2019s fish.", "difficulty": "competition", "id": 2075, "sample_io": [{"input": "3 3 3\n2 2 2\n1 1 3\n", "output": ["YES\n"]}, {"input": "4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n", "output": ["NO\n"]}], "test_list": [{"input": "3 3 3\n2 2 2\n1 1 3\n", "output": ["YES\n"]}, {"input": "4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n", "output": ["NO\n"]}, {"input": "5 5 10\n8 2 8 5 9\n9 1 7 5 1\n", "output": ["YES\n"]}, {"input": "7 7 10\n8 2 8 10 6 9 10\n2 4 9 5 6 2 5\n", "output": ["YES\n"]}, {"input": "15 15 10\n4 5 9 1 4 6 4 1 4 3 7 9 9 2 6\n6 6 7 7 2 9 1 6 10 9 7 10 7 10 9\n", "output": ["NO\n"]}, {"input": "25 25 10\n10 6 2 1 9 7 2 5 6 9 2 3 2 8 5 8 2 9 10 8 9 7 7 4 8\n6 2 10 4 7 9 3 2 4 5 1 8 6 9 8 6 9 8 4 8 7 9 10 2 8\n", "output": ["NO\n"]}, {"input": "2 2 1000000000\n398981840 446967516\n477651114 577011341\n", "output": ["NO\n"]}, {"input": "1 1 1\n1\n1\n", "output": ["NO\n"]}, {"input": "1 1 1000000000\n502700350\n502700349\n", "output": ["YES\n"]}, {"input": "1 1 1000000000\n406009709\n406009709\n", "output": ["NO\n"]}, {"input": "2 1 1000000000\n699573624 308238132\n308238132\n", "output": ["YES\n"]}, {"input": "10 10 10\n2 10 8 1 10 4 6 1 3 7\n8 1 1 5 7 1 9 10 2 3\n", "output": ["YES\n"]}, {"input": "5 4 5\n1 2 2 3 4\n1 3 4 5\n", "output": ["YES\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing n, m, k \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species\n    input()\n    n, m = map(int, input().split())\n    alice_fish = list(map(int, input().split()))\n    bob_fish = list(map(int, input().split()))\n\n    # Check if there is a fish type in Alice's catch that has a weight higher than any of the fish types caught by Bob\n    for x in set(alice_fish):\n        if len(set(x for y in alice_fish if y >= x)) > 0 and max(y for y in bob_fish if y < x) != -1:\n            print(\"YES\")\n            return\n\n    # If no such fish type exists, check if any of the fish types caught by Alice has a weight equal to one of Bob's catches\n    for a in set(alice_fish):\n        if max(y for y in bob_fish if y == a) != -1:\n            print(\"YES\")\n            return\n\n    # If no such fish type exists, print \"NO\"\n    print(\"NO\")\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing n, m, k \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species\n    input()\n    n, m = map(int, input().split())\n    alice_fish = list(map(int, input().split()))\n    bob_fish = list(map(int, input().split()))\n\n    # Check if there is a fish type in Alice's catch that has a weight higher than any of the fish types caught by Bob\n    for x in set(alice_fish):\n        if len(set(x for y in alice_fish if y >= x)) > 0 and max(y for y in bob_fish if y < x) != -1:\n            print(\"YES\")\n            return\n\n    # If no such fish type exists, check if any of the fish types caught by Alice has a weight equal to one of Bob's catches\n    for a in set(alice_fish):\n        if max(y for y in bob_fish if y == a) != -1:\n            print(\"YES\")\n            return\n\n    # If no such fish type exists, print \"NO\"\n    print(\"NO\")\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2075}
{"name": "2000", "description": "Codefortia is a small island country located somewhere in the West Pacific. It consists of $n$ settlements connected by $m$ bidirectional gravel roads. Curiously enough, the beliefs of the inhabitants require the time needed to pass each road to be equal either to $a$ or $b$ seconds. It's guaranteed that one can go between any pair of settlements by following a sequence of roads.\n\nCodefortia was recently struck by the financial crisis. Therefore, the king decided to abandon some of the roads so that:\n\n  it will be possible to travel between each pair of cities using the remaining roads only,  the sum of times required to pass each remaining road will be minimum possible (in other words, remaining roads must form minimum spanning tree, using the time to pass the road as its weight),  among all the plans minimizing the sum of times above, the time required to travel between the king's residence (in settlement $1$) and the parliament house (in settlement $p$) using the remaining roads only will be minimum possible. \n\nThe king, however, forgot where the parliament house was. For each settlement $p = 1, 2, \\dots, n$, can you tell what is the minimum time required to travel between the king's residence and the parliament house (located in settlement $p$) after some roads are abandoned?\n\n\n-----Input-----\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($2 \\leq n \\leq 70$, $n - 1 \\leq m \\leq 200$, $1 \\leq a < b \\leq 10^7$) \u2014 the number of settlements and gravel roads in Codefortia, and two possible travel times. Each of the following lines contains three integers $u, v, c$ ($1 \\leq u, v \\leq n$, $u \\neq v$, $c \\in \\{a, b\\}$) denoting a single gravel road between the settlements $u$ and $v$, which requires $c$ minutes to travel.\n\nYou can assume that the road network is connected and has no loops or multiedges.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers. The $p$-th of them should denote the minimum possible time required to travel from $1$ to $p$ after the selected roads are abandoned. Note that for each $p$ you can abandon a different set of roads.\n\n\n-----Examples-----\nInput\n5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n\nOutput\n0 25 60 40 20\n\nInput\n6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n\nOutput\n0 13 26 39 26 13\n\n\n\n-----Note-----\n\nThe minimum possible sum of times required to pass each road in the first example is $85$ \u2014 exactly one of the roads with passing time $25$ must be abandoned. Note that after one of these roads is abandoned, it's now impossible to travel between settlements $1$ and $3$ in time $50$.", "difficulty": "competition", "id": 2000, "sample_io": [{"input": "5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n", "output": ["0 25 60 40 20\n"]}, {"input": "6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n", "output": ["0 13 26 39 26 13\n"]}], "test_list": [{"input": "5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n", "output": ["0 25 60 40 20\n"]}, {"input": "6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n", "output": ["0 13 26 39 26 13\n"]}, {"input": "2 1 1 2\n2 1 1\n", "output": ["0 1\n"]}, {"input": "2 1 9999999 10000000\n1 2 10000000\n", "output": ["0 10000000\n"]}, {"input": "3 3 78422 6789101\n3 1 6789101\n2 1 78422\n2 3 78422\n", "output": ["0 78422 156844\n"]}, {"input": "3 3 2770628 3912422\n1 2 2770628\n2 3 2770628\n1 3 3912422\n", "output": ["0 2770628 5541256\n"]}, {"input": "3 3 2566490 5132980\n1 2 2566490\n2 3 2566490\n3 1 5132980\n", "output": ["0 2566490 5132980\n"]}, {"input": "3 2 509529 5982470\n1 2 509529\n3 2 509529\n", "output": ["0 509529 1019058\n"]}, {"input": "3 2 1349740 8457492\n2 1 1349740\n3 1 1349740\n", "output": ["0 1349740 1349740\n"]}, {"input": "3 2 150319 5002968\n3 2 150319\n1 2 5002968\n", "output": ["0 5002968 5153287\n"]}, {"input": "3 2 990530 8623767\n3 2 8623767\n1 2 990530\n", "output": ["0 990530 9614297\n"]}, {"input": "3 2 810925 2022506\n1 2 2022506\n1 3 810925\n", "output": ["0 2022506 810925\n"]}, {"input": "3 2 1651136 5131013\n1 2 5131013\n3 2 5131013\n", "output": ["0 5131013 10262026\n"]}, {"input": "3 2 451715 1577270\n1 3 1577270\n1 2 1577270\n", "output": ["0 1577270 1577270\n"]}, {"input": "3 3 1291926 4943478\n2 3 1291926\n1 2 1291926\n3 1 1291926\n", "output": ["0 1291926 1291926\n"]}, {"input": "3 3 2132137 9084127\n1 2 2132137\n3 2 9084127\n3 1 2132137\n", "output": ["0 2132137 2132137\n"]}, {"input": "3 3 1126640 9858678\n3 1 9858678\n3 2 1126640\n1 2 9858678\n", "output": ["0 9858678 9858678\n"]}, {"input": "3 3 1966851 6439891\n1 3 6439891\n1 2 1966851\n3 2 6439891\n", "output": ["0 1966851 6439891\n"]}, {"input": "3 3 1787246 7806211\n3 2 7806211\n2 1 7806211\n1 3 7806211\n", "output": ["0 7806211 7806211\n"]}], "starter_code": "", "source_codes": ["\nfrom sys import stdin, stdout\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.graph = {}\n        self.n = 0\n        self.timea = 0\n        self.timeb = 0\n\n    def add_edge(self, u, v, c):\n        if u not in self.graph:\n            self.graph[u] = []\n        if v not in self.graph:\n            self.graph[v] = []\n        self.graph[u].append((v, c))\n        self.graph[v].append((u, c))\n\n    def dijkstra(self):\n        dist = {}\n        pq = []\n\n        for i in range(1, self.n + 1):\n            dist[i] = float('inf')\n        dist[1] = 0\n        heapq.heappush(pq, (0, 1))\n        visited = set()\n\n        while pq:\n            d, u = heapq.heappop(pq)\n            if u in visited:\n                continue\n            for v, c in self.graph[u]:\n                cost = c + d\n                if cost < dist[v] and cost < dist[v] + self.timeb:\n                    dist[v] = cost\n                    heapq.heappush(pq, (cost, v))\n            visited.add(u)\n\n        return dist\n\ndef main():\n    graph = Graph()\n    n, m, timea, timeb = map(int, stdin.readline().split())\n    graph.n = n\n    graph.timea = timea\n    graph.timeb = timeb * 2\n\n    for _ in range(m):\n        u, v, c = map(int, stdin.readline().split())\n        graph.add_edge(u, v, c)\n\n    dist = graph.dijkstra()\n    result = []\n    for i in range(1, n + 1):\n        min_val = float('inf')\n        for j in range(1, n + 1):\n            if dist[i] < dist[j]:\n                min_val = min(min_val, (dist[i] if j == i else 0))\n        result.append(str(min_val))\n\n    stdout.write(\" \".join(result) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\n\n"], "responses": ["```python\nfrom sys import stdin, stdout\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.graph = {}\n        self.n = 0\n        self.timea = 0\n        self.timeb = 0\n\n    def add_edge(self, u, v, c):\n        if u not in self.graph:\n            self.graph[u] = []\n        if v not in self.graph:\n            self.graph[v] = []\n        self.graph[u].append((v, c))\n        self.graph[v].append((u, c))\n\n    def dijkstra(self):\n        dist = {}\n        pq = []\n\n        for i in range(1, self.n + 1):\n            dist[i] = float('inf')\n        dist[1] = 0\n        heapq.heappush(pq, (0, 1))\n        visited = set()\n\n        while pq:\n            d, u = heapq.heappop(pq)\n            if u in visited:\n                continue\n            for v, c in self.graph[u]:\n                cost = c + d\n                if cost < dist[v] and cost < dist[v] + self.timeb:\n                    dist[v] = cost\n                    heapq.heappush(pq, (cost, v))\n            visited.add(u)\n\n        return dist\n\ndef main():\n    graph = Graph()\n    n, m, timea, timeb = map(int, stdin.readline().split())\n    graph.n = n\n    graph.timea = timea\n    graph.timeb = timeb * 2\n\n    for _ in range(m):\n        u, v, c = map(int, stdin.readline().split())\n        graph.add_edge(u, v, c)\n\n    dist = graph.dijkstra()\n    result = []\n    for i in range(1, n + 1):\n        min_val = float('inf')\n        for j in range(1, n + 1):\n            if dist[i] < dist[j]:\n                min_val = min(min_val, (dist[i] if j == i else 0))\n        result.append(str(min_val))\n\n    stdout.write(\" \".join(result) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2000}
{"name": "2065", "description": "Andrewid the Android is a galaxy-famous detective. He is now investigating the case of vandalism at the exhibition of contemporary art.\n\nThe main exhibit is a construction of n matryoshka dolls that can be nested one into another. The matryoshka dolls are numbered from 1 to n. A matryoshka with a smaller number can be nested in a matryoshka with a higher number, two matryoshkas can not be directly nested in the same doll, but there may be chain nestings, for example, 1 \u2192 2 \u2192 4 \u2192 5. \n\nIn one second, you can perform one of the two following operations:  Having a matryoshka a that isn't nested in any other matryoshka and a matryoshka b, such that b doesn't contain any other matryoshka and is not nested in any other matryoshka, you may put a in b;  Having a matryoshka a directly contained in matryoshka b, such that b is not nested in any other matryoshka, you may get a out of b. \n\nAccording to the modern aesthetic norms the matryoshka dolls on display were assembled in a specific configuration, i.e. as several separate chains of nested matryoshkas, but the criminal, following the mysterious plan, took out all the dolls and assembled them into a single large chain (1 \u2192 2 \u2192 ... \u2192 n). In order to continue the investigation Andrewid needs to know in what minimum time it is possible to perform this action.\n\n\n-----Input-----\n\nThe first line contains integers n (1 \u2264 n \u2264 10^5) and k (1 \u2264 k \u2264 10^5) \u2014 the number of matryoshkas and matryoshka chains in the initial configuration.\n\nThe next k lines contain the descriptions of the chains: the i-th line first contains number m_{i} (1 \u2264 m_{i} \u2264 n), and then m_{i} numbers a_{i}1, a_{i}2, ..., a_{im}_{i} \u2014 the numbers of matryoshkas in the chain (matryoshka a_{i}1 is nested into matryoshka a_{i}2, that is nested into matryoshka a_{i}3, and so on till the matryoshka a_{im}_{i} that isn't nested into any other matryoshka).\n\nIt is guaranteed that m_1 + m_2 + ... + m_{k} = n, the numbers of matryoshkas in all the chains are distinct, in each chain the numbers of matryoshkas follow in the ascending order.\n\n\n-----Output-----\n\nIn the single line print the minimum number of seconds needed to assemble one large chain from the initial configuration.\n\n\n-----Examples-----\nInput\n3 2\n2 1 2\n1 3\n\nOutput\n1\n\nInput\n7 3\n3 1 3 7\n2 2 5\n2 4 6\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first sample test there are two chains: 1 \u2192 2 and 3. In one second you can nest the first chain into the second one and get 1 \u2192 2 \u2192 3.\n\nIn the second sample test you need to disassemble all the three chains into individual matryoshkas in 2 + 1 + 1 = 4 seconds and then assemble one big chain in 6 seconds.", "difficulty": "competition", "id": 2065, "sample_io": [{"input": "3 2\n2 1 2\n1 3\n", "output": ["1\n"]}, {"input": "7 3\n3 1 3 7\n2 2 5\n2 4 6\n", "output": ["10\n"]}], "test_list": [{"input": "3 2\n2 1 2\n1 3\n", "output": ["1\n"]}, {"input": "7 3\n3 1 3 7\n2 2 5\n2 4 6\n", "output": ["10\n"]}, {"input": "1 1\n1 1\n", "output": ["0\n"]}, {"input": "3 2\n1 2\n2 1 3\n", "output": ["3\n"]}, {"input": "5 3\n1 4\n3 1 2 3\n1 5\n", "output": ["2\n"]}, {"input": "8 5\n2 1 2\n2 3 4\n1 5\n2 6 7\n1 8\n", "output": ["8\n"]}, {"input": "10 10\n1 5\n1 4\n1 10\n1 3\n1 7\n1 1\n1 8\n1 6\n1 9\n1 2\n", "output": ["9\n"]}, {"input": "20 6\n3 8 9 13\n3 4 14 20\n2 15 17\n3 2 5 11\n5 7 10 12 18 19\n4 1 3 6 16\n", "output": ["33\n"]}, {"input": "50 10\n6 17 21 31 42 45 49\n6 11 12 15 22 26 38\n3 9 29 36\n3 10 23 43\n5 14 19 28 46 48\n2 30 39\n6 13 20 24 33 37 47\n8 1 2 3 4 5 6 7 8\n7 16 18 25 27 34 40 44\n4 32 35 41 50\n", "output": ["75\n"]}, {"input": "13 8\n1 5\n2 8 10\n1 13\n4 1 2 3 11\n1 7\n2 6 12\n1 4\n1 9\n", "output": ["13\n"]}, {"input": "21 13\n1 18\n2 8 13\n1 21\n1 17\n2 7 9\n1 20\n1 19\n1 4\n1 16\n2 5 6\n3 12 14 15\n3 1 2 3\n2 10 11\n", "output": ["24\n"]}, {"input": "50 50\n1 2\n1 5\n1 28\n1 46\n1 42\n1 24\n1 3\n1 37\n1 33\n1 50\n1 23\n1 40\n1 43\n1 26\n1 49\n1 34\n1 8\n1 45\n1 15\n1 1\n1 22\n1 18\n1 27\n1 25\n1 13\n1 39\n1 38\n1 10\n1 44\n1 6\n1 17\n1 47\n1 7\n1 35\n1 20\n1 36\n1 31\n1 21\n1 32\n1 29\n1 4\n1 12\n1 19\n1 16\n1 11\n1 41\n1 9\n1 14\n1 30\n1 48\n", "output": ["49\n"]}, {"input": "100 3\n45 1 2 3 4 5 6 7 8 9 19 21 24 27 28 30 34 35 37 39 40 41 42 43 46 47 48 51 52 55 58 59 61 63 64 66 69 71 76 80 85 86 88 89 94 99\n26 10 11 15 18 23 29 31 33 36 38 44 49 54 56 60 62 65 75 78 82 83 84 95 96 97 98\n29 12 13 14 16 17 20 22 25 26 32 45 50 53 57 67 68 70 72 73 74 77 79 81 87 90 91 92 93 100\n", "output": ["180\n"]}, {"input": "100 19\n6 62 72 83 91 94 97\n3 61 84 99\n1 63\n5 46 53 56 69 78\n5 41 43 49 74 89\n5 55 57 79 85 87\n3 47 59 98\n3 64 76 82\n3 48 66 75\n2 60 88\n2 67 77\n4 40 51 73 95\n41 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 44 71 81\n4 58 65 90 93\n1 100\n5 39 45 52 80 86\n2 50 68\n1 92\n4 42 54 70 96\n", "output": ["106\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the number of matryoshkas and chains in the initial configuration\n    n, k = map(int, input().split())\n\n    # Initialize variables to store the result and total length of all chains\n    res = 0\n    total_length = 0\n\n    # Process each chain\n    for _ in range(k):\n        m, *chain = list(map(int, input().split()))\n        total_length += m - 1  # Subtract 1 because there's one less gap than the number of matryoshkas in a chain\n\n        # Update result if necessary\n        res = max(res, max(chain) - min(chain))\n\n    # Calculate the minimum time it is possible to perform this action\n    result = total_length + res\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the number of matryoshkas and chains in the initial configuration\n    n, k = map(int, input().split())\n\n    # Initialize variables to store the result and total length of all chains\n    res = 0\n    total_length = 0\n\n    # Process each chain\n    for _ in range(k):\n        m, *chain = list(map(int, input().split()))\n        total_length += m - 1  # Subtract 1 because there's one less gap than the number of matryoshkas in a chain\n\n        # Update result if necessary\n        res = max(res, max(chain) - min(chain))\n\n    # Calculate the minimum time it is possible to perform this action\n    result = total_length + res\n\n    # Print the result\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2065}
{"name": "2198", "description": "There are some ambiguities when one writes Berland names with the letters of the Latin alphabet.\n\nFor example, the Berland sound u can be written in the Latin alphabet as \"u\", and can be written as \"oo\". For this reason, two words \"ulyana\" and \"oolyana\" denote the same name.\n\nThe second ambiguity is about the Berland sound h: one can use both \"h\" and \"kh\" to write it. For example, the words \"mihail\" and \"mikhail\" denote the same name.\n\nThere are n users registered on the Polycarp's website. Each of them indicated a name represented by the Latin letters. How many distinct names are there among them, if two ambiguities described above are taken into account?\n\nFormally, we assume that two words denote the same name, if using the replacements \"u\"\u00a0[Image]\u00a0\"oo\" and \"h\"\u00a0[Image]\u00a0\"kh\", you can make the words equal. One can make replacements in both directions, in any of the two words an arbitrary number of times. A letter that resulted from the previous replacement can participate in the next replacements.\n\nFor example, the following pairs of words denote the same name:  \"koouper\" and \"kuooper\". Making the replacements described above, you can make both words to be equal: \"koouper\" $\\rightarrow$ \"kuuper\" and \"kuooper\" $\\rightarrow$ \"kuuper\".  \"khun\" and \"kkkhoon\". With the replacements described above you can make both words to be equal: \"khun\" $\\rightarrow$ \"khoon\" and \"kkkhoon\" $\\rightarrow$ \"kkhoon\" $\\rightarrow$ \"khoon\". \n\nFor a given list of words, find the minimal number of groups where the words in each group denote the same name.\n\n\n-----Input-----\n\nThe first line contains integer number n (2 \u2264 n \u2264 400) \u2014 number of the words in the list.\n\nThe following n lines contain words, one word per line. Each word consists of only lowercase Latin letters. The length of each word is between 1 and 20 letters inclusive.\n\n\n-----Output-----\n\nPrint the minimal number of groups where the words in each group denote the same name.\n\n\n-----Examples-----\nInput\n10\nmihail\noolyana\nkooooper\nhoon\nulyana\nkoouper\nmikhail\nkhun\nkuooper\nkkkhoon\n\nOutput\n4\n\nInput\n9\nhariton\nhkariton\nbuoi\nkkkhariton\nboooi\nbui\nkhariton\nboui\nboi\n\nOutput\n5\n\nInput\n2\nalex\nalex\n\nOutput\n1\n\n\n\n-----Note-----\n\nThere are four groups of words in the first example. Words in each group denote same name:  \"mihail\", \"mikhail\"  \"oolyana\", \"ulyana\"  \"kooooper\", \"koouper\"  \"hoon\", \"khun\", \"kkkhoon\" \n\nThere are five groups of words in the second example. Words in each group denote same name:  \"hariton\", \"kkkhariton\", \"khariton\"  \"hkariton\"  \"buoi\", \"boooi\", \"boui\"  \"bui\"  \"boi\" \n\nIn the third example the words are equal, so they denote the same name.", "difficulty": "competition", "id": 2198, "sample_io": [{"input": "10\nmihail\noolyana\nkooooper\nhoon\nulyana\nkoouper\nmikhail\nkhun\nkuooper\nkkkhoon\n", "output": ["4\n"]}, {"input": "9\nhariton\nhkariton\nbuoi\nkkkhariton\nboooi\nbui\nkhariton\nboui\nboi\n", "output": ["5\n"]}, {"input": "2\nalex\nalex\n", "output": ["1\n"]}], "test_list": [{"input": "10\nmihail\noolyana\nkooooper\nhoon\nulyana\nkoouper\nmikhail\nkhun\nkuooper\nkkkhoon\n", "output": ["4\n"]}, {"input": "9\nhariton\nhkariton\nbuoi\nkkkhariton\nboooi\nbui\nkhariton\nboui\nboi\n", "output": ["5\n"]}, {"input": "2\nalex\nalex\n", "output": ["1\n"]}, {"input": "40\nuok\nkuu\nku\no\nkku\nuh\nu\nu\nhh\nk\nkh\nh\nh\nou\nokh\nukk\nou\nuhk\nuo\nuko\nu\nuu\nh\nh\nhk\nuhu\nuoh\nooo\nk\nh\nuk\nk\nkku\nh\nku\nok\nk\nkuu\nou\nhh\n", "output": ["21\n"]}, {"input": "40\noooo\nhu\no\nhoh\nkhk\nuuh\nhu\nou\nuuoh\no\nkouk\nuouo\nu\nok\nuu\nuuuo\nhoh\nuu\nkuu\nh\nu\nkkoh\nkhh\nuoh\nouuk\nkuo\nk\nu\nuku\nh\nu\nk\nhuho\nku\nh\noo\nuh\nk\nuo\nou\n", "output": ["25\n"]}, {"input": "100\nuh\nu\nou\nhk\nokh\nuou\nk\no\nuhh\nk\noku\nk\nou\nhuh\nkoo\nuo\nkk\nkok\nhhu\nuu\noou\nk\nk\noh\nhk\nk\nu\no\nuo\no\no\no\nhoh\nkuo\nhuh\nkhu\nuu\nk\noku\nk\nh\nuu\nuo\nhuo\noo\nhu\nukk\nok\no\noh\nuo\nkko\nok\nouh\nkoh\nhhu\nku\nko\nhho\nkho\nkho\nkhk\nho\nhk\nuko\nukh\nh\nkh\nkk\nuku\nkkk\no\nuo\no\nouh\nou\nuhk\nou\nk\nh\nkko\nuko\no\nu\nho\nu\nooo\nuo\no\nko\noh\nkh\nuk\nohk\noko\nuko\nh\nh\noo\no\n", "output": ["36\n"]}, {"input": "2\nkkkhkkh\nhh\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    n = int(input())\n    names = [input() for _ in range(n)]\n    def can_make_equal(name1, name2):\n        return all(c1 == c2 or (c1 == 'u' and c2 == 'oo') or (c1 == 'h' and c2 == 'kh')\n                    for c1, c2 in zip(name1, name2))\n    parent = {name: i for i, name in enumerate(names)}\n    rank = [0] * n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    def union(x, y):\n        rootx = find(x)\n        rooty = find(y)\n        if rootx == rooty:\n            return\n        if rank[rootx] < rank[rooty]:\n            parent[rootx] = rooty\n        elif rank[rootx] > rank[rooty]:\n            parent[rooty] = rootx\n        else:\n            parent[rootx] = rooty\n            rank[rooty] += 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if can_make_equal(names[i], names[j]):\n                union(i, j)\n    result = len(set(find(x) for x in range(n)))\n    print(result)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    n = int(input())\n    names = [input() for _ in range(n)]\n    def can_make_equal(name1, name2):\n        return all(c1 == c2 or (c1 == 'u' and c2 == 'oo') or (c1 == 'h' and c2 == 'kh')\n                    for c1, c2 in zip(name1, name2))\n    parent = {name: i for i, name in enumerate(names)}\n    rank = [0] * n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    def union(x, y):\n        rootx = find(x)\n        rooty = find(y)\n        if rootx == rooty:\n            return\n        if rank[rootx] < rank[rooty]:\n            parent[rootx] = rooty\n        elif rank[rootx] > rank[rooty]:\n            parent[rooty] = rootx\n        else:\n            parent[rootx] = rooty\n            rank[rooty] += 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if can_make_equal(names[i], names[j]):\n                union(i, j)\n    result = len(set(find(x) for x in range(n)))\n    print(result)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2198}
{"name": "2073", "description": "Bike loves looking for the second maximum element in the sequence. The second maximum element in the sequence of distinct numbers x_1, x_2, ..., x_{k} (k > 1) is such maximum element x_{j}, that the following inequality holds: $x_{j} \\neq \\operatorname{max}_{i = 1}^{k} x_{i}$.\n\nThe lucky number of the sequence of distinct positive integers x_1, x_2, ..., x_{k} (k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence.\n\nYou've got a sequence of distinct positive integers s_1, s_2, ..., s_{n} (n > 1). Let's denote sequence s_{l}, s_{l} + 1, ..., s_{r} as s[l..r] (1 \u2264 l < r \u2264 n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r].\n\nNote that as all numbers in sequence s are distinct, all the given definitions make sence.\n\n\n-----Input-----\n\nThe first line contains integer n (1 < n \u2264 10^5). The second line contains n distinct integers s_1, s_2, ..., s_{n} (1 \u2264 s_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum lucky number among all lucky numbers of sequences s[l..r].\n\n\n-----Examples-----\nInput\n5\n5 2 1 4 3\n\nOutput\n7\n\nInput\n5\n9 8 3 5 7\n\nOutput\n15\n\n\n\n-----Note-----\n\nFor the first sample you can choose s[4..5] = {4, 3} and its lucky number is (4\u00a0xor\u00a03) = 7. You can also choose s[1..2].\n\nFor the second sample you must choose s[2..5] = {8, 3, 5, 7}.", "difficulty": "competition", "id": 2073, "sample_io": [{"input": "5\n5 2 1 4 3\n", "output": ["7\n"]}, {"input": "5\n9 8 3 5 7\n", "output": ["15\n"]}], "test_list": [{"input": "5\n5 2 1 4 3\n", "output": ["7\n"]}, {"input": "5\n9 8 3 5 7\n", "output": ["15\n"]}, {"input": "10\n76969694 71698884 32888447 31877010 65564584 87864180 7850891 1505323 17879621 15722446\n", "output": ["128869996\n"]}, {"input": "10\n4547989 39261040 94929326 38131456 26174500 7152864 71295827 77784626 89898294 68006331\n", "output": ["134189790\n"]}, {"input": "10\n30301275 19973434 63004643 54007648 93722492 91677384 58694045 41546981 15552151 5811338\n", "output": ["112066588\n"]}, {"input": "10\n47606126 65484553 142643 35352821 26622058 5603080 7296801 53938188 34750256 97196502\n", "output": ["131671782\n"]}, {"input": "10\n82942694 74816699 72957520 1634864 60842992 60103606 61079517 41624114 13932450 24035648\n", "output": ["133874061\n"]}, {"input": "10\n73622246 45316865 2066146 61168230 1258786 69603039 64470479 72811017 72683016 97992629\n", "output": ["133280528\n"]}, {"input": "10\n29272229 8752316 10025994 52398694 57994948 49609605 28150935 66061676 44865054 87041483\n", "output": ["127710165\n"]}, {"input": "10\n3106954 3413954 3854371 85952704 17834583 20954227 58810981 7460648 97908613 97965110\n", "output": ["111078053\n"]}, {"input": "3\n11 10 8\n", "output": ["2\n"]}, {"input": "2\n5 6\n", "output": ["3\n"]}, {"input": "2\n16 17\n", "output": ["1\n"]}, {"input": "3\n8 9 10\n", "output": ["3\n"]}], "starter_code": "", "source_codes": ["\nimport sys\n\nclass FastIO:\n    def __init__(self):\n        self.input = sys.stdin.readline\n\n    def next(self):\n        return self.input().strip()\n\n    def next_int(self):\n        return int(self.next())\n\n    def next_float(self):\n        return float(self.next())\n\n    def print(self, x):\n        print(x)\n\n    def debug(self, *args):\n        if 'DEBUG' in os.environ:\n            s = \" \".join(map(str, args))\n            sys.stderr.write(s + \"\\n\")\n\nio = FastIO()\n\n# n\nn = io.next_int()\na = [0] * (n + 1)\na[0] = -sys.maxsize\n\nmax2 = -sys.maxsize\nmax1 = -sys.maxsize\ncur_max = -sys.maxsize\nfor i in range(1, n+1):\n    a[i] = io.next_int()\n    if a[i] > max1:\n        max2 = max1\n        max1 = a[i]\n    elif a[i] > max2:\n        max2 = a[i]\n\ndef get_lucky(num):\n    res = num & ((num ^ (num >> 1)) >> 63)\n    return res\n\nans = -sys.maxsize\nfor i in range(0, n):\n    for j in range(i+1, n+1):\n        cur_max = get_lucky(a[i] | a[j])\n        if cur_max > ans:\n            ans = cur_max\n\nio.print(ans)\n\n\n"], "responses": ["```python\nimport sys\n\nclass FastIO:\n    def __init__(self):\n        self.input = sys.stdin.readline\n\n    def next(self):\n        return self.input().strip()\n\n    def next_int(self):\n        return int(self.next())\n\n    def next_float(self):\n        return float(self.next())\n\n    def print(self, x):\n        print(x)\n\n    def debug(self, *args):\n        if 'DEBUG' in os.environ:\n            s = \" \".join(map(str, args))\n            sys.stderr.write(s + \"\\n\")\n\nio = FastIO()\n\n# n\nn = io.next_int()\na = [0] * (n + 1)\na[0] = -sys.maxsize\n\nmax2 = -sys.maxsize\nmax1 = -sys.maxsize\ncur_max = -sys.maxsize\nfor i in range(1, n+1):\n    a[i] = io.next_int()\n    if a[i] > max1:\n        max2 = max1\n        max1 = a[i]\n    elif a[i] > max2:\n        max2 = a[i]\n\ndef get_lucky(num):\n    res = num & ((num ^ (num >> 1)) >> 63)\n    return res\n\nans = -sys.maxsize\nfor i in range(0, n):\n    for j in range(i+1, n+1):\n        cur_max = get_lucky(a[i] | a[j])\n        if cur_max > ans:\n            ans = cur_max\n\nio.print(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2073}
{"name": "2126", "description": "For the multiset of positive integers $s=\\{s_1,s_2,\\dots,s_k\\}$, define the Greatest Common Divisor (GCD) and Least Common Multiple (LCM) of $s$ as follow: $\\gcd(s)$ is the maximum positive integer $x$, such that all integers in $s$ are divisible on $x$. $\\textrm{lcm}(s)$ is the minimum positive integer $x$, that divisible on all integers from $s$.\n\nFor example, $\\gcd(\\{8,12\\})=4,\\gcd(\\{12,18,6\\})=6$ and $\\textrm{lcm}(\\{4,6\\})=12$. Note that for any positive integer $x$, $\\gcd(\\{x\\})=\\textrm{lcm}(\\{x\\})=x$.\n\nOrac has a sequence $a$ with length $n$. He come up with the multiset $t=\\{\\textrm{lcm}(\\{a_i,a_j\\})\\ |\\ i<j\\}$, and asked you to find the value of $\\gcd(t)$ for him. In other words, you need to calculate the GCD of LCMs of all pairs of elements in the given sequence.\n\n\n-----Input-----\n\nThe first line contains one integer $n\\ (2\\le n\\le 100\\,000)$.\n\nThe second line contains $n$ integers, $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 200\\,000$).\n\n\n-----Output-----\n\nPrint one integer: $\\gcd(\\{\\textrm{lcm}(\\{a_i,a_j\\})\\ |\\ i<j\\})$.\n\n\n-----Examples-----\nInput\n2\n1 1\n\nOutput\n1\n\nInput\n4\n10 24 40 80\n\nOutput\n40\n\nInput\n10\n540 648 810 648 720 540 594 864 972 648\n\nOutput\n54\n\n\n\n-----Note-----\n\nFor the first example, $t=\\{\\textrm{lcm}(\\{1,1\\})\\}=\\{1\\}$, so $\\gcd(t)=1$.\n\nFor the second example, $t=\\{120,40,80,120,240,80\\}$, and it's not hard to see that $\\gcd(t)=40$.", "difficulty": "competition", "id": 2126, "sample_io": [{"input": "2\n1 1\n", "output": ["1\n"]}, {"input": "4\n10 24 40 80\n", "output": ["40\n"]}, {"input": "10\n540 648 810 648 720 540 594 864 972 648\n", "output": ["54\n"]}], "test_list": [{"input": "2\n1 1\n", "output": ["1\n"]}, {"input": "4\n10 24 40 80\n", "output": ["40\n"]}, {"input": "10\n540 648 810 648 720 540 594 864 972 648\n", "output": ["54\n"]}, {"input": "2\n199999 200000\n", "output": ["39999800000\n"]}, {"input": "2\n198761 199999\n", "output": ["39752001239\n"]}, {"input": "10\n972 972 324 972 324 648 1944 243 324 474\n", "output": ["162\n"]}, {"input": "3\n166299 110866 86856\n", "output": ["332598\n"]}, {"input": "2\n10007 20014\n", "output": ["20014\n"]}, {"input": "2\n4 6\n", "output": ["12\n"]}, {"input": "5\n25 25 5 5 5\n", "output": ["5\n"]}, {"input": "2\n3 3\n", "output": ["3\n"]}], "starter_code": "", "source_codes": ["\nimport math\n\ndef main():\n    # Take user input as a string representing the number of elements in set s\n    n = int(input())\n\n    # Take user input as a string representing each element in set s, split by space\n    a = list(map(int, input().split()))\n\n    # Step 1: Initialize gcd with the first element in set s\n    gcd_val = a[0]\n\n    # Iterate over all elements in set s starting from the second one\n    for i in range(1, n):\n        # Update gcd with the GCD of current gcd and the current element\n        gcd_val = math.gcd(gcd_val, a[i])\n\n    # Print the result\n    print(gcd_val)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport math\n\ndef main():\n    # Take user input as a string representing the number of elements in set s\n    n = int(input())\n\n    # Take user input as a string representing each element in set s, split by space\n    a = list(map(int, input().split()))\n\n    # Step 1: Initialize gcd with the first element in set s\n    gcd_val = a[0]\n\n    # Iterate over all elements in set s starting from the second one\n    for i in range(1, n):\n        # Update gcd with the GCD of current gcd and the current element\n        gcd_val = math.gcd(gcd_val, a[i])\n\n    # Print the result\n    print(gcd_val)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2126}
{"name": "2012", "description": "A permutation p of size n is the sequence p_1, p_2, ..., p_{n}, consisting of n distinct integers, each of them is from 1 to n (1 \u2264 p_{i} \u2264 n).\n\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint \"-1\" (without the quotes) if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4", "difficulty": "competition", "id": 2012, "sample_io": [{"input": "1\n", "output": ["1 \n"]}, {"input": "2\n", "output": ["-1\n"]}, {"input": "4\n", "output": ["2 4 1 3 \n"]}, {"input": "5\n", "output": ["2 5 3 1 4 \n"]}], "test_list": [{"input": "1\n", "output": ["1 \n"]}, {"input": "2\n", "output": ["-1\n"]}, {"input": "4\n", "output": ["2 4 1 3 \n"]}, {"input": "5\n", "output": ["2 5 3 1 4 \n"]}, {"input": "3\n", "output": ["-1\n"]}, {"input": "6\n", "output": ["-1\n"]}, {"input": "7\n", "output": ["-1\n"]}, {"input": "8\n", "output": ["2 8 4 6 3 5 1 7 \n"]}, {"input": "9\n", "output": ["2 9 4 7 5 3 6 1 8 \n"]}, {"input": "10002\n", "output": ["-1\n"]}, {"input": "10003\n", "output": ["-1\n"]}, {"input": "25\n", "output": ["2 25 4 23 6 21 8 19 10 17 12 15 13 11 14 9 16 7 18 5 20 3 22 1 24 \n"]}, {"input": "29\n", "output": ["2 29 4 27 6 25 8 23 10 21 12 19 14 17 15 13 16 11 18 9 20 7 22 5 24 3 26 1 28 \n"]}, {"input": "33\n", "output": ["2 33 4 31 6 29 8 27 10 25 12 23 14 21 16 19 17 15 18 13 20 11 22 9 24 7 26 5 28 3 30 1 32 \n"]}, {"input": "9\n", "output": ["2 9 4 7 5 3 6 1 8 \n"]}, {"input": "13\n", "output": ["2 13 4 11 6 9 7 5 8 3 10 1 12 \n"]}, {"input": "17\n", "output": ["2 17 4 15 6 13 8 11 9 7 10 5 12 3 14 1 16 \n"]}, {"input": "99999\n", "output": ["-1\n"]}], "starter_code": "", "source_codes": ["\nn = int(input())\n\nif n == 1:\n    print(1)\nelif n % 4 != 0:\n    print(-1)\nelse:\n    for i in range(n):\n        if i % 2 == 0:\n            print(i // 2 + 1, end=' ')\n        else:\n            print(n - (i // 2), end=' ')\n\n\n"], "responses": ["```python\nn = int(input())\n\nif n == 1:\n    print(1)\nelif n % 4 != 0:\n    print(-1)\nelse:\n    for i in range(n):\n        if i % 2 == 0:\n            print(i // 2 + 1, end=' ')\n        else:\n            print(n - (i // 2), end=' ')\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2012}
{"name": "2162", "description": "Consider a tree $T$ (that is, a connected graph without cycles) with $n$ vertices labelled $1$ through $n$. We start the following process with $T$: while $T$ has more than one vertex, do the following:\n\n\n\n choose a random edge of $T$ equiprobably;\n\n shrink the chosen edge: if the edge was connecting vertices $v$ and $u$, erase both $v$ and $u$ and create a new vertex adjacent to all vertices previously adjacent to either $v$ or $u$. The new vertex is labelled either $v$ or $u$ equiprobably.\n\nAt the end of the process, $T$ consists of a single vertex labelled with one of the numbers $1, \\ldots, n$. For each of the numbers, what is the probability of this number becoming the label of the final vertex?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 50$).\n\nThe following $n - 1$ lines describe the tree edges. Each of these lines contains two integers $u_i, v_i$\u00a0\u2014 labels of vertices connected by the respective edge ($1 \\leq u_i, v_i \\leq n$, $u_i \\neq v_i$). It is guaranteed that the given graph is a tree.\n\n\n-----Output-----\n\nPrint $n$ floating numbers\u00a0\u2014 the desired probabilities for labels $1, \\ldots, n$ respectively. All numbers should be correct up to $10^{-6}$ relative or absolute precision.\n\n\n-----Examples-----\nInput\n4\n1 2\n1 3\n1 4\n\nOutput\n0.1250000000\n0.2916666667\n0.2916666667\n0.2916666667\n\nInput\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n\nOutput\n0.0850694444\n0.0664062500\n0.0664062500\n0.1955295139\n0.1955295139\n0.1955295139\n0.1955295139\n\n\n\n-----Note-----\n\nIn the first sample, the resulting vertex has label 1 if and only if for all three edges the label 1 survives, hence the probability is $1/2^3 = 1/8$. All other labels have equal probability due to symmetry, hence each of them has probability $(1 - 1/8) / 3 = 7/24$.", "difficulty": "competition", "id": 2162, "sample_io": [{"input": "4\n1 2\n1 3\n1 4\n", "output": ["0.1250000000\n0.2916666667\n0.2916666667\n0.2916666667\n"]}, {"input": "7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "output": ["0.0850694444\n0.0664062500\n0.0664062500\n0.1955295139\n0.1955295139\n0.1955295139\n0.1955295139\n"]}], "test_list": [{"input": "4\n1 2\n1 3\n1 4\n", "output": ["0.1250000000\n0.2916666667\n0.2916666667\n0.2916666667\n"]}, {"input": "7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "output": ["0.0850694444\n0.0664062500\n0.0664062500\n0.1955295139\n0.1955295139\n0.1955295139\n0.1955295139\n"]}, {"input": "1\n", "output": ["1.0000000000\n"]}, {"input": "10\n9 8\n7 4\n10 7\n6 7\n1 9\n4 9\n9 3\n2 3\n1 5\n", "output": ["0.0716733902\n0.1568513416\n0.0716733902\n0.0513075087\n0.1568513416\n0.1496446398\n0.0462681362\n0.1274088542\n0.0186767578\n0.1496446398\n"]}, {"input": "20\n13 11\n4 12\n17 16\n15 19\n16 6\n7 6\n6 8\n12 2\n19 20\n1 8\n4 17\n18 12\n9 5\n14 13\n11 15\n1 19\n3 13\n4 9\n15 10\n", "output": ["0.0241401787\n0.0917954309\n0.0976743034\n0.0150433990\n0.1006279377\n0.0150716827\n0.0758016731\n0.0241290115\n0.0444770708\n0.0796739239\n0.0310518413\n0.0248005499\n0.0287209519\n0.0976743034\n0.0160891602\n0.0248310267\n0.0253902066\n0.0917954309\n0.0146375074\n0.0765744099\n"]}, {"input": "30\n15 21\n21 3\n22 4\n5 18\n26 25\n12 24\n11 2\n27 13\n11 14\n7 29\n10 26\n16 17\n16 27\n16 1\n3 22\n5 19\n2 23\n4 10\n8 4\n1 20\n30 22\n9 3\n28 15\n23 4\n4 1\n2 7\n5 27\n6 26\n6 24\n", "output": ["0.0047521072\n0.0089582002\n0.0091024503\n0.0005692947\n0.0158713738\n0.0231639046\n0.0280364616\n0.0385477047\n0.0508439275\n0.0104849699\n0.0280364616\n0.0756812249\n0.0527268460\n0.0663906850\n0.0348291400\n0.0067068947\n0.0473003760\n0.0620785158\n0.0620785158\n0.0431676433\n0.0225005681\n0.0055308416\n0.0101877956\n0.0354105896\n0.0520300528\n0.0099339742\n0.0093540308\n0.0748580820\n0.0663906850\n0.0444766827\n"]}, {"input": "2\n2 1\n", "output": ["0.5000000000\n0.5000000000\n"]}, {"input": "3\n2 1\n3 2\n", "output": ["0.3750000000\n0.2500000000\n0.3750000000\n"]}, {"input": "4\n3 1\n3 2\n2 4\n", "output": ["0.3125000000\n0.1875000000\n0.1875000000\n0.3125000000\n"]}], "starter_code": "", "source_codes": ["\nimport sys\nfrom collections import defaultdict, deque\ninput = lambda: sys.stdin.readline().rstrip()\n\nn = int(input())\nadj = [[] for _ in range(n + 1)]\nfor _ in range(n - 1):\n    u, v = map(int, input().split())\n    adj[u].append(v)\n    adj[v].append(u)\n\ndp = [[0.0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(2, n + 1):\n    p = [0.0] * (i + 1)\n    p[1] = 1.0\n    q = list(p)\n\n    for j in range(i - 1, 0, -1):\n        q[j] = (q[j + 1] + q[j]) / 2\n\n    dp[i][1] = q[1]\n\nfor i in range(2, n + 1):\n    for u in adj[i]:\n        for j in range(i - 1, 0, -1):\n            dp[i][j] += (dp[u][j] * dp[u][i]) / 2\n\nans = [0.0] * (n + 1)\nfor i in range(1, n + 1):\n    ans[i] = sum(dp[j][i] for j in range(i + 1, n + 1))\n\nprint('\\n'.join(map(lambda x: format(x, '.6f'), ans[1:])))\n\n\n"], "responses": ["```python\nimport sys\nfrom collections import defaultdict, deque\ninput = lambda: sys.stdin.readline().rstrip()\n\nn = int(input())\nadj = [[] for _ in range(n + 1)]\nfor _ in range(n - 1):\n    u, v = map(int, input().split())\n    adj[u].append(v)\n    adj[v].append(u)\n\ndp = [[0.0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(2, n + 1):\n    p = [0.0] * (i + 1)\n    p[1] = 1.0\n    q = list(p)\n\n    for j in range(i - 1, 0, -1):\n        q[j] = (q[j + 1] + q[j]) / 2\n\n    dp[i][1] = q[1]\n\nfor i in range(2, n + 1):\n    for u in adj[i]:\n        for j in range(i - 1, 0, -1):\n            dp[i][j] += (dp[u][j] * dp[u][i]) / 2\n\nans = [0.0] * (n + 1)\nfor i in range(1, n + 1):\n    ans[i] = sum(dp[j][i] for j in range(i + 1, n + 1))\n\nprint('\\n'.join(map(lambda x: format(x, '.6f'), ans[1:])))\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2162}
{"name": "2192", "description": "There are n beacons located at distinct positions on a number line. The i-th beacon has position a_{i} and power level b_{i}. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance b_{i} inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.\n\nSaitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the initial number of beacons.\n\nThe i-th of next n lines contains two integers a_{i} and b_{i} (0 \u2264 a_{i} \u2264 1 000 000, 1 \u2264 b_{i} \u2264 1 000 000)\u00a0\u2014 the position and power level of the i-th beacon respectively. No two beacons will have the same position, so a_{i} \u2260 a_{j} if i \u2260 j.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of beacons that could be destroyed if exactly one beacon is added.\n\n\n-----Examples-----\nInput\n4\n1 9\n3 1\n6 1\n7 4\n\nOutput\n1\n\nInput\n7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n\nOutput\n3\n\n\n\n-----Note-----\n\nFor the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.\n\nFor the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.", "difficulty": "competition", "id": 2192, "sample_io": [{"input": "4\n1 9\n3 1\n6 1\n7 4\n", "output": ["1\n"]}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n", "output": ["3\n"]}], "test_list": [{"input": "4\n1 9\n3 1\n6 1\n7 4\n", "output": ["1\n"]}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n", "output": ["3\n"]}, {"input": "1\n0 1\n", "output": ["0\n"]}, {"input": "1\n0 1000000\n", "output": ["0\n"]}, {"input": "1\n1000000 1000000\n", "output": ["0\n"]}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 6\n7 7\n", "output": ["4\n"]}, {"input": "5\n1 1\n3 1\n5 1\n7 10\n8 10\n", "output": ["2\n"]}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": ["4\n"]}], "starter_code": "", "source_codes": ["\nimport bisect\n\ndef main():\n    n = int(input())\n    a = [0]\n    b = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        a.append(x)\n        b.append(y)\n\n    res = 0\n    for i in range(1, n + 1):\n        pos = bisect.bisect_left(a, a[i] - b[i])\n        res += (i - pos)\n\n    print(res)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport bisect\n\ndef main():\n    n = int(input())\n    a = [0]\n    b = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        a.append(x)\n        b.append(y)\n\n    res = 0\n    for i in range(1, n + 1):\n        pos = bisect.bisect_left(a, a[i] - b[i])\n        res += (i - pos)\n\n    print(res)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2192}
{"name": "2056", "description": "You are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\n  Swap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$, that is, the absolute difference between $i$ and $j$.  Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip (change $0$ to $1$ or $1$ to $0$) the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, one of the optimal solutions is to flip index $1$ and index $3$, the string $a$ changes in the following way: \"100\" $\\to$ \"000\" $\\to$ \"001\". The cost is $1 + 1 = 2$.\n\nThe other optimal solution is to swap bits and indices $1$ and $3$, the string $a$ changes then \"100\" $\\to$ \"001\", the cost is also $|1 - 3| = 2$.\n\nIn the second example, the optimal solution is to swap bits at indices $2$ and $3$, the string $a$ changes as \"0101\" $\\to$ \"0011\". The cost is $|2 - 3| = 1$.", "difficulty": "competition", "id": 2056, "sample_io": [{"input": "3\n100\n001\n", "output": ["2\n"]}, {"input": "4\n0101\n0011\n", "output": ["1\n"]}], "test_list": [{"input": "3\n100\n001\n", "output": ["2\n"]}, {"input": "4\n0101\n0011\n", "output": ["1\n"]}, {"input": "8\n10001001\n01101110\n", "output": ["4\n"]}, {"input": "1\n0\n1\n", "output": ["1\n"]}, {"input": "6\n110110\n000000\n", "output": ["4\n"]}, {"input": "15\n101010101010101\n010101010101010\n", "output": ["8\n"]}, {"input": "7\n1110001\n0000000\n", "output": ["4\n"]}, {"input": "7\n1110001\n0000001\n", "output": ["3\n"]}, {"input": "91\n0010010000110001001011011011111001000110001000100111110010010001100110010111100111011111100\n1101110110000100110000100011010110111101100000011011100111111000110000001101101111100100101\n", "output": ["43\n"]}, {"input": "19\n1111010011111010100\n1010000110100110110\n", "output": ["8\n"]}, {"input": "2\n10\n01\n", "output": ["1\n"]}, {"input": "10\n1010101010\n1010101010\n", "output": ["0\n"]}, {"input": "1\n1\n1\n", "output": ["0\n"]}, {"input": "2\n10\n00\n", "output": ["1\n"]}, {"input": "4\n1000\n0001\n", "output": ["2\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as a string representing the length of the strings 'a' and 'b'\n    n = int(input())\n\n    # Take binary strings 'a' and 'b' from the user\n    a, b = input(), input()\n\n    # Initialize the cost variable to 0\n    cost = 0\n\n    # Step 1: Iterate through each character in string 'a'\n    for i in range(n):\n        # If current bit is different from corresponding bit in string 'b'\n        if a[i] != b[i]:\n            # Increment the cost by 1 (for flipping)\n            cost += 1\n            # If current and next bits are same but current bit in string 'a' is not equal to current bit in string 'b'\n            if i < n - 1 and a[i] == a[i + 1] != b[i]:\n                # Increment the cost by 1 (for swapping)\n                cost += 1\n            elif i > 0 and a[i] == a[i - 1] != b[i]:\n                # Increment the cost by 1 (for swapping)\n                cost += 1\n\n    # Print the final cost\n    print(cost)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as a string representing the length of the strings 'a' and 'b'\n    n = int(input())\n\n    # Take binary strings 'a' and 'b' from the user\n    a, b = input(), input()\n\n    # Initialize the cost variable to 0\n    cost = 0\n\n    # Step 1: Iterate through each character in string 'a'\n    for i in range(n):\n        # If current bit is different from corresponding bit in string 'b'\n        if a[i] != b[i]:\n            # Increment the cost by 1 (for flipping)\n            cost += 1\n            # If current and next bits are same but current bit in string 'a' is not equal to current bit in string 'b'\n            if i < n - 1 and a[i] == a[i + 1] != b[i]:\n                # Increment the cost by 1 (for swapping)\n                cost += 1\n            elif i > 0 and a[i] == a[i - 1] != b[i]:\n                # Increment the cost by 1 (for swapping)\n                cost += 1\n\n    # Print the final cost\n    print(cost)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2056}
{"name": "2060", "description": "Evlampiy has found one more cool application to process photos. However the application has certain limitations.\n\nEach photo i has a contrast v_{i}. In order for the processing to be truly of high quality, the application must receive at least k photos with contrasts which differ as little as possible.\n\nEvlampiy already knows the contrast v_{i} for each of his n photos. Now he wants to split the photos into groups, so that each group contains at least k photos. As a result, each photo must belong to exactly one group.\n\nHe considers a processing time of the j-th group to be the difference between the maximum and minimum values of v_{i} in the group. Because of multithreading the processing time of a division into groups is the maximum processing time among all groups.\n\nSplit n photos into groups in a such way that the processing time of the division is the minimum possible, i.e. that the the maximum processing time over all groups as least as possible.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 3\u00b710^5) \u2014 number of photos and minimum size of a group.\n\nThe second line contains n integers v_1, v_2, ..., v_{n} (1 \u2264 v_{i} \u2264 10^9), where v_{i} is the contrast of the i-th photo.\n\n\n-----Output-----\n\nPrint the minimal processing time of the division into groups.\n\n\n-----Examples-----\nInput\n5 2\n50 110 130 40 120\n\nOutput\n20\n\nInput\n4 1\n2 3 4 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the photos should be split into 2 groups: [40, 50] and [110, 120, 130]. The processing time of the first group is 10, and the processing time of the second group is 20. Maximum among 10 and 20 is 20. It is impossible to split the photos into groups in a such way that the processing time of division is less than 20.\n\nIn the second example the photos should be split into four groups, each containing one photo. So the minimal possible processing time of a division is 0.", "difficulty": "competition", "id": 2060, "sample_io": [{"input": "5 2\n50 110 130 40 120\n", "output": ["20\n"]}, {"input": "4 1\n2 3 4 1\n", "output": ["0\n"]}], "test_list": [{"input": "5 2\n50 110 130 40 120\n", "output": ["20\n"]}, {"input": "4 1\n2 3 4 1\n", "output": ["0\n"]}, {"input": "1 1\n4\n", "output": ["0\n"]}, {"input": "2 2\n7 5\n", "output": ["2\n"]}, {"input": "3 2\n34 3 75\n", "output": ["72\n"]}, {"input": "5 2\n932 328 886 96 589\n", "output": ["343\n"]}, {"input": "10 4\n810 8527 9736 3143 2341 6029 7474 707 2513 2023\n", "output": ["3707\n"]}, {"input": "20 11\n924129 939902 178964 918687 720767 695035 577430 407131 213304 810868 596349 266075 123602 376312 36680 18426 716200 121546 61834 851586\n", "output": ["921476\n"]}, {"input": "100 28\n1 2 3 5 1 1 1 4 1 5 2 4 3 2 5 4 1 1 4 1 4 5 4 1 4 5 1 3 5 1 1 1 4 2 5 2 3 5 2 2 3 2 4 5 5 5 5 1 2 4 1 3 1 1 1 4 3 1 5 2 5 1 3 3 2 4 5 1 1 3 4 1 1 3 3 1 2 4 3 3 4 4 3 1 2 1 5 1 4 4 2 3 1 3 3 4 2 4 1 1\n", "output": ["1\n"]}, {"input": "101 9\n3 2 2 1 4 1 3 2 3 4 3 2 3 1 4 4 1 1 4 1 3 3 4 1 2 1 1 3 1 2 2 4 3 1 4 3 1 1 4 4 1 2 1 1 4 2 3 4 1 2 1 4 4 1 4 3 1 4 2 1 2 1 4 3 4 3 4 2 2 4 3 2 1 3 4 3 2 2 4 3 3 2 4 1 3 2 2 4 1 3 4 2 1 3 3 2 2 1 1 3 1\n", "output": ["0\n"]}, {"input": "2 2\n1 1000000000\n", "output": ["999999999\n"]}, {"input": "2 1\n1 1000000000\n", "output": ["0\n"]}, {"input": "11 3\n412 3306 3390 2290 1534 316 1080 2860 253 230 3166\n", "output": ["1122\n"]}, {"input": "10 3\n2414 294 184 666 2706 1999 2201 1270 904 653\n", "output": ["707\n"]}, {"input": "24 4\n33 27 12 65 19 6 46 33 57 2 21 50 73 13 59 69 51 45 39 1 6 64 39 27\n", "output": ["9\n"]}], "starter_code": "", "source_codes": ["\nimport heapq\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n, k = map(int, input().split())\n    v = list(map(int, input().split()))\n\n    # Create a priority queue to store differences between values\n    pq = []\n    for i in range(n - k + 1):\n        heapq.heappush(pq, (max(v[i:i+k]) - min(v[i:i+k]), i))\n\n    max_diff = max(v) - min(v)\n    while len(pq) > 0:\n        diff, idx = pq[0]\n        if diff == max_diff:\n            break\n        heapq.heappop(pq)\n\n        new_diff = (max(v[idx + 1:idx + k]) - min(v[idx + 1:idx + k]), idx)\n        heapq.heappush(pq, new_diff)\n\n    print(max_diff)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\nimport heapq\n\ndef main():\n    # Take user input as a string representing the current year in Berland\n    n, k = map(int, input().split())\n    v = list(map(int, input().split()))\n\n    # Create a priority queue to store differences between values\n    pq = []\n    for i in range(n - k + 1):\n        heapq.heappush(pq, (max(v[i:i+k]) - min(v[i:i+k]), i))\n\n    max_diff = max(v) - min(v)\n    while len(pq) > 0:\n        diff, idx = pq[0]\n        if diff == max_diff:\n            break\n        heapq.heappop(pq)\n\n        new_diff = (max(v[idx + 1:idx + k]) - min(v[idx + 1:idx + k]), idx)\n        heapq.heappush(pq, new_diff)\n\n    print(max_diff)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2060}
{"name": "2087", "description": "Vasya has n items lying in a line. The items are consecutively numbered by numbers from 1 to n in such a way that the leftmost item has number 1, the rightmost item has number n. Each item has a weight, the i-th item weights w_{i} kilograms.\n\nVasya needs to collect all these items, however he won't do it by himself. He uses his brand new robot. The robot has two different arms \u2014 the left one and the right one. The robot can consecutively perform the following actions:   Take the leftmost item with the left hand and spend w_{i} \u00b7 l energy units (w_{i} is a weight of the leftmost item, l is some parameter). If the previous action was the same (left-hand), then the robot spends extra Q_{l} energy units;  Take the rightmost item with the right hand and spend w_{j} \u00b7 r energy units (w_{j} is a weight of the rightmost item, r is some parameter). If the previous action was the same (right-hand), then the robot spends extra Q_{r} energy units; \n\nNaturally, Vasya wants to program the robot in a way that the robot spends as little energy as possible. He asked you to solve this problem. Your task is to find the minimum number of energy units robot spends to collect all items.\n\n\n-----Input-----\n\nThe first line contains five integers n, l, r, Q_{l}, Q_{r} (1 \u2264 n \u2264 10^5; 1 \u2264 l, r \u2264 100; 1 \u2264 Q_{l}, Q_{r} \u2264 10^4).\n\nThe second line contains n integers w_1, w_2, ..., w_{n} (1 \u2264 w_{i} \u2264 100).\n\n\n-----Output-----\n\nIn the single line print a single number \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n3 4 4 19 1\n42 3 99\n\nOutput\n576\n\nInput\n4 7 2 3 9\n1 2 3 4\n\nOutput\n34\n\n\n\n-----Note-----\n\nConsider the first sample. As l = r, we can take an item in turns: first from the left side, then from the right one and last item from the left. In total the robot spends 4\u00b742 + 4\u00b799 + 4\u00b73 = 576 energy units.\n\nThe second sample. The optimal solution is to take one item from the right, then one item from the left and two items from the right. In total the robot spends (2\u00b74) + (7\u00b71) + (2\u00b73) + (2\u00b72 + 9) = 34 energy units.", "difficulty": "competition", "id": 2087, "sample_io": [{"input": "3 4 4 19 1\n42 3 99\n", "output": ["576\n"]}, {"input": "4 7 2 3 9\n1 2 3 4\n", "output": ["34\n"]}], "test_list": [{"input": "3 4 4 19 1\n42 3 99\n", "output": ["576\n"]}, {"input": "4 7 2 3 9\n1 2 3 4\n", "output": ["34\n"]}, {"input": "2 100 100 10000 10000\n100 100\n", "output": ["20000\n"]}, {"input": "2 3 4 5 6\n1 2\n", "output": ["11\n"]}, {"input": "1 78 94 369 10000\n93\n", "output": ["7254\n"]}, {"input": "1 94 78 369 10000\n93\n", "output": ["7254\n"]}, {"input": "5 1 100 1 10000\n1 2 3 4 5\n", "output": ["19\n"]}, {"input": "5 100 1 10000 1\n1 2 3 4 5\n", "output": ["19\n"]}, {"input": "5 1 100 10000 1\n1 2 3 4 5\n", "output": ["906\n"]}, {"input": "5 100 1 1 10000\n1 2 3 4 5\n", "output": ["312\n"]}, {"input": "6 32 47 965 897\n7 4 1 3 5 4\n", "output": ["948\n"]}, {"input": "7 3 13 30 978\n1 2 3 4 5 1 7\n", "output": ["199\n"]}, {"input": "7 13 3 978 30\n7 1 5 4 3 2 1\n", "output": ["199\n"]}], "starter_code": "", "source_codes": ["\nn, l, r, ql, qr = map(int, input().split())\nw = list(map(int, input().split()))\n\nt = 0\nfor i in range(n):\n    t += w[i]\n\nans = float('inf')\nfor i in range(1 << n):\n    s1 = s2 = 0\n    for j in range(n):\n        if (i >> j) & 1:\n            s1 += w[j]\n        else:\n            s2 += w[j]\n    cost = l * s1 + r * s2 + (s1 > 1 and ql * (s1 - 1)) + (s2 > 1 and qr * (s2 - 1))\n    ans = min(ans, cost)\n\nprint(t - ans)\n\n\n"], "responses": ["```python\nn, l, r, ql, qr = map(int, input().split())\nw = list(map(int, input().split()))\n\nt = 0\nfor i in range(n):\n    t += w[i]\n\nans = float('inf')\nfor i in range(1 << n):\n    s1 = s2 = 0\n    for j in range(n):\n        if (i >> j) & 1:\n            s1 += w[j]\n        else:\n            s2 += w[j]\n    cost = l * s1 + r * s2 + (s1 > 1 and ql * (s1 - 1)) + (s2 > 1 and qr * (s2 - 1))\n    ans = min(ans, cost)\n\nprint(t - ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2087}
{"name": "2130", "description": "Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. \n\n\n-----Input-----\n\nThe first line of input will have one integer k (1 \u2264 k \u2264 1000) the number of colors.\n\nThen, k lines will follow. The i-th line will contain c_{i}, the number of balls of the i-th color (1 \u2264 c_{i} \u2264 1000).\n\nThe total number of balls doesn't exceed 1000.\n\n\n-----Output-----\n\nA single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. \n\n\n-----Examples-----\nInput\n3\n2\n2\n1\n\nOutput\n3\n\nInput\n4\n1\n2\n3\n4\n\nOutput\n1680\n\n\n\n-----Note-----\n\nIn the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: \n\n1 2 1 2 3\n\n1 1 2 2 3\n\n2 1 1 2 3", "difficulty": "competition", "id": 2130, "sample_io": [{"input": "3\n2\n2\n1\n", "output": ["3\n"]}, {"input": "4\n1\n2\n3\n4\n", "output": ["1680\n"]}], "test_list": [{"input": "3\n2\n2\n1\n", "output": ["3\n"]}, {"input": "4\n1\n2\n3\n4\n", "output": ["1680\n"]}, {"input": "10\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n", "output": ["12520708\n"]}, {"input": "5\n10\n10\n10\n10\n10\n", "output": ["425711769\n"]}, {"input": "11\n291\n381\n126\n39\n19\n20\n3\n1\n20\n45\n2\n", "output": ["902382672\n"]}, {"input": "1\n1\n", "output": ["1\n"]}, {"input": "13\n67\n75\n76\n80\n69\n86\n75\n86\n81\n84\n73\n72\n76\n", "output": ["232242896\n"]}, {"input": "25\n35\n43\n38\n33\n47\n44\n40\n36\n41\n42\n33\n30\n49\n42\n62\n39\n40\n35\n43\n31\n42\n46\n42\n34\n33\n", "output": ["362689152\n"]}, {"input": "47\n20\n21\n16\n18\n24\n20\n25\n13\n20\n22\n26\n24\n17\n18\n21\n22\n21\n23\n17\n15\n24\n19\n18\n21\n20\n19\n26\n25\n20\n17\n17\n17\n26\n32\n20\n21\n25\n28\n24\n21\n21\n17\n28\n20\n20\n31\n19\n", "output": ["295545118\n"]}, {"input": "3\n343\n317\n337\n", "output": ["691446102\n"]}, {"input": "1\n5\n", "output": ["1\n"]}], "starter_code": "", "source_codes": ["\ndef main():\n    import math\n    # Take user input for k, c values as a list of integers\n    k = int(input())\n    c = [int(input()) for _ in range(k)]\n\n    # Calculate factorials modulo 1000000007 (modulo value)\n    fact = [math.comb(2 * i + 1, i) % 1000000007 for i in range(k)]\n    \n    # Step 1: Initialize variable to store the final result\n    ans = 0\n    \n    # Iterate through each color\n    for i in range(k):\n        # Check if i = k - 1 or i + 2 > c[i]\n        if i == k - 1 or i + 2 > c[i]:\n            continue\n        \n        # Update the variable to store product of factorials (i.e., combination)\n        temp = fact[:i+1][::-1]\n        \n        # Step 2: Multiply factorials in reverse order\n        for j in range(0, len(temp)):\n            temp[j] *= temp[j + 1]\n        \n        # Step 3: Calculate result and store it in the ans variable\n        ans = (ans + c[i] * temp[-1]) % 1000000007\n    \n    print(ans)\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    import math\n    # Take user input for k, c values as a list of integers\n    k = int(input())\n    c = [int(input()) for _ in range(k)]\n\n    # Calculate factorials modulo 1000000007 (modulo value)\n    fact = [math.comb(2 * i + 1, i) % 1000000007 for i in range(k)]\n    \n    # Step 1: Initialize variable to store the final result\n    ans = 0\n    \n    # Iterate through each color\n    for i in range(k):\n        # Check if i = k - 1 or i + 2 > c[i]\n        if i == k - 1 or i + 2 > c[i]:\n            continue\n        \n        # Update the variable to store product of factorials (i.e., combination)\n        temp = fact[:i+1][::-1]\n        \n        # Step 2: Multiply factorials in reverse order\n        for j in range(0, len(temp)):\n            temp[j] *= temp[j + 1]\n        \n        # Step 3: Calculate result and store it in the ans variable\n        ans = (ans + c[i] * temp[-1]) % 1000000007\n    \n    print(ans)\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2130}
{"name": "1604", "description": "You are at the top left cell $(1, 1)$ of an $n \\times m$ labyrinth. Your goal is to get to the bottom right cell $(n, m)$. You can only move right or down, one cell per step. Moving right from a cell $(x, y)$ takes you to the cell $(x, y + 1)$, while moving down takes you to the cell $(x + 1, y)$.\n\nSome cells of the labyrinth contain rocks. When you move to a cell with rock, the rock is pushed to the next cell in the direction you're moving. If the next cell contains a rock, it gets pushed further, and so on.\n\nThe labyrinth is surrounded by impenetrable walls, thus any move that would put you or any rock outside of the labyrinth is illegal.\n\nCount the number of different legal paths you can take from the start to the goal modulo $10^9 + 7$. Two paths are considered different if there is at least one cell that is visited in one path, but not visited in the other.\n\n\n-----Input-----\n\nThe first line contains two integers $n, m$\u00a0\u2014 dimensions of the labyrinth ($1 \\leq n, m \\leq 2000$).\n\nNext $n$ lines describe the labyrinth. Each of these lines contains $m$ characters. The $j$-th character of the $i$-th of these lines is equal to \"R\" if the cell $(i, j)$ contains a rock, or \".\" if the cell $(i, j)$ is empty.\n\nIt is guaranteed that the starting cell $(1, 1)$ is empty.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of different legal paths from $(1, 1)$ to $(n, m)$ modulo $10^9 + 7$.\n\n\n-----Examples-----\nInput\n1 1\n.\n\nOutput\n1\n\nInput\n2 3\n...\n..R\n\nOutput\n0\n\nInput\n4 4\n...R\n.RR.\n.RR.\nR...\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample case we can't (and don't have to) move, hence the only path consists of a single cell $(1, 1)$.\n\nIn the second sample case the goal is blocked and is unreachable.\n\nIllustrations for the third sample case can be found here: https://assets.codeforces.com/rounds/1225/index.html", "difficulty": "interview", "id": 1604, "sample_io": [{"input": "1 1\n.\n", "output": ["1\n"]}, {"input": "2 3\n...\n..R\n", "output": ["0\n"]}, {"input": "4 4\n...R\n.RR.\n.RR.\nR...\n", "output": ["4\n"]}], "test_list": [{"input": "1 1\n.\n", "output": ["1\n"]}, {"input": "2 3\n...\n..R\n", "output": ["0\n"]}, {"input": "4 4\n...R\n.RR.\n.RR.\nR...\n", "output": ["4\n"]}, {"input": "1 3\n.R.\n", "output": ["0\n"]}, {"input": "2 2\n.R\nR.\n", "output": ["0\n"]}, {"input": "10 10\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n", "output": ["48620\n"]}], "starter_code": "", "source_codes": ["\nimport sys\n\nMOD = 1000000007\n\ndef count_paths():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    # Create a list of lists to hold the number of rocks on each row\n    rock_counts = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == 'R':\n                rock_counts[i][j] = rock_counts[i - 1][j] + 1\n            else:\n                rock_counts[i][j] = rock_counts[i - 1][j]\n\n    # Create a list to hold the number of paths ending at each cell\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    dp[1][1] = 1\n\n    # Fill up the dp table using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            if rock_counts[i][j]:\n                dp[i][j] += dp[i - int(rock_counts[i][j])][j]\n            \n            if j >= 2 and rock_counts[i][j - 1]:\n                dp[i][j] += dp[i][j - int(rock_counts[i][j - 1])]\n            \n            dp[i][j] %= MOD\n\n    return dp[n][m]\n\nprint(count_paths())\n\n\n"], "responses": ["```python\nimport sys\n\nMOD = 1000000007\n\ndef count_paths():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n\n    # Create a list of lists to hold the number of rocks on each row\n    rock_counts = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == 'R':\n                rock_counts[i][j] = rock_counts[i - 1][j] + 1\n            else:\n                rock_counts[i][j] = rock_counts[i - 1][j]\n\n    # Create a list to hold the number of paths ending at each cell\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    dp[1][1] = 1\n\n    # Fill up the dp table using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            if rock_counts[i][j]:\n                dp[i][j] += dp[i - int(rock_counts[i][j])][j]\n            \n            if j >= 2 and rock_counts[i][j - 1]:\n                dp[i][j] += dp[i][j - int(rock_counts[i][j - 1])]\n            \n            dp[i][j] %= MOD\n\n    return dp[n][m]\n\nprint(count_paths())\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 1604}
{"name": "2160", "description": "Polycarp took $n$ videos, the duration of the $i$-th video is $a_i$ seconds. The videos are listed in the chronological order, i.e. the $1$-st video is the earliest, the $2$-nd video is the next, ..., the $n$-th video is the last.\n\nNow Polycarp wants to publish exactly $k$ ($1 \\le k \\le n$) posts in Instabram. Each video should be a part of a single post. The posts should preserve the chronological order, it means that the first post should contain one or more of the earliest videos, the second post should contain a block (one or more videos) going next and so on. In other words, if the number of videos in the $j$-th post is $s_j$ then:\n\n  $s_1+s_2+\\dots+s_k=n$ ($s_i>0$),  the first post contains the videos: $1, 2, \\dots, s_1$;  the second post contains the videos: $s_1+1, s_1+2, \\dots, s_1+s_2$;  the third post contains the videos: $s_1+s_2+1, s_1+s_2+2, \\dots, s_1+s_2+s_3$;  ...  the $k$-th post contains videos: $n-s_k+1,n-s_k+2,\\dots,n$. \n\nPolycarp is a perfectionist, he wants the total duration of videos in each post to be the same.\n\nHelp Polycarp to find such positive integer values $s_1, s_2, \\dots, s_k$ that satisfy all the conditions above.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$). The next line contains $n$ positive integer numbers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^4$), where $a_i$ is the duration of the $i$-th video.\n\n\n-----Output-----\n\nIf solution exists, print \"Yes\" in the first line. Print $k$ positive integers $s_1, s_2, \\dots, s_k$ ($s_1+s_2+\\dots+s_k=n$) in the second line. The total duration of videos in each post should be the same. It can be easily proven that the answer is unique (if it exists).\n\nIf there is no solution, print a single line \"No\".\n\n\n-----Examples-----\nInput\n6 3\n3 3 1 4 1 6\n\nOutput\nYes\n2 3 1 \nInput\n3 3\n1 1 1\n\nOutput\nYes\n1 1 1 \nInput\n3 3\n1 1 2\n\nOutput\nNo\nInput\n3 1\n1 10 100\n\nOutput\nYes\n3", "difficulty": "competition", "id": 2160, "sample_io": [{"input": "6 3\n3 3 1 4 1 6\n", "output": ["Yes\n2 3 1 "]}, {"input": "3 3\n1 1 1\n", "output": ["Yes\n1 1 1 "]}, {"input": "3 3\n1 1 2\n", "output": ["No"]}, {"input": "3 1\n1 10 100\n", "output": ["Yes\n3 "]}], "test_list": [{"input": "6 3\n3 3 1 4 1 6\n", "output": ["Yes\n2 3 1 "]}, {"input": "3 3\n1 1 1\n", "output": ["Yes\n1 1 1 "]}, {"input": "3 3\n1 1 2\n", "output": ["No"]}, {"input": "3 1\n1 10 100\n", "output": ["Yes\n3 "]}, {"input": "1 1\n3\n", "output": ["Yes\n1 "]}, {"input": "2 1\n1 3\n", "output": ["Yes\n2 "]}, {"input": "2 1\n3 3\n", "output": ["Yes\n2 "]}, {"input": "2 2\n3 1\n", "output": ["No"]}, {"input": "2 2\n1 3\n", "output": ["No"]}, {"input": "4 2\n2 1 3 1\n", "output": ["No"]}], "starter_code": "", "source_codes": ["\ndef main():\n    # Take user input as two space-separated integers representing n and k in Berland\n    n, k = map(int, input().split())\n\n    # Take a list of video durations as input\n    videos = list(map(int, input().split()))\n\n    # Step 1: Calculate the total duration of all videos\n    total_duration = sum(videos)\n\n    # Check if it's possible to divide all videos into equal groups based on their durations\n    group_size = total_duration // n\n\n    # Check if any video duration is less than the group size\n    has_small_video = False\n    for i in range(n):\n        if videos[i] < group_size:\n            has_small_video = True\n            break\n\n    # If there are small videos and it's not possible to divide all videos into equal groups, print 'No'\n    if has_small_video and total_duration % n != 0:\n        print(\"No\")\n        return\n\n    # Initialize a list to store the number of videos in each group\n    group_sizes = []\n\n    # Calculate the size of each group\n    for i in range(k):\n        group_size = (total_duration // k) + int(i < (total_duration % k))\n        group_sizes.append(group_size)\n\n    # Print 'Yes' and the group sizes\n    print(\"Yes\")\n    print(' '.join(map(str, group_sizes)))\n\n# Call the main function\nmain()\n\n\n"], "responses": ["```python\ndef main():\n    # Take user input as two space-separated integers representing n and k in Berland\n    n, k = map(int, input().split())\n\n    # Take a list of video durations as input\n    videos = list(map(int, input().split()))\n\n    # Step 1: Calculate the total duration of all videos\n    total_duration = sum(videos)\n\n    # Check if it's possible to divide all videos into equal groups based on their durations\n    group_size = total_duration // n\n\n    # Check if any video duration is less than the group size\n    has_small_video = False\n    for i in range(n):\n        if videos[i] < group_size:\n            has_small_video = True\n            break\n\n    # If there are small videos and it's not possible to divide all videos into equal groups, print 'No'\n    if has_small_video and total_duration % n != 0:\n        print(\"No\")\n        return\n\n    # Initialize a list to store the number of videos in each group\n    group_sizes = []\n\n    # Calculate the size of each group\n    for i in range(k):\n        group_size = (total_duration // k) + int(i < (total_duration % k))\n        group_sizes.append(group_size)\n\n    # Print 'Yes' and the group sizes\n    print(\"Yes\")\n    print(' '.join(map(str, group_sizes)))\n\n# Call the main function\nmain()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2160}
{"name": "2153", "description": "In order to fly to the Moon Mister B just needs to solve the following problem.\n\nThere is a complete indirected graph with n vertices. You need to cover it with several simple cycles of length 3 and 4 so that each edge is in exactly 2 cycles.\n\nWe are sure that Mister B will solve the problem soon and will fly to the Moon. Will you?\n\n\n-----Input-----\n\nThe only line contains single integer n (3 \u2264 n \u2264 300).\n\n\n-----Output-----\n\nIf there is no answer, print -1.\n\nOtherwise, in the first line print k (1 \u2264 k \u2264 n^2)\u00a0\u2014 the number of cycles in your solution.\n\nIn each of the next k lines print description of one cycle in the following format: first print integer m (3 \u2264 m \u2264 4)\u00a0\u2014 the length of the cycle, then print m integers v_1, v_2, ..., v_{m} (1 \u2264 v_{i} \u2264 n)\u00a0\u2014 the vertices in the cycle in the traverse order. Each edge should be in exactly two cycles.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n2\n3 1 2 3\n3 1 2 3\n\nInput\n5\n\nOutput\n6\n3 5 4 2\n3 3 1 5\n4 4 5 2 3\n4 4 3 2 1\n3 4 2 1\n3 3 1 5", "difficulty": "competition", "id": 2153, "sample_io": [{"input": "3\n", "output": ["2\n3 1 2 3\n3 1 2 3\n"]}, {"input": "5\n", "output": ["6\n3 1 2 3\n3 2 3 4\n3 3 4 5\n3 4 5 1\n4 2 1 3 5\n4 5 1 4 2\n"]}], "test_list": [{"input": "3\n", "output": ["2\n3 1 2 3\n3 1 2 3\n"]}, {"input": "5\n", "output": ["6\n3 1 2 3\n3 2 3 4\n3 3 4 5\n3 4 5 1\n4 2 1 3 5\n4 5 1 4 2\n"]}, {"input": "4\n", "output": ["4\n3 4 1 2\n3 2 3 4\n3 1 2 3\n3 3 4 1\n"]}, {"input": "5\n", "output": ["6\n3 1 2 3\n3 2 3 4\n3 3 4 5\n3 4 5 1\n4 2 1 3 5\n4 5 1 4 2\n"]}, {"input": "6\n", "output": ["9\n3 6 1 2\n4 6 2 5 3\n3 3 4 5\n3 1 2 3\n4 1 3 6 4\n3 4 5 6\n3 2 3 4\n4 2 4 1 5\n3 5 6 1\n"]}, {"input": "7\n", "output": ["12\n4 2 3 1 4\n4 3 4 2 5\n4 4 5 3 6\n4 5 6 4 7\n4 6 7 5 1\n4 7 1 6 2\n3 2 5 6\n3 1 5 4\n3 3 6 7\n3 7 4 3\n3 3 2 1\n3 7 1 2\n"]}, {"input": "8\n", "output": ["16\n3 8 1 2\n4 8 2 7 3\n4 7 3 6 4\n3 4 5 6\n3 1 2 3\n4 1 3 8 4\n4 8 4 7 5\n3 5 6 7\n3 2 3 4\n4 2 4 1 5\n4 1 5 8 6\n3 6 7 8\n3 3 4 5\n4 3 5 2 6\n4 2 6 1 7\n3 7 8 1\n"]}, {"input": "9\n", "output": ["20\n3 1 2 3\n4 1 3 9 4\n3 2 3 4\n4 2 4 1 5\n3 3 4 5\n4 3 5 2 6\n3 4 5 6\n4 4 6 3 7\n3 5 6 7\n4 5 7 4 8\n3 6 7 8\n4 6 8 5 9\n3 7 8 9\n4 7 9 6 1\n3 8 9 1\n4 8 1 7 2\n4 2 1 5 9\n4 9 1 6 2\n4 3 9 4 8\n4 8 2 7 3\n"]}, {"input": "10\n", "output": ["25\n3 10 1 2\n4 10 2 9 3\n4 9 3 8 4\n4 8 4 7 5\n3 5 6 7\n3 1 2 3\n4 1 3 10 4\n4 10 4 9 5\n4 9 5 8 6\n3 6 7 8\n3 2 3 4\n4 2 4 1 5\n4 1 5 10 6\n4 10 6 9 7\n3 7 8 9\n3 3 4 5\n4 3 5 2 6\n4 2 6 1 7\n4 1 7 10 8\n3 8 9 10\n3 4 5 6\n4 4 6 3 7\n4 3 7 2 8\n4 2 8 1 9\n3 9 10 1\n"]}, {"input": "11\n", "output": ["30\n4 2 3 1 4\n4 1 4 11 5\n4 3 4 2 5\n4 2 5 1 6\n4 4 5 3 6\n4 3 6 2 7\n4 5 6 4 7\n4 4 7 3 8\n4 6 7 5 8\n4 5 8 4 9\n4 7 8 6 9\n4 6 9 5 10\n4 8 9 7 10\n4 7 10 6 11\n4 9 10 8 11\n4 8 11 7 1\n4 10 11 9 1\n4 9 1 8 2\n4 11 1 10 2\n4 10 2 9 3\n3 2 7 8\n3 1 7 6\n3 3 8 9\n3 11 6 5\n3 4 9 10\n3 10 5 4\n3 3 2 1\n3 11 1 2\n3 4 3 11\n3 10 11 3\n"]}], "starter_code": "", "source_codes": ["\nimport sys,math,itertools\n\nn = int(input())\n\ndef dfs(x):\n    global ans,vis,cycle,edge,sz\n    for y in range(n):\n        if x == y or vis[y]: continue\n        vis[y] = 1\n        sz += 1\n        cycle.append([x,y])\n        edge[x^2+n*y^2]+=1\n        edge[n+x^2+n*y^2]+=1\n        dfs(y)\n\nvis=[0]*n\ncycle=[]\nedge=[0]*(n**2*2)\nsz=0\ndfs(0)\n\nans=(n-2)//3\n\nif n == 300:\n    ans+=10\n\nprint(ans)\n\nfor i in range(n):\n    for j in range(i+1,n):\n        if edge[i^2+n*j^2]==2: cycle.append([i,j])\n\nk = len(cycle)\nprint(k)\nfor v in cycle:\n    l = len(v)\n    print(l,end=' ')\n    for x in v:\n        print(x+1,end=' ')\n    print()\n\n\n"], "responses": ["```python\nimport sys,math,itertools\n\nn = int(input())\n\ndef dfs(x):\n    global ans,vis,cycle,edge,sz\n    for y in range(n):\n        if x == y or vis[y]: continue\n        vis[y] = 1\n        sz += 1\n        cycle.append([x,y])\n        edge[x^2+n*y^2]+=1\n        edge[n+x^2+n*y^2]+=1\n        dfs(y)\n\nvis=[0]*n\ncycle=[]\nedge=[0]*(n**2*2)\nsz=0\ndfs(0)\n\nans=(n-2)//3\n\nif n == 300:\n    ans+=10\n\nprint(ans)\n\nfor i in range(n):\n    for j in range(i+1,n):\n        if edge[i^2+n*j^2]==2: cycle.append([i,j])\n\nk = len(cycle)\nprint(k)\nfor v in cycle:\n    l = len(v)\n    print(l,end=' ')\n    for x in v:\n        print(x+1,end=' ')\n    print()\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2153}
{"name": "2060", "description": "Evlampiy has found one more cool application to process photos. However the application has certain limitations.\n\nEach photo i has a contrast v_{i}. In order for the processing to be truly of high quality, the application must receive at least k photos with contrasts which differ as little as possible.\n\nEvlampiy already knows the contrast v_{i} for each of his n photos. Now he wants to split the photos into groups, so that each group contains at least k photos. As a result, each photo must belong to exactly one group.\n\nHe considers a processing time of the j-th group to be the difference between the maximum and minimum values of v_{i} in the group. Because of multithreading the processing time of a division into groups is the maximum processing time among all groups.\n\nSplit n photos into groups in a such way that the processing time of the division is the minimum possible, i.e. that the the maximum processing time over all groups as least as possible.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 3\u00b710^5) \u2014 number of photos and minimum size of a group.\n\nThe second line contains n integers v_1, v_2, ..., v_{n} (1 \u2264 v_{i} \u2264 10^9), where v_{i} is the contrast of the i-th photo.\n\n\n-----Output-----\n\nPrint the minimal processing time of the division into groups.\n\n\n-----Examples-----\nInput\n5 2\n50 110 130 40 120\n\nOutput\n20\n\nInput\n4 1\n2 3 4 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the photos should be split into 2 groups: [40, 50] and [110, 120, 130]. The processing time of the first group is 10, and the processing time of the second group is 20. Maximum among 10 and 20 is 20. It is impossible to split the photos into groups in a such way that the processing time of division is less than 20.\n\nIn the second example the photos should be split into four groups, each containing one photo. So the minimal possible processing time of a division is 0.", "difficulty": "competition", "id": 2060, "sample_io": [{"input": "5 2\n50 110 130 40 120\n", "output": ["20\n"]}, {"input": "4 1\n2 3 4 1\n", "output": ["0\n"]}], "test_list": [{"input": "5 2\n50 110 130 40 120\n", "output": ["20\n"]}, {"input": "4 1\n2 3 4 1\n", "output": ["0\n"]}, {"input": "1 1\n4\n", "output": ["0\n"]}, {"input": "2 2\n7 5\n", "output": ["2\n"]}, {"input": "3 2\n34 3 75\n", "output": ["72\n"]}, {"input": "5 2\n932 328 886 96 589\n", "output": ["343\n"]}, {"input": "10 4\n810 8527 9736 3143 2341 6029 7474 707 2513 2023\n", "output": ["3707\n"]}, {"input": "20 11\n924129 939902 178964 918687 720767 695035 577430 407131 213304 810868 596349 266075 123602 376312 36680 18426 716200 121546 61834 851586\n", "output": ["921476\n"]}, {"input": "100 28\n1 2 3 5 1 1 1 4 1 5 2 4 3 2 5 4 1 1 4 1 4 5 4 1 4 5 1 3 5 1 1 1 4 2 5 2 3 5 2 2 3 2 4 5 5 5 5 1 2 4 1 3 1 1 1 4 3 1 5 2 5 1 3 3 2 4 5 1 1 3 4 1 1 3 3 1 2 4 3 3 4 4 3 1 2 1 5 1 4 4 2 3 1 3 3 4 2 4 1 1\n", "output": ["1\n"]}, {"input": "101 9\n3 2 2 1 4 1 3 2 3 4 3 2 3 1 4 4 1 1 4 1 3 3 4 1 2 1 1 3 1 2 2 4 3 1 4 3 1 1 4 4 1 2 1 1 4 2 3 4 1 2 1 4 4 1 4 3 1 4 2 1 2 1 4 3 4 3 4 2 2 4 3 2 1 3 4 3 2 2 4 3 3 2 4 1 3 2 2 4 1 3 4 2 1 3 3 2 2 1 1 3 1\n", "output": ["0\n"]}, {"input": "2 2\n1 1000000000\n", "output": ["999999999\n"]}, {"input": "2 1\n1 1000000000\n", "output": ["0\n"]}, {"input": "11 3\n412 3306 3390 2290 1534 316 1080 2860 253 230 3166\n", "output": ["1122\n"]}, {"input": "10 3\n2414 294 184 666 2706 1999 2201 1270 904 653\n", "output": ["707\n"]}, {"input": "24 4\n33 27 12 65 19 6 46 33 57 2 21 50 73 13 59 69 51 45 39 1 6 64 39 27\n", "output": ["9\n"]}], "starter_code": "", "source_codes": ["\nimport sys\n\nn, k = map(int, input().split())\nv = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    lo, hi = i * k, min((i + 1) * k - 1 if (i + 1) * k <= n else n - 1, n - 1)\n    ans = max(ans, max(v[lo:hi+1]) - min(v[lo:hi+1]))\n\nprint(ans)\n\n\n"], "responses": ["```python\nimport sys\n\nn, k = map(int, input().split())\nv = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    lo, hi = i * k, min((i + 1) * k - 1 if (i + 1) * k <= n else n - 1, n - 1)\n    ans = max(ans, max(v[lo:hi+1]) - min(v[lo:hi+1]))\n\nprint(ans)\n```"], "prompt_tokens": [0], "completion_tokens": [0], "no_of_try": 1, "is_solved": false, "language": "Python3", "task_id": 2060}
